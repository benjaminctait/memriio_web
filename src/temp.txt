renderProcess = () => {
  console.log('render process : ',this.state.viewProcess);
  let processContent = null
  if(this.state.viewProcess === 'process') processContent = this.renderProcessDescription()
  if(this.state.viewProcess === 'capture') processContent = this.renderProcessCapture()
  if(this.state.viewProcess === 'craft') processContent = this.renderProcessCraft()
  if(this.state.viewProcess === 'connect') processContent = this.renderProcessConnect()
  if(this.state.viewProcess === 'measure') processContent = this.renderProcessMeasure()
   
  
  
  return (
    <div className='cardField' >     
      <div className='process' >
        <div className='processBox ' style={{textAlign : 'center'}}>
          <p className= 'processLabel '
              onClick={()=>this.setState({viewProcess:'capture', captureView:'mobile'}) }>Capture </p>
          <p className= 'processLabel '
              onClick={()=>this.setState({viewProcess:'craft' , craftView:'phone' }) }>Craft </p>
          <p className= 'processLabel '
              onClick={()=>this.setState({viewProcess:'connect' , connectView:'soft'}) }>Connect </p>
          <p className= 'processLabel '
              onClick={()=>this.setState({viewProcess:'measure' , measureView:'points'}) }>Measure </p>
           
        </div>
        
        <div className='processImageBox ' >
          {processContent}
        </div>
       
      </div>
    </div>

    )
}


renderProcessDescription = () =>{
  return (
    <div style={{height:'100%', display:'flex',flexDirection:'row',justifyContent:'left'}}>
      <div className= 'processDescription '>
        <p > You're busy at work. </p>
        <p >Capturing organisational knowledge is a time consuming 
           and  distracting.</p>  

        <p >We aim to make capturing knowledge easy.</p>

        <p >Just click and send, We'll do the rest</p>
        
        
      </div>

    </div>

    )

}
