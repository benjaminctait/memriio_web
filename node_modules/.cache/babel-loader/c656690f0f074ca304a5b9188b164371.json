{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/newmemorymodal.js\";\nimport React from 'react';\nimport greycross from '../images/x-grey.png';\nimport tick from '../images/tick.png';\nimport tag from '../images/tag.png';\nimport globe from '../images/outline-globe.png';\nimport calendar from '../images/calendar.png';\nimport key from '../images/key.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport trash from '../images/trash.png';\nimport hero from '../images/hero-full.png';\nimport heroOutline from '../images/hero-outline-grey.png';\nimport cloudIMG from '../images/cloud.png';\nimport cloudupload from '../images/cloudupload.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport * as mem from '../memriioserver';\nimport * as DropSearch from '../dropsearch/dropsearch';\nimport WordExctractor from 'keyword-extractor';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport './memorymodal.css';\nimport { CheckBox, ImageLabel } from '../buttons/buttons';\n\nclass NewMemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memid: 0,\n      createdon: '',\n      user: null,\n      title: '',\n      description: '',\n      location: '',\n      story: '',\n      cardtype: 0,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      memfiles: [],\n      cloudPeople: [],\n      activefile: null,\n      userClouds: [],\n      memfileIndex: 0\n    };\n\n    this.onHide = () => {\n      this.state = {\n        memid: 0,\n        createdon: '',\n        user: null,\n        title: '',\n        description: '',\n        location: '',\n        story: '',\n        cardtype: 0,\n        taggedPeople: [],\n        memoryClouds: [],\n        searchWords: [],\n        memfiles: [],\n        cloudPeople: [],\n        activefile: null,\n        userClouds: [],\n        memfileIndex: 0\n      };\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (!this.state.user || prevProps.userid !== this.state.user.userid) {\n        mem.getUser(this.props.userid, user => {\n          this.setState({\n            user: user,\n            userClouds: this.props.userClouds,\n            createdon: Date.now()\n          });\n        });\n      }\n    };\n\n    this.getHeroFile = () => {\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map((memfile, index) => {\n        if (memfile.ishero) {\n          this.state.memfileIndex = index;\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      mem.getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.userIsAuthorisedToEdit = () => {\n      return true;\n    };\n\n    this.deleteFileFromMemory = () => {\n      console.log('delte file from memroy');\n    };\n\n    this.makeHeroFile = () => {\n      console.log('make hero file');\n    };\n\n    this.handleAddTaggedPerson = Person => {\n      let tp = this.state.taggedPeople;\n\n      if (!tp.find(dude => dude.userid === Person.userid)) {\n        tp.push(Person);\n        tp.reverse();\n        this.setState({\n          taggedPeople: tp\n        });\n      }\n    };\n\n    this.handleRemoveFromCloud = Cloud => {\n      let cl = [];\n      this.state.memoryClouds.map(cloud => {\n        if (cloud.id !== Cloud.id) cl.push(cloud);\n      });\n      this.populateCloudInfo(cl);\n    };\n\n    this.handleDeleteTaggedPerson = Person => {\n      let tp = [];\n      this.state.taggedPeople.map(p => {\n        if (p.userid !== Person.userid) tp.push(p);\n      });\n      this.setState({\n        taggedPeople: tp\n      });\n    };\n\n    this.handleUploadMemory = () => {\n      let me = this.state;\n      mem.createMemoryID(me.user.userid, me.title, me.description, me.story).then(memid => {\n        memid = parseInt(memid);\n        this.state.memid = memid;\n        me.taggedPeople.map(person => {\n          mem.addTaggedPerson(memid, person.userid);\n        });\n        me.memoryClouds.map(cloud => {\n          mem.addTaggedCloud(memid, cloud.id);\n        });\n        mem.setMemorySearchWords(memid, me.searchWords); // me.memfiles.map( memfile  =>  { this.prepAndUploadFile ( memfile.file ) })    \n      }, error => {\n        alert(error);\n      });\n    };\n\n    this.handleAddCloud = clouds => {\n      let cloud = clouds[0];\n      let cl = this.state.memoryClouds;\n      let newCloudID = parseInt(cloud.value);\n\n      if (!cl.find(newcl => newcl.id === newCloudID)) {\n        cl.push({\n          id: newCloudID,\n          name: cloud.label\n        });\n        cl.reverse();\n        this.setState({\n          memoryClouds: cl\n        }, this.populateCloudInfo(cl));\n      }\n    };\n\n    this.activeFileisHero = () => {\n      var afile = this.state.activefile;\n\n      if (afile) {\n        if (afile.ishero) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    this.render = () => {\n      if (this.props.show) {\n        let memoryContent = this.renderMemoryContent();\n        let carouselControls = this.renderCarouselControls();\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"backdropStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 9\n          }\n        }, memoryContent, carouselControls));\n      } else {\n        return null;\n      }\n    };\n\n    this.renderMemoryContent = () => {\n      const imageZone = this.renderImageZone();\n      const storyZone = this.renderStoryZone();\n      const detailsZone = this.renderDetailsZone();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 7\n        }\n      }, imageZone, storyZone, detailsZone);\n    };\n\n    this.handleSearchWordClick = (itemKey, upState) => {\n      const ind = this.state.searchWords.findIndex(item => {\n        return item.id === itemKey;\n      });\n      this.state.searchWords[ind].included = upState;\n      this.setState({\n        searchWords: this.state.searchWords\n      });\n    };\n\n    this.renderKeyWords = () => {\n      return /*#__PURE__*/React.createElement(Container, {\n        onDrop: e => this.setState({\n          searchWords: this.applyDrag(this.state.searchWords, e)\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 5\n        }\n      }, this.state.searchWords.map((wordItem, idx) => {\n        return /*#__PURE__*/React.createElement(Draggable, {\n          className: \"wordListItem\",\n          key: 'k' + idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(CheckBox, {\n          itemKey: wordItem.id,\n          onClick: this.handleSearchWordClick,\n          upState: wordItem.included,\n          downImg: greycross,\n          upImg: tick,\n          label: wordItem.keyword,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }\n        }));\n      }));\n    };\n\n    this.applyDrag = (arr, dragResult) => {\n      const {\n        removedIndex,\n        addedIndex,\n        payload\n      } = dragResult;\n      if (removedIndex === null && addedIndex === null) return arr;\n      const result = [...arr];\n      let itemToAdd = payload;\n      if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n      if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n      return result;\n    };\n\n    this.renderTaggedPeople = () => {\n      const people = this.state.taggedPeople.map(p => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'p' + p.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          data: p,\n          leftImg: tag,\n          badge: x,\n          onBadgeClick: this.handleDeleteTaggedPerson,\n          label: p.firstname + ' ' + p.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }\n        }));\n      });\n\n      if (this.state.user) {\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'a' + this.state.user.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: author,\n          label: this.state.user.firstname + ' ' + this.state.user.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      people.reverse();\n      people.push( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 20\n        }\n      }, \" \", DropSearch.peopleDropSearch(this.state.cloudPeople, this.handleAddTaggedPerson), \" \"));\n      return people;\n    };\n\n    this.renderDetails = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'location',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        leftImg: globe,\n        label: 'IMPLEMENT',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 28\n        }\n      })), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'sss',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        leftImg: calendar,\n        label: mem.getShortDate(this.state.createdon),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 23\n        }\n      })));\n    };\n\n    this.renderClouds = () => {\n      const clouds = this.state.memoryClouds.map(cloud => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'cloud' + cloud.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          data: cloud,\n          badge: x,\n          onBadgeClick: this.handleRemoveFromCloud,\n          leftImg: cloudIMG,\n          label: cloud.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 38\n          }\n        }));\n      });\n      clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 20\n        }\n      }, \" \", DropSearch.cloudDropSearch(this.state.userClouds, null, true, true, this.handleAddCloud, this.state.user.userid)));\n      return clouds;\n    };\n\n    this.renderImageZone = () => {\n      let editControls = null;\n      let af = this.state.activefile;\n      let tempFile = null;\n      var heroImg = this.activeFileisHero() ? hero : heroOutline;\n      editControls = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imageEditConrols\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: trash,\n        onClick: this.deleteFileFromMemory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 5\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: heroImg,\n        onClick: this.makeHeroFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 5\n        }\n      }));\n\n      if (af) {\n        tempFile = {\n          fileurl: af.localurl,\n          ishero: af.ishero,\n          fileext: mem.getExtension(af.file.name),\n          thumburl: af.localurl,\n          thumbext: mem.getExtension(af.file.name)\n        };\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imgcolumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n        memfile: tempFile,\n        thumbStyleClass: 'memoryModalImage',\n        fileStyleClass: 'memoryModalImage',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 9\n        }\n      }), editControls);\n    };\n\n    this.onTitleBlur = e => {\n      const newTitle = e.target.value;\n      if (newTitle !== this.state.title) this.state.title = newTitle;\n    };\n\n    this.onDescriptionBlur = e => {\n      const newDescription = e.target.value;\n      if (newDescription !== this.state.description) this.state.description = newDescription;\n    };\n\n    this.onStoryBlur = e => {\n      const newStory = e.target.value;\n      if (newStory !== this.state.story) this.state.story = newStory;\n    };\n\n    this.handleStoryChange = event => {\n      let addarray = this.state.searchWords;\n      let addarray2 = [];\n      let story = event.target.value;\n      let words = WordExctractor.extract(story, {\n        language: \"english\",\n        remove_digits: true,\n        return_changed_case: true,\n        remove_duplicates: true\n      }); // add any new words that exist in the story\n\n      words.map(word => {\n        if (!this.searchWordExists(word)) {\n          addarray.push({\n            included: true,\n            keyword: word,\n            strength: 0\n          });\n        }\n      }); // remove any search words that now longer exist in the story\n\n      addarray.map(w => {\n        if (words.find(word => w.keyword === word) !== undefined) {\n          addarray2.push({\n            included: w.included,\n            keyword: w.keyword,\n            strength: w.strength\n          });\n        }\n      });\n      this.setState({\n        searchWords: addarray2,\n        story: story\n      });\n    };\n\n    this.searchWordExists = word => {\n      return this.state.searchWords.find(wordItem => word === wordItem.keyword);\n    };\n\n    this.renderStoryZone = () => {\n      const mem = this.state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infoColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        onBlur: this.onTitleBlur,\n        className: \"input-reset titleEdit\",\n        type: \"text\",\n        defaultValue: mem.title,\n        placeholder: \"Title\",\n        id: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        onBlur: this.onDescriptionBlur,\n        className: \"input-reset descriptionEdit\",\n        type: \"text\",\n        defaultValue: mem.description,\n        placeholder: \"Description\",\n        id: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"textarea\", {\n        onBlur: this.onStoryBlur,\n        className: \"input-reset storyEdit\",\n        onChange: this.handleStoryChange,\n        type: \"text\",\n        defaultValue: mem.story,\n        placeholder: \"Description\",\n        id: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.renderCornerControls = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: x,\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: cloudupload,\n        onClick: this.handleUploadMemory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.renderDetailsZone = () => {\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n      const clouds = this.renderClouds();\n      const cornerCtrls = this.renderCornerControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detailsColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 9\n        }\n      }, \"Tags \"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"keyWordList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 9\n        }\n      }, \"  \", keywords, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z25\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 9\n        }\n      }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"peopleList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 9\n        }\n      }, \"   \", people, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 9\n        }\n      }, \"Clouds\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"cloudList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 9\n        }\n      }, \"    \", clouds, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 9\n        }\n      }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"detailsList \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 9\n        }\n      }, \"        \", details, \" \")), cornerCtrls);\n    };\n\n    this.handleDropfiles = async acceptedFiles => {\n      const reader = new FileReader();\n      acceptedFiles.forEach(file => {\n        reader.onload = () => {\n          console.log('onload ' + file.name);\n\n          if (mem.canHandleDroppedFile(file.name)) {\n            console.log('can handle dropped file ' + file.name);\n            let mfs = this.state.memfiles;\n            let newfile = {\n              file: file,\n              localurl: reader.result,\n              isHero: false\n            };\n            mfs.push(newfile);\n\n            if (!this.state.activefile) {\n              newfile.ishero = true;\n              this.state.activefile = newfile;\n            }\n\n            this.setState({\n              memfiles: mfs\n            });\n          } else {\n            alert('File type ' + mem.getExtension(file.name) + ' not yet implemented');\n          }\n        };\n\n        reader.readAsDataURL(file);\n      });\n    };\n\n    this.prepAndUploadFile = file => {\n      let commonfileName = this.state.user.userid + '-' + Date.now();\n      let ext = mem.getExtension(file.name);\n      let fname = commonfileName + '-original' + '.' + ext;\n      let tname = commonfileName + '-thumb' + '.' + ext;\n      let filebuffer = null;\n      let memfile = {\n        id: 0,\n        memid: this.state.memid,\n        fileurl: '',\n        ishero: false,\n        fileext: ext,\n        thumburl: '',\n        thumbext: ext\n      };\n      mem.compressImage(file, 0.9).then(result => {\n        if (result.success) {\n          filebuffer = result.data;\n          mem.resizeImage(filebuffer, 1500).then(result => {\n            if (result.success) {\n              mem.uploadFile(tname, result.data).then(result => {\n                if (result.success) {\n                  memfile.thumburl = result.awsurl;\n                  mem.uploadFile(fname, filebuffer).then(result => {\n                    if (result.success) {\n                      memfile.fileurl = result.awsurl;\n                      mem.addFileToMemory({\n                        originalURL: memfile.fileurl,\n                        thumbURL: memfile.thumburl\n                      }, false, this.state.memid).then(result => {\n                        if (result.success) {\n                          console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.renderCarouselControls = () => {\n      const mem = this.state;\n      const mfiles = mem.memfiles;\n      let thumbs = mfiles.map((mfile, index) => {\n        return /*#__PURE__*/React.createElement(\"img\", {\n          key: 'thumb' + index,\n          className: \"thumb\",\n          src: mfile.localurl,\n          onClick: index => {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 14\n          }\n        });\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"controlbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: left,\n        onClick: this.goBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Dropzone, {\n        onDrop: acceptedFiles => this.handleDropfiles(acceptedFiles),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 7\n        }\n      }, ({\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        className: \"thumbArrayEdit\"\n      }, getRootProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }\n      }), thumbs)), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: right,\n        onClick: this.goForward,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.goBack = e => {\n      let ubound = this.state.memfiles.length - 1;\n\n      if (this.state.memfileIndex === 0) {\n        this.state.memfileIndex = ubound;\n      } else {\n        this.state.memfileIndex--;\n      }\n\n      this.setState({\n        activefile: this.state.memfiles[this.state.memfileIndex]\n      });\n    };\n\n    this.goForward = e => {\n      let ubound = this.state.memfiles.length - 1;\n\n      if (this.state.memfileIndex === ubound) {\n        this.state.memfileIndex = 0;\n      } else {\n        this.state.memfileIndex++;\n      }\n\n      this.setState({\n        activefile: this.state.memfiles[this.state.memfileIndex]\n      });\n    };\n  }\n\n}\n\n;\nexport default NewMemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/newmemorymodal.js"],"names":["React","greycross","tick","tag","globe","calendar","key","author","x","left","right","trash","hero","heroOutline","cloudIMG","cloudupload","MemoryFileViewer","mem","DropSearch","WordExctractor","Container","Draggable","Dropzone","useDropzone","CheckBox","ImageLabel","NewMemoryModal","Component","state","memid","createdon","user","title","description","location","story","cardtype","taggedPeople","memoryClouds","searchWords","memfiles","cloudPeople","activefile","userClouds","memfileIndex","onHide","props","onHideModal","memory","componentDidUpdate","prevProps","prevState","userid","getUser","setState","Date","now","getHeroFile","map","memfile","index","ishero","populateMemoryFiles","populateSearchWords","words","populateCloudInfo","clouds","getCloudPeople","people","userIsAuthorisedToEdit","deleteFileFromMemory","console","log","makeHeroFile","handleAddTaggedPerson","Person","tp","find","dude","push","reverse","handleRemoveFromCloud","Cloud","cl","cloud","id","handleDeleteTaggedPerson","p","handleUploadMemory","me","createMemoryID","then","parseInt","person","addTaggedPerson","addTaggedCloud","setMemorySearchWords","error","alert","handleAddCloud","newCloudID","value","newcl","name","label","activeFileisHero","afile","render","show","memoryContent","renderMemoryContent","carouselControls","renderCarouselControls","imageZone","renderImageZone","storyZone","renderStoryZone","detailsZone","renderDetailsZone","handleSearchWordClick","itemKey","upState","ind","findIndex","item","included","renderKeyWords","e","applyDrag","wordItem","idx","keyword","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","renderTaggedPeople","firstname","lastname","peopleDropSearch","renderDetails","getShortDate","renderClouds","cloudDropSearch","editControls","af","tempFile","heroImg","fileurl","localurl","fileext","getExtension","file","thumburl","thumbext","onTitleBlur","newTitle","target","onDescriptionBlur","newDescription","onStoryBlur","newStory","handleStoryChange","event","addarray","addarray2","extract","language","remove_digits","return_changed_case","remove_duplicates","word","searchWordExists","strength","w","undefined","renderCornerControls","keywords","details","cornerCtrls","handleDropfiles","acceptedFiles","reader","FileReader","forEach","onload","canHandleDroppedFile","mfs","newfile","isHero","readAsDataURL","prepAndUploadFile","commonfileName","ext","fname","tname","filebuffer","compressImage","success","data","resizeImage","uploadFile","awsurl","addFileToMemory","originalURL","thumbURL","JSON","stringify","mfiles","thumbs","mfile","goBack","getRootProps","getInputProps","goForward","ubound","length"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport greycross from '../images/x-grey.png'\nimport tick from '../images/tick.png'\nimport tag from '../images/tag.png'\nimport globe from '../images/outline-globe.png'\nimport calendar from '../images/calendar.png'\nimport key from '../images/key.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport trash from '../images/trash.png'\nimport hero from '../images/hero-full.png'\nimport heroOutline from '../images/hero-outline-grey.png'\nimport cloudIMG from '../images/cloud.png'\nimport cloudupload from '../images/cloudupload.png'\n\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport * as mem from '../memriioserver'\nimport * as DropSearch from '../dropsearch/dropsearch'\n\nimport WordExctractor from 'keyword-extractor'\nimport { Container, Draggable} from 'react-smooth-dnd'\nimport Dropzone,{useDropzone} from 'react-dropzone'\n\nimport './memorymodal.css'\n\nimport {CheckBox,ImageLabel} from '../buttons/buttons'\n\nclass NewMemoryModal extends React.Component{\n\n    state ={\n       \n          memid:0,\n          createdon:'',\n          user:null,\n          title:'',\n          description:'',\n          location:'',\n          story:'',\n          cardtype:0,\n          taggedPeople:[],\n          memoryClouds:[],\n          searchWords:[],         \n          memfiles:[],\n          cloudPeople:[],\n     \n        activefile:null,\n        userClouds:[],\n        memfileIndex:0,\n    }\n\n//---------------------------------------------------------------------------------\n\nonHide = () =>{    \n  \n  this.state ={\n      memid:0,\n      createdon:'',\n      user:null,\n      title:'',\n      description:'',\n      location:'',\n      story:'',\n      cardtype:0,\n      taggedPeople:[],\n      memoryClouds:[],\n      searchWords:[],         \n      memfiles:[],\n      cloudPeople:[],\n\n    activefile:null,\n    userClouds:[],\n    memfileIndex:0,\n  }\n  this.props.onHideModal(this.props.memory)\n}\n//---------------------------------------------------------------------------------\n\ncomponentDidUpdate = (prevProps,prevState) =>{\n\n  if(!this.state.user || prevProps.userid !== this.state.user.userid)\n  {\n    mem.getUser(this.props.userid,(user => {\n\n      this.setState({user:user,userClouds:this.props.userClouds,createdon:Date.now()})\n      \n    }))\n  }\n}\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    \n    let hero = this.state.memfiles[0]\n\n    this.state.memfiles.map((memfile,index)=> {\n\n        if(memfile.ishero){         \n            this.state.memfileIndex = index            \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({activefile:this.getHeroFile()})\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n    this.setState({memoryClouds:clouds})\n    mem.getCloudPeople (clouds,((people)=>{\n      this.setState({cloudPeople:people})\n    }))   \n  }\n\n//------------------------------------------------------------------------\n\n  userIsAuthorisedToEdit = () =>{\n    return true\n  }\n\n  //------------------------------------------------------------------------\n\n  deleteFileFromMemory =() =>{\n    console.log('delte file from memroy');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n\n  makeHeroFile = () =>{\n    console.log('make hero file');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  handleAddTaggedPerson = (Person) =>{\n    \n    let tp = this.state.taggedPeople\n    if(!tp.find(dude => dude.userid === Person.userid)){\n      tp.push(Person)\n      tp.reverse()\n      this.setState({taggedPeople:tp})\n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  handleRemoveFromCloud = ( Cloud ) =>{\n    let cl = []\n    this.state.memoryClouds.map(cloud =>{if(cloud.id !== Cloud.id) cl.push(cloud)})\n    this.populateCloudInfo(cl)\n\n  }\n\n  //------------------------------------------------------------------------\n\n  handleDeleteTaggedPerson = (Person) =>{\n    let tp = []\n    this.state.taggedPeople.map( p =>{if(p.userid !== Person.userid)tp.push(p)})\n    this.setState({taggedPeople:tp})\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  handleUploadMemory = () =>{\n    let me = this.state\n\n    mem.createMemoryID(me.user.userid,me.title,me.description,me.story)\n    .then(memid =>{\n      memid = parseInt(memid)\n      this.state.memid = memid\n      me.taggedPeople.map(person => { mem.addTaggedPerson ( memid,person.userid ) })\n      me.memoryClouds.map(cloud  => { mem.addTaggedCloud  ( memid,cloud.id      ) })\n      mem.setMemorySearchWords      ( memid,me.searchWords )\n      // me.memfiles.map( memfile  =>  { this.prepAndUploadFile ( memfile.file ) })    \n       \n    },error =>{ alert ( error )})\n  }\n\n  //------------------------------------------------------------------------\n  \n  \n  handleAddCloud = (clouds) =>{\n    let cloud = clouds[0]\n    let cl = this.state.memoryClouds\n    \n    let newCloudID = parseInt(cloud.value)\n    if(!cl.find(newcl => newcl.id === newCloudID)){\n\n      cl.push({\n        id:newCloudID,\n        name:cloud.label\n      })\n      cl.reverse()\n      this.setState({memoryClouds:cl},this.populateCloudInfo(cl)) \n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  activeFileisHero =() =>{\n    var afile = this.state.activefile\n    \n    if(afile){\n      if(afile.ishero){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  render = () => {\n   \n  if(this.props.show){\n\n    let memoryContent     = this.renderMemoryContent()\n    let carouselControls  = this.renderCarouselControls()\n    return(\n      <div className= 'backdropStyle'>\n        <div className='modalStyle'>\n          {memoryContent}   \n          {carouselControls}\n        </div>\n      </div>\n    )    \n  }else{\n    return null\n  }    \n}\n\n//------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    \n  const imageZone   = this.renderImageZone()\n  const storyZone   = this.renderStoryZone()\n  const detailsZone = this.renderDetailsZone()\n  \n  \n  return (\n      <div className='modalrow'>\n        {imageZone}\n        {storyZone}\n        {detailsZone}\n      </div>\n  )\n  \n}\n  \n//------------------------------------------------------------------------\n\nhandleSearchWordClick = (itemKey,upState) =>{\n  \n  const ind = this.state.searchWords.findIndex(item =>{return item.id === itemKey})\n  this.state.searchWords[ind].included = upState\n  this.setState({searchWords:this.state.searchWords})\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n\n  return (\n    <Container  onDrop={e => this.setState({searchWords:this.applyDrag(this.state.searchWords,e)})}>\n    \n      {\n        this.state.searchWords.map((wordItem, idx) => {\n          return (\n            <Draggable className='wordListItem' key={'k'+idx}>\n              <CheckBox \n                itemKey = {wordItem.id}\n                onClick = {this.handleSearchWordClick}\n                upState = {wordItem.included} \n                downImg = {greycross} \n                upImg   = {tick} \n                label   = {wordItem.keyword}\n              />\n            </Draggable> \n          )\n        })\n      }\n    </Container>\n  )\n  \n}\n\n//------------------------------------------------------------------------\n\napplyDrag = (arr, dragResult) => {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n  if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n  if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n  return result;\n};\n\n//------------------------------------------------------------------------\n\nrenderTaggedPeople =() =>{\n\n  const people  = this.state.taggedPeople.map(\n    p => {\n        return (\n          <li \n            className='wordListItem'\n            key={'p' + p.userid}>\n              <ImageLabel \n                data          = { p   }\n                leftImg       = { tag } \n                badge         = { x   } \n                onBadgeClick  = { this.handleDeleteTaggedPerson  }\n                label         = { p.firstname + ' ' + p.lastname }/>                                                        \n          </li>\n        )\n      })\n      if(this.state.user){\n        people.push(      \n          <li \n            className='wordListItem'\n            key={'a' + this.state.user.userid}>\n            <ImageLabel \n              leftImg = { author}\n              label =   { this.state.user.firstname + ' ' + this.state.user.lastname}/>\n          </li>\n        ) \n      }\n      people.reverse()   \n      people.push( <li > { DropSearch.peopleDropSearch(this.state.cloudPeople,this.handleAddTaggedPerson) } </li>)\n      \n      return people\n \n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  \n  return (\n      <div>\n        <li \n          className='wordListItem'\n          key={'location'}><ImageLabel leftImg = {globe} label = {'IMPLEMENT'}/>\n        </li>\n        <li \n          className='wordListItem'\n          key={'sss'}><ImageLabel leftImg = {calendar} label = {mem.getShortDate(this.state.createdon) }/>\n        </li>\n      </div>\n   )\n}\n\n//------------------------------------------------------------------------\n\nrenderClouds =() => {\n\n  const clouds  = this.state.memoryClouds.map(\n    cloud => {\n        return (\n          <li \n            className='wordListItem'\n            key={'cloud' + cloud.id}><ImageLabel \n              data          = { cloud }\n              badge         = { x   } \n              onBadgeClick  = { this.handleRemoveFromCloud  }\n              leftImg = {cloudIMG} \n              label = {cloud.name}/>                            \n          </li>\n        )\n      })\n      \n      clouds.push( <li > { DropSearch.cloudDropSearch(this.state.userClouds,\n                                                      null,true,true ,\n                                                      this.handleAddCloud,\n                                                      this.state.user.userid) } \n                                                      </li>)\n      return clouds\n\n}\n\n//------------------------------------------------------------------------\n\nrenderImageZone =()=>{\n\n  let editControls=null\n  let af = this.state.activefile\n  let tempFile = null\n  \n  var heroImg = this.activeFileisHero() ? hero : heroOutline;\n\n  editControls = \n  <div className = 'imageEditConrols' >\n    <img  \n      className='closeBtn'\n      src = {trash}\n      onClick={this.deleteFileFromMemory} \n      />\n    <img  \n      className='closeBtn'\n      src = {heroImg}\n      onClick = {this.makeHeroFile}\n      />\n  </div>\n\n  if(af)\n  {\n    tempFile = \n    {\n      fileurl:af.localurl,\n      ishero:af.ishero,\n      fileext:mem.getExtension(af.file.name),\n      thumburl:af.localurl,\n      thumbext:mem.getExtension(af.file.name)\n    }\n  }\n\n    return (\n      <div className='imgcolumn'>\n        <MemoryFileViewer \n          memfile={tempFile}\n          thumbStyleClass={'memoryModalImage'}\n          fileStyleClass={'memoryModalImage'}\n        />\n        {editControls}\n      </div>\n    )\n}\n\n//------------------------------------------------------------------------\n\nonTitleBlur = (e) => {\n  const newTitle = e.target.value\n  if(newTitle !== this.state.title) this.state.title = newTitle\n}\n//------------------------------------------------------------------------\n\nonDescriptionBlur = (e) => {\n  const newDescription = e.target.value\n  if(newDescription !== this.state.description) this.state.description = newDescription\n\n}\n//------------------------------------------------------------------------\n\nonStoryBlur = (e) => {\n  const newStory = e.target.value\n  if(newStory !== this.state.story) this.state.story = newStory\n}\n\n//------------------------------------------------------------------------\n\nhandleStoryChange = (event) =>{\n  let addarray = this.state.searchWords\n  let addarray2 = []\n  let story = event.target.value\n  let words = WordExctractor.extract(story,\n                                      {\n                                          language:\"english\",\n                                          remove_digits: true,\n                                          return_changed_case:true,\n                                          remove_duplicates: true\n                                      })\n    \n  // add any new words that exist in the story\n  words.map(word =>{\n      if(!this.searchWordExists(word)){\n        addarray.push({included:true,keyword:word,strength:0})       \n      }      \n  })\n\n  // remove any search words that now longer exist in the story\n  addarray.map(w =>{    \n    if(words.find(word => w.keyword === word) !== undefined){      \n      addarray2.push({included:w.included,keyword:w.keyword,strength:w.strength})\n    }   \n  })\n\n  this.setState({searchWords:addarray2,story:story})  \n}\n\n//------------------------------------------------------------------------\n\nsearchWordExists = (word) => {\n  return this.state.searchWords.find(wordItem => word === wordItem.keyword)    \n}\n\n//------------------------------------------------------------------------\n\nrenderStoryZone = () =>{\n  const mem = this.state\n \n    return (\n      <div className = 'infoColumn'>\n        <input \n            onBlur = { this.onTitleBlur } className='input-reset titleEdit' \n            type=\"text\"  defaultValue = { mem.title } placeholder='Title' id=\"title\" />\n        <input \n            onBlur = {this.onDescriptionBlur} className='input-reset descriptionEdit' \n            type=\"text\"  defaultValue = { mem.description } placeholder='Description' id=\"description\" />\n        <textarea\n            onBlur   = { this.onStoryBlur } className='input-reset storyEdit' onChange = { this.handleStoryChange } \n            type=\"text\"  defaultValue = { mem.story } placeholder='Description' id=\"description\" /> \n      </div> \n    )\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderCornerControls =() =>{\n  \n  return (\n    <div className='footer'>                        \n      <img  \n        className='closeBtn'                   \n        src = {x}\n        onClick={this.onHide} />\n      <img  \n        className='closeBtn'                   \n        src = {cloudupload}\n        onClick={this.handleUploadMemory} />\n    </div>\n  )\n}\n//------------------------------------------------------------------------\n\n\n\nrenderDetailsZone = () => {\n\n  const keywords     = this.renderKeyWords()\n  const people       = this.renderTaggedPeople()\n  const details      = this.renderDetails()\n  const clouds       = this.renderClouds()\n  const cornerCtrls  = this.renderCornerControls()\n  \n\n  return (\n    <div className = 'detailsColumn'>\n      <div className = 'z40'> \n        <h4>Tags </h4>\n        <ul className='keyWordList scroll' >  { keywords } </ul>\n      </div>\n      <div className = 'z25'>\n        <h4>People</h4>\n        <ul className='peopleList scroll' >   { people   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Clouds</h4>\n        <ul className='cloudList scroll' >    { clouds   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Details</h4>\n        <ul className='detailsList ' >        { details  } </ul>\n      </div>\n      {cornerCtrls}              \n    </div>  \n  )\n}\n\n//------------------------------------------------------------------------\n\nhandleDropfiles = async (acceptedFiles) =>{\n  \n  const reader = new FileReader()\n  acceptedFiles.forEach((file) => {\n    \n    reader.onload = () => {\n      console.log('onload ' + file.name);\n      if(mem.canHandleDroppedFile(file.name)){\n        \n        console.log('can handle dropped file ' + file.name);\n        let mfs = this.state.memfiles\n        let newfile = {file:file,localurl:reader.result,isHero:false}\n        mfs.push(newfile)\n        if(!this.state.activefile) {\n          newfile.ishero = true\n          this.state.activefile = newfile\n        }\n        this.setState({memfiles:mfs})\n\n      }else{\n        alert('File type ' + mem.getExtension(file.name) + ' not yet implemented' )\n      }\n    }\n  reader.readAsDataURL(file)\n\n  })\n}\n\n//------------------------------------------------------------------------\n\nprepAndUploadFile = (file)=>{\n\n  let commonfileName = this.state.user.userid + '-' + Date.now()\n  let ext = mem.getExtension(file.name)\n  let fname = commonfileName + '-original'  + '.' + ext\n  let tname = commonfileName + '-thumb'     + '.' + ext\n  let filebuffer = null\n  \n  let memfile = {\n    id:0,\n    memid:this.state.memid,\n    fileurl:'',\n    ishero:false,\n    fileext:ext,\n    thumburl:'',\n    thumbext:ext,\n  }\n  \n  mem.compressImage(file,0.9)\n      .then(result =>{\n        if(result.success){\n          filebuffer = result.data\n          mem.resizeImage(filebuffer,1500)\n          .then(result =>{\n            if(result.success){ \n            mem.uploadFile(tname,result.data)\n            .then(result =>{\n              if(result.success){\n                memfile.thumburl = result.awsurl\n                mem.uploadFile(fname,filebuffer)\n                .then(result =>{\n                  if(result.success){\n                    memfile.fileurl=result.awsurl\n                    mem.addFileToMemory({\n                        originalURL:memfile.fileurl,\n                        thumbURL:memfile.thumburl\n                    },false,this.state.memid)\n                    .then(result => {\n                      if(result.success){\n                        console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n\n                      }\n                    })\n                  }\n                })\n              }\n            })\n            }\n          })\n        }\n        }) \n}\n\n//------------------------------------------------------------------------\n\nrenderCarouselControls = () => {\n\n  const mem = this.state\n  const mfiles = mem.memfiles\n\n  let thumbs = mfiles.map((mfile,index) =>{\n      return(<img key={'thumb'+index} className='thumb' src = {mfile.localurl} onClick={(index) =>{}}/>)})\n  \n  return (\n    <div className='controlbox'>\n      <img className='closeBtn' src = {left} onClick={this.goBack} /> \n      <Dropzone onDrop={acceptedFiles => this.handleDropfiles(acceptedFiles)}>\n        {\n          ({getRootProps, getInputProps}) => (              \n            <div className='thumbArrayEdit' {...getRootProps()}>\n              {thumbs}\n            </div>              \n          )\n        }\n      </Dropzone>\n      <img className='closeBtn' src = {right} onClick={this.goForward} /> \n    </div>\n  )  \n}\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  \n  let ubound = this.state.memfiles.length-1\n  if(this.state.memfileIndex === 0){\n    this.state.memfileIndex = ubound \n  }else{\n    this.state.memfileIndex--\n  }\n  this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})  \n}\n\ngoForward = (e) => {\n  \n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  \n}\n\n};  \n\nexport default NewMemoryModal;\n"]},"metadata":{},"sourceType":"module"}