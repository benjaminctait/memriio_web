{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport './memorymodal.css';\nimport { getAllMemoryFiles, getTaggedPeople, getMemoryClouds, getMemorySearchWords, getCloudPeople } from '../memriioserver';\n\nclass MemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      keywords: [],\n      // this is temporary   \n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null\n    };\n\n    this.onHide = () => {\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          console.log('modal didmount B : ' + this.props.memory.title);\n          getAllMemoryFiles(this.props.memory.memid, memoryFiles => {\n            this.populateMemoryFiles(memoryFiles);\n          });\n          getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map(memfile => {\n        if (memfile.ishero) {\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      words.map(worditem => {\n        this.state.keywords.push(worditem.keyword);\n      });\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.renderMemoryContent = () => {\n      if (this.state.activefile) {\n        return /*#__PURE__*/React.createElement(\"img\", {\n          alt: \"memory\",\n          src: this.state.activefile.thumburl,\n          className: \"imgStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 14\n          }\n        });\n      } else {\n        return null;\n      }\n    };\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    let memoryContent = this.renderMemoryContent();\n\n    if (this.props.show) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, memoryContent), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footerStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, \" Hide\")));\n    } else {\n      return null;\n    }\n  }\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","getAllMemoryFiles","getTaggedPeople","getMemoryClouds","getMemorySearchWords","getCloudPeople","MemoryModal","Component","state","memory","taggedPeople","memoryClouds","searchWords","keywords","memfiles","cloudPeople","userClouds","activefile","onHide","props","onHideModal","componentDidUpdate","prevProps","prevState","memid","console","log","title","memoryFiles","populateMemoryFiles","people","setState","clouds","populateCloudInfo","words","populateSearchWords","getHeroFile","hero","map","memfile","ishero","worditem","push","keyword","renderMemoryContent","thumburl","render","memoryContent","show"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './memorymodal.css'\n\nimport {getAllMemoryFiles, \n  getTaggedPeople,\n  getMemoryClouds,\n  getMemorySearchWords, \n  getCloudPeople,\n } from '../memriioserver'\n\n\n\nclass MemoryModal extends React.Component{\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[], \n        keywords:[],    // this is temporary   \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null\n    }\n   \n\n    onHide = () =>{\n      this.props.onHideModal(this.props.memory)\n    }\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n        console.log('modal didmount B : ' + this.props.memory.title);      \n        getAllMemoryFiles    (this.props.memory.memid,((memoryFiles)=>{this.populateMemoryFiles(memoryFiles)}))\n        getTaggedPeople      (this.props.memory.memid,((people)=>{this.setState({taggedPeople:people})}))\n        getMemoryClouds      (this.props.memory.memid,((clouds)=>{this.populateCloudInfo(clouds)}))\n        getMemorySearchWords (this.props.memory.memid,((words =>{this.populateSearchWords(words)})))\n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    let hero = this.state.memfiles[0]    \n    this.state.memfiles.map(memfile => {\n        if(memfile.ishero){           \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    words.map(worditem =>{\n        this.state.keywords.push(worditem.keyword)\n    })\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n\n    this.setState({memoryClouds:clouds})\n    getCloudPeople (clouds,((people)=>{this.setState({cloudPeople:people})}))\n\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  renderMemoryContent = () => {\n    if(this.state.activefile){\n      return <img \n              alt='memory' \n              src={this.state.activefile.thumburl} \n              className = 'imgStyle'/>\n    }else {\n      return null\n    }\n    \n  }\n\n//------------------------------------------------------------------------\n\n    render(){\n      let memoryContent = this.renderMemoryContent()\n      if(this.props.show){\n        return(\n          <div className= 'backdropStyle'>\n            <div className='modalStyle'>\n              {memoryContent}\n              \n            </div>\n            <div className='footerStyle'>\n              <button \n                onClick={this.onHide}              \n              > Hide\n              </button>\n            </div>\n          </div>\n        )\n      }else{\n        return null\n      }        \n  }\n\n};  \n\n\nexport default MemoryModal;\n\n\n"]},"metadata":{},"sourceType":"module"}