{"ast":null,"code":"import React from 'react';\nimport Compressor from 'compressorjs';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { format } from \"date-fns\";\n\nfunction memriiolog(log, data) {\n  if (log) console.log(data);\n} //--Returns and array of of images and related meta data from the server-----------------------------------------------\n\n\nexport function getAllMemoryFiles(memoryid, callback) {\n  memriiolog(false, 'Memriio.getAllMemoryFiles : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'server response : ' + res.success);\n      memriiolog(false, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getAllClouds() {\n  memriiolog(true, 'Memriio.getAllClouds');\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_clouds', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ignore: null\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(true, 'getAllClouds :server response : ' + res.success);\n        resolve(res.data);\n      } else {\n        memriiolog(true, 'getAllClouds :server response : ' + res.success + ' with ' + res.error);\n        reject(null);\n      }\n    });\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople(memoryid, callback) {\n  memriiolog(false, 'Memriio.getTaggedPeople : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'server response : ' + res.success);\n      memriiolog(false, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords(memoryid, callback) {\n  memriiolog(false, 'Memriio.getMemorySearchWords : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getMemorySearchWords server response : ' + res.success);\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords(memoryid, searchwords) {\n  memriiolog(false, 'Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length);\n  fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      searchwords: searchwords\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'setMemorySearchWords server response : ' + res.success);\n    } else {\n      memriiolog(false, 'setMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds(memoryid, callback) {\n  memriiolog(false, 'Memriio.getMemoryclouds : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getMemoryclouds server response : ' + res.success);\n      memriiolog(false, 'getMemoryclouds response data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getMemoryclouds server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------\n\nexport function getAllUsers() {\n  memriiolog(false, 'Memriio.getAllUsers');\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_all_users', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nothing: 'nothing'\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'getAllUsers server response : ' + res.success);\n        resolve(res.data);\n      } else {\n        memriiolog(false, 'getAllUsers server response : ' + res.success + ' with ' + res.error);\n        reject(null);\n      }\n    });\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople(clouds, callback) {\n  memriiolog(false, 'Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        clouds: clouds\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'getCloudPeople server response : ' + res.success);\n        memriiolog(false, 'getCloudPeople response data : ' + JSON.stringify(res.data));\n        if (callback) callback(res.data);\n        resolve(res.data);\n      } else {\n        memriiolog(false, 'getCloudPeople server response : ' + res.success + ' with ' + res.error);\n        reject(null);\n      }\n    });\n  });\n} //------------------------------------------------------------\n\nexport function updateHeroImage(memoryid, heroImageid) {\n  memriiolog(false, 'Memriio.getAllImages : memoryid ' + memoryid);\n} //------------------------------------------------------------\n\nexport function updateTitle(memoryid, newTitle) {\n  memriiolog(false, 'Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newTitle: newTitle\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateTitle : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateTitle : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateDescription(memoryid, newDescription) {\n  memriiolog(false, 'Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newDescription: newDescription\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateDescription : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateDescription : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function deleteMemory(memoryid) {\n  memriiolog(false, 'Memriio.deleteMemory : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteMemory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteMemory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateStory(memoryid, newStory) {\n  let len = 0;\n\n  if (newStory) {\n    len = newStory.length;\n  }\n\n  memriiolog(false, 'Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars');\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newStory: newStory\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateStory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateStory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateTaggedPeople(memoryid, taggedPeople) {} //------------------------------------------------------------\n\nexport function updateClouds(memoryid, clouds) {} //------------------------------------------------------------\n\nexport function updateMemword(searchword) {\n  memriiolog(false, 'Memriio.updateMemword :memword ' + JSON.stringify(searchword));\n  fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: searchword.id,\n      memid: searchword.memid,\n      keyword: searchword.keyword,\n      strength: searchword.strength,\n      included: searchword.included\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateMemword :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateMemword :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateCardType(memoryid, cardtype) {\n  memriiolog(false, 'Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      cardtype: cardtype\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateCardType :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateCardType :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateLocation(memoryid, newLocation) {\n  memriiolog(false, 'Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newLocation: newLocation\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateLocation :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateLocation :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedPerson(memoryid, userid) {\n  memriiolog(false, 'Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'addTaggedPerson :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'addTaggedPerson :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedCloud(memoryid, cloudid) {\n  memriiolog(false, 'Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        groupid: cloudid\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'addTaggedCloud :server response : ' + res.success);\n        resolve({\n          success: true,\n          data: res.data\n        });\n      } else {\n        memriiolog(false, 'addTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n        reject({\n          success: false,\n          data: null,\n          error: res.error\n        });\n      }\n    });\n  });\n} //------------------------------------------------------------\n\nexport function deleteTaggedPerson(memoryid, userid) {\n  memriiolog(false, 'Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteTaggedPerson :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage(memoryid, fileurl) {\n  memriiolog(false, 'Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteMemoryImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteMemoryImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage(memoryid, fileurl) {\n  memriiolog(false, 'Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'setHeroImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'setHeroImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud(memoryid, cloudid) {\n  memriiolog(false, 'Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid);\n  fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      cloudid: cloudid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteTaggedCloud :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getUser(userid, callback) {\n  memriiolog(false, 'Memriio.getUser : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname);\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getUser :server  : ' + res.status);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getUserClouds(userid, callback) {\n  memriiolog(false, 'Memriio.getUserClouds : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userID: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getUserClouds :server response : ' + res.success);\n      callback(res.data);\n      return true;\n    } else {\n      memriiolog(false, 'getUserClouds :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getUserByEmail(email) {\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_user_by_email', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        resolve({\n          success: true,\n          data: response.data\n        });\n      } else {\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function setNewUser(user) {\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/register', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: user.email,\n        password: user.password,\n        firstname: user.firstname,\n        lastname: user.lastname\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        resolve({\n          success: true,\n          data: response.data\n        });\n      } else {\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport async function getDownloadSignedurl(fileName) {\n  console.log('getsignedurl ' + fileName);\n  let ftype = getFileMime(fileName);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/getObject_signedurl', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName: fileName,\n        fileType: ftype\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        resolve({\n          success: true,\n          data: response.data\n        });\n      } else {\n        console.log('get signedurl ' + stry(response));\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport async function getUploadSignedurl(fileName) {\n  console.log('getUploadSignedurl ' + fileName);\n  let ftype = getFileMime(fileName);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/putobject_signedurl', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName: fileName,\n        fileType: ftype\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        console.log(stry(response));\n        resolve({\n          success: true,\n          data: {\n            signedRequest: response.data.signedRequest,\n            awsurl: response.data.url\n          }\n        });\n      } else {\n        console.log('get signedurl ' + stry(response));\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function uploadFile(fileName, buffer) {\n  let signedRequest = '';\n  let AWSurl = '';\n  let fileType = getFileMime(fileName);\n  return new Promise((resolve, reject) => {\n    getUploadSignedurl(fileName).then(result => {\n      if (result.success) {\n        signedRequest = result.data.signedRequest;\n        AWSurl = result.data.awsurl;\n        uploadToS3(buffer, signedRequest, fileType).then(result => {\n          if (result.success) {\n            resolve({\n              success: true,\n              awsurl: AWSurl\n            });\n          } else {\n            reject({\n              success: false,\n              data: null,\n              err: result.err\n            });\n          }\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------------------------\n\nexport function uploadFilePair(originalFileName, originalFileBuffer, thumbFileName, thumbFileBuffer) {\n  let originalSignedRequest = '';\n  let thumbSignedRequest = '';\n  let originalAWSurl = '';\n  let thumbAWSurl = '';\n  let origFileType = getFileMime(originalFileName);\n  let thumbFileType = getFileMime(thumbFileName);\n  return new Promise((resolve, reject) => {\n    getUploadSignedurl(originalFileName).then(result => {\n      if (result.success) {\n        originalSignedRequest = result.data.signedRequest;\n        originalAWSurl = result.data.awsurl;\n        getUploadSignedurl(thumbFileName).then(result => {\n          if (result.success) {\n            thumbSignedRequest = result.data.signedRequest;\n            thumbAWSurl = result.data.awsurl;\n            uploadToS3(originalFileBuffer, originalSignedRequest, origFileType).then(result => {\n              if (result.success) {\n                uploadToS3(thumbFileBuffer, thumbSignedRequest, thumbFileType).then(result => {\n                  if (result.success) {\n                    resolve({\n                      success: true,\n                      originalURL: originalAWSurl,\n                      thumbURL: thumbAWSurl\n                    });\n                  }\n                });\n              } else {\n                reject({\n                  success: false,\n                  data: null,\n                  err: result.err\n                });\n              }\n            });\n          } else {\n            reject({\n              success: false,\n              data: null,\n              err: result.err\n            });\n          }\n        });\n      } else {\n        reject({\n          success: false,\n          data: null,\n          err: result.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nfunction uploadToS3(file, signedRequest, fileType) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('PUT', signedRequest);\n    xhr.setRequestHeader('Content-Type', fileType);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          resolve({\n            success: true,\n            data: xhr.responseURL\n          });\n        } else {\n          reject({\n            success: false,\n            data: null,\n            error: 'upload to aws s3 account failed'\n          });\n        }\n      }\n    };\n\n    xhr.send(file);\n  });\n} //-------------------------------------------------------------------------------\n\n\nexport function getFileMime(fileNameAndExtension) {\n  let extension = fileNameAndExtension.split('.')[1];\n  let mime = '';\n\n  switch (extension) {\n    case 'mov':\n      mime = 'video/quicktime';\n      break;\n\n    case 'jpg':\n      mime = 'image/jpeg';\n      break;\n\n    case 'jpeg':\n      mime = 'image/jpeg';\n      break;\n\n    case 'mp4':\n      mime = 'video/mp4';\n      break;\n\n    case 'png':\n      mime = 'image/png';\n      break;\n  }\n\n  return mime;\n} //-------------------------------------------------------------------------------\n\nexport function addFileToMemory(fileUrlObj, ishero, memoryid) {\n  let sourceURL = fileUrlObj.originalURL;\n  let thumbURL = fileUrlObj.thumbURL;\n  let sourceext = getExtension(sourceURL);\n  let thumbext = getExtension(thumbURL);\n  console.log('addFileToMemory : sourceURL ' + getFilename(sourceURL));\n  console.log('addFileToMemory : thumbURL ' + getFilename(thumbURL));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/associateFile', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        fileurl: sourceURL,\n        fileext: sourceext,\n        thumburl: thumbURL,\n        thumbext: thumbext,\n        ishero: ishero\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        console.log('associate file : memid :' + memoryid + ' file : ' + sourceURL + ' hero shot = ' + ishero + ' ' + response.data.id);\n        resolve({\n          success: true,\n          data: response.data\n        });\n      } else {\n        reject({\n          success: false,\n          data: null\n        });\n      }\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function resizeImage(fileBuffer, targetWidth) {\n  return new Promise((resolve, reject) => {\n    new Compressor(fileBuffer, {\n      quality: 0.6,\n      convertSize: 0.3 * 1000000,\n      maxWidth: targetWidth,\n\n      success(result) {\n        console.log('resize success ' + result.size / 1000 + 'kb');\n        resolve({\n          success: true,\n          data: result\n        });\n      },\n\n      error(err) {\n        reject({\n          success: false,\n          data: null,\n          err: err\n        });\n      }\n\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function compressImage(fileBuffer, quality) {\n  return new Promise((resolve, reject) => {\n    new Compressor(fileBuffer, {\n      convertSize: 0.5 * 1000000,\n      quality: quality,\n\n      success(result) {\n        console.log('compress success ' + result.size / 1000 + 'kb');\n        resolve({\n          success: true,\n          data: result\n        });\n      },\n\n      error(err) {\n        console.log('compress fail ' + err);\n        reject({\n          success: false,\n          data: null,\n          err: err\n        });\n      }\n\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function canHandleDroppedFile(filename) {\n  let ext = getExtension(filename);\n  console.log(ext);\n  let filetypes = ['jpeg', 'JPEG', 'JPG', 'jpg', 'PNG', 'png'];\n  let found = filetypes.indexOf(ext);\n  return !(found === -1);\n}\nexport function getExtension(filepath) {\n  let fileParts = filepath.split('.');\n  let filetype = fileParts[fileParts.length - 1];\n  return filetype;\n}\nexport function getFilename(filepath) {\n  let parts = filepath.split('/');\n  let fname = parts[parts.length - 1];\n  return fname;\n}\nexport function stry(str) {\n  str = JSON.stringify(str);\n  if (str.charAt(0) === '\"') str = str.substr(1, str.length - 1);\n  if (str.charAt(str.length - 1) === '\"') str = str.substr(0, str.length - 1);\n  return str;\n}\nexport function getShortDate(longdate) {\n  var fdate = new Date(longdate);\n  return format(fdate, 'dd.MMM.yyyy');\n}","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memriioserver.js"],"names":["React","Compressor","unstable_batchedUpdates","format","memriiolog","log","data","console","getAllMemoryFiles","memoryid","callback","fetch","method","headers","body","JSON","stringify","then","response","json","res","success","error","getAllClouds","Promise","resolve","reject","ignore","getTaggedPeople","getMemorySearchWords","memid","setMemorySearchWords","searchwords","length","getMemoryClouds","getAllUsers","nothing","getCloudPeople","clouds","updateHeroImage","heroImageid","updateTitle","newTitle","updateDescription","newDescription","deleteMemory","updateStory","newStory","len","updateTaggedPeople","taggedPeople","updateClouds","updateMemword","searchword","id","keyword","strength","included","updateCardType","cardtype","updateLocation","newLocation","addTaggedPerson","userid","addTaggedCloud","cloudid","groupid","deleteTaggedPerson","deleteMemoryImage","fileurl","setHeroImage","deleteTaggedCloud","getUser","firstname","lastname","status","getUserClouds","userID","getUserByEmail","email","err","setNewUser","user","password","getDownloadSignedurl","fileName","ftype","getFileMime","fileType","stry","getUploadSignedurl","signedRequest","awsurl","url","uploadFile","buffer","AWSurl","result","uploadToS3","uploadFilePair","originalFileName","originalFileBuffer","thumbFileName","thumbFileBuffer","originalSignedRequest","thumbSignedRequest","originalAWSurl","thumbAWSurl","origFileType","thumbFileType","originalURL","thumbURL","file","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","responseURL","send","fileNameAndExtension","extension","split","mime","addFileToMemory","fileUrlObj","ishero","sourceURL","sourceext","getExtension","thumbext","getFilename","fileext","thumburl","resizeImage","fileBuffer","targetWidth","quality","convertSize","maxWidth","size","compressImage","canHandleDroppedFile","filename","ext","filetypes","found","indexOf","filepath","fileParts","filetype","parts","fname","str","charAt","substr","getShortDate","longdate","fdate","Date"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Compressor from 'compressorjs'\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { format } from \"date-fns\";\n\nfunction memriiolog(log,data) {\n    if(log) console.log(data)       \n}\n\n\n\n//--Returns and array of of images and related meta data from the server-----------------------------------------------\n\nexport function getAllMemoryFiles  (memoryid,callback) {\n   \n    memriiolog(false,'Memriio.getAllMemoryFiles : memoryid ' + memoryid )\n\n    \n    fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('server response : ' + res.success))\n                        memriiolog(false,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//------------------------------------------------------------\n\nexport function getAllClouds (){\n    memriiolog(true,('Memriio.getAllClouds'))\n  \n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/get_clouds', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                body:JSON.stringify({ignore:null}) })\n                    .then(response => response.json())\n                    .then(res => {\n                        if ( res.success ){\n                            memriiolog(true,('getAllClouds :server response : ' + res.success))\n                            resolve(res.data)\n                        }else{\n                            memriiolog(true,('getAllClouds :server response : ' + res.success + ' with ' + res.error)) \n                            reject(null)\n                        }\n                    })\n    })\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople  (memoryid,callback) {\n    memriiolog(false,('Memriio.getTaggedPeople : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('server response : ' + res.success))\n                        memriiolog(false,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords  (memoryid,callback) {\n    memriiolog(false,('Memriio.getMemorySearchWords : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getMemorySearchWords server response : ' + res.success))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('getMemorySearchWords server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords  (memoryid,searchwords) {\n    memriiolog(false,('Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length))\n    \n    fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,searchwords:searchwords})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('setMemorySearchWords server response : ' + res.success))\n                    \n                    }else{\n                        memriiolog(false,('setMemorySearchWords server response : ' + res.success + ' with ' + res.error))\n                    }\n                })\n\n}\n\n\n//-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds  (memoryid,callback) {\n    memriiolog(false,('Memriio.getMemoryclouds : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getMemoryclouds server response : ' + res.success))\n                        memriiolog(false,('getMemoryclouds response data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('getMemoryclouds server response : ' + res.success + ' with ' + res.error))  \n                    }\n                })\n\n}\n//----------------------------------------------------------------------------------------------------------------\n\nexport function getAllUsers  () {\n    memriiolog(false,('Memriio.getAllUsers'  ))\n    \n    return new Promise((resolve,reject) =>{\n\n        fetch('https://memriio-api-0.herokuapp.com/get_all_users', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({nothing:'nothing'})})\n\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getAllUsers server response : ' + res.success))                        \n                        resolve(res.data)\n\n                    }else{\n                        memriiolog(false,('getAllUsers server response : ' + res.success + ' with ' + res.error))\n                        reject(null)\n                    }\n                })\n\n    })\n    \n\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople  (clouds,callback) {\n    memriiolog(false,('Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds) ))\n    \n    return new Promise((resolve,reject) =>{\n\n        fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({clouds:clouds})})\n\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getCloudPeople server response : ' + res.success))\n                        memriiolog(false,('getCloudPeople response data : ' + JSON.stringify(res.data)))\n                        if(callback) callback(res.data)\n                        resolve(res.data)\n\n                    }else{\n                        memriiolog(false,('getCloudPeople server response : ' + res.success + ' with ' + res.error))\n                        reject(null)\n                    }\n                })\n\n    })\n    \n\n}\n\n\n//------------------------------------------------------------\n\nexport function updateHeroImage (memoryid,heroImageid ){\n    memriiolog(false,('Memriio.getAllImages : memoryid ' + memoryid ))\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTitle (memoryid,newTitle){\n    memriiolog(false,('Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newTitle:newTitle})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateTitle : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateTitle : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function updateDescription (memoryid,newDescription){\n    memriiolog(false,('Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newDescription:newDescription})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateDescription : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateDescription : server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function deleteMemory (memoryid){\n    \n    memriiolog(false,('Memriio.deleteMemory : memoryid ' + memoryid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteMemory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteMemory : server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n\n}\n\n//------------------------------------------------------------\n\nexport function updateStory (memoryid,newStory){\n    let len = 0\n    if(newStory){len = newStory.length}\n    memriiolog(false,('Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars'))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newStory:newStory})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateStory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateStory : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTaggedPeople (memoryid,taggedPeople){\n   \n    \n}\n\n//------------------------------------------------------------\n\nexport function updateClouds (memoryid,clouds){\n    \n\n}\n\n//------------------------------------------------------------\n\nexport function updateMemword(searchword){\n\n    memriiolog(false,('Memriio.updateMemword :memword ' + JSON.stringify(searchword)))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({id:searchword.id,\n                                     memid:searchword.memid,\n                                     keyword:searchword.keyword,\n                                     strength:searchword.strength,\n                                     included:searchword.included})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateMemword :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateMemword :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })  \n   \n}\n\n//------------------------------------------------------------\n\nexport function updateCardType (memoryid,cardtype){\n\n    memriiolog(false,('Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,cardtype:cardtype})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateCardType :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateCardType :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function updateLocation (memoryid,newLocation){\n    memriiolog(false,('Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newLocation:newLocation})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateLocation :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateLocation :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedPerson (memoryid,userid){\n    memriiolog(false,('Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('addTaggedPerson :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('addTaggedPerson :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedCloud (memoryid,cloudid){\n    memriiolog(false,('Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid))\n  \n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({memid:memoryid,groupid:cloudid})})\n                    .then(response => response.json())\n                    .then(res => {\n                        if ( res.success ){\n                            memriiolog(false,('addTaggedCloud :server response : ' + res.success))\n                            resolve({\n                                success:true,\n                                data:res.data\n                            })   \n                        }else{\n                            memriiolog(false,('addTaggedCloud :server response : ' + res.success + ' with ' + res.error)) \n                            reject({\n                                success:false,\n                                data:null,\n                                error:res.error\n                            })\n                        }\n                    })\n    })\n}\n\n\n//------------------------------------------------------------\n\nexport function deleteTaggedPerson (memoryid,userid){\n    memriiolog(false,('Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteTaggedPerson :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage (memoryid,fileurl){\n    memriiolog(false,('Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteMemoryImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteMemoryImage :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage (memoryid,fileurl){\n    memriiolog(false,('Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('setHeroImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('setHeroImage :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud (memoryid,cloudid){\n    memriiolog(false,('Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,cloudid:cloudid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteTaggedCloud :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function getUser (userid,callback){\n    memriiolog(false,('Memriio.getUser : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success){\n                        memriiolog(false,('getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname))\n                        callback(res.data)                        \n                    }else{\n                        memriiolog(false,('getUser :server  : ' + res.status ))                         \n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function getUserClouds (userid,callback){\n    memriiolog(false,('Memriio.getUserClouds : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userID:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getUserClouds :server response : ' + res.success))\n                        callback(res.data)\n                        return true\n                    }else{\n                        memriiolog(false,('getUserClouds :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getUserByEmail ( email ){\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/get_user_by_email', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({email:email})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            resolve({\n                                success:true,\n                                data:response.data\n                            })                       \n                        }else{\n                           \n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                            })\n                        }\n                    })\n\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function setNewUser ( user ){\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/register', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                    email:user.email,\n                    password: user.password,\n                    firstname: user.firstname,\n                    lastname: user.lastname\n                    })\n                })\n                .then(response => response.json())\n                .then(response => {\n                        if ( response.success){\n                            resolve({\n                                success:true,\n                                data:response.data\n                            })                       \n                        }else{\n                           \n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                            })\n                        }\n                    })\n\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport async function getDownloadSignedurl (fileName) {\n    \n    console.log('getsignedurl ' + fileName);\n    let ftype = getFileMime(fileName)\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/getObject_signedurl', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({fileName: fileName,fileType : ftype})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            resolve({\n                                success:true,\n                                data:response.data\n                            })                       \n                        }else{\n                            console.log('get signedurl ' + stry(response))\n                            \n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                                \n                                \n                            })\n                        }\n                    })\n            })\n \n}\n\n//-------------------------------------------------------------------------------\n\nexport async function getUploadSignedurl (fileName) {\n    \n    console.log('getUploadSignedurl ' + fileName);\n    let ftype = getFileMime(fileName)\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/putobject_signedurl', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({fileName: fileName,fileType : ftype})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            console.log(stry(response)); \n                            \n                            resolve({\n                                success:true,\n                                data:{\n                                    signedRequest: response.data.signedRequest,\n                                    awsurl: response.data.url\n                                }\n                            })                       \n                        }else{\n                            console.log('get signedurl ' + stry(response))\n                            \n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                                \n                                \n                            })\n                        }\n                    })\n            })\n \n}\n//-------------------------------------------------------------------------------\nexport function uploadFile(fileName,buffer ){\n    let signedRequest = ''\n    let AWSurl = ''\n    let fileType = getFileMime(fileName)\n\n    return new Promise((resolve,reject)=>{\n        getUploadSignedurl(fileName)\n        .then(result =>{\n            if(result.success){\n                signedRequest = result.data.signedRequest\n                AWSurl = result.data.awsurl\n                uploadToS3(buffer,signedRequest,fileType)\n                .then(result => { \n                    if(result.success){\n                        resolve({\n                            success : true,\n                            awsurl: AWSurl,\n                        })\n                    }else{\n                        reject({\n                            success:false,\n                            data: null,\n                            err:result.err\n                        })    \n                    }\n                })        \n            }\n        })\n           \n    })\n}\n\n//-------------------------------------------------------------------------------------------------\n\nexport function uploadFilePair(originalFileName,originalFileBuffer,thumbFileName,thumbFileBuffer ){\n    let originalSignedRequest = ''\n    let thumbSignedRequest = ''\n    let originalAWSurl = ''\n    let thumbAWSurl = ''\n    let origFileType = getFileMime(originalFileName)\n    let thumbFileType = getFileMime(thumbFileName)\n\n    return new Promise((resolve,reject)=>{\n        getUploadSignedurl(originalFileName)\n        .then(result =>{\n            if(result.success){\n\n                originalSignedRequest = result.data.signedRequest\n                originalAWSurl = result.data.awsurl\n                \n                getUploadSignedurl(thumbFileName)\n                .then(result => {\n                    if(result.success){\n                        thumbSignedRequest = result.data.signedRequest\n                        thumbAWSurl = result.data.awsurl\n                        uploadToS3(originalFileBuffer,originalSignedRequest,origFileType)\n                        .then(result => {\n                            if(result.success){\n                            uploadToS3(thumbFileBuffer,thumbSignedRequest,thumbFileType)\n                            .then(result =>{\n                                if(result.success){\n                                    resolve({\n                                        success : true,\n                                        originalURL: originalAWSurl,\n                                        thumbURL : thumbAWSurl\n                                    })\n                                }   \n                             })\n                            }else{\n                                reject({\n                                    success:false,\n                                    data: null,\n                                    err:result.err\n                                })    \n                            }\n                         })\n                        \n                    }else{\n                        reject({\n                            success:false,\n                            data: null,\n                            err:result.err\n                        })\n                    }\n                })               \n            }else{\n                reject( {\n                    success:false,\n                    data: null,\n                    err:result.err\n                })\n            }\n           \n        })\n    })\n\n}\n\n//-------------------------------------------------------------------------------\n\nfunction uploadToS3  (file, signedRequest,fileType)  {\n    return new Promise((resolve,reject) => {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('PUT', signedRequest);\n        xhr.setRequestHeader('Content-Type', fileType) \n        xhr.onreadystatechange = () => {\n        if(xhr.readyState === 4){\n            if(xhr.status === 200){\n                resolve({\n                    success:true,\n                    data: xhr.responseURL\n                })\n            }\n            else{\n                reject({\n                    success:false,\n                    data:null,\n                    error:'upload to aws s3 account failed'\n                })\n            }\n        }\n        };\n        xhr.send(file);\n  })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getFileMime  (fileNameAndExtension)  {\n    let extension = fileNameAndExtension.split('.')[1]\n    \n    let mime =''\n    switch (extension) {\n        case 'mov': mime = 'video/quicktime' \n        break;\n        case 'jpg': mime = 'image/jpeg' \n        break;\n        case 'jpeg': mime = 'image/jpeg' \n        break;\n        case 'mp4': mime = 'video/mp4' \n        break;\n        case 'png': mime = 'image/png' \n        break;\n    }\n    return mime\n}\n\n//-------------------------------------------------------------------------------\n\n\nexport function addFileToMemory  (fileUrlObj,ishero,memoryid)  {\n    \n    \n    let sourceURL  = fileUrlObj.originalURL\n    let thumbURL   = fileUrlObj.thumbURL\n    \n    let sourceext   = getExtension( sourceURL )\n    let thumbext    = getExtension( thumbURL  )\n    \n    console.log('addFileToMemory : sourceURL ' + getFilename(sourceURL))\n    console.log('addFileToMemory : thumbURL ' + getFilename(thumbURL))\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/associateFile', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({\n                        memid: memoryid,\n                        fileurl: sourceURL,\n                        fileext: sourceext,\n                        thumburl: thumbURL,\n                        thumbext: thumbext,\n                        ishero: ishero\n                        })\n                    })\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            console.log('associate file : memid :'  + memoryid + ' file : ' +  sourceURL + ' hero shot = ' + ishero + ' ' + response.data.id);\n                            resolve({\n                                success:true,\n                                data:response.data\n                            })\n                        }else{\n                            reject({\n                                success:false,\n                                data:null\n                            })\n                        }\n                    })\n    })\n}\n// ----------------------------------------------------------------------------\n\nexport function resizeImage( fileBuffer,targetWidth ){\n\n    return new Promise((resolve,reject) => {\n        new Compressor(fileBuffer, \n            {\n                quality: 0.6,\n                convertSize: (0.3 * 1000000),\n                maxWidth:targetWidth,\n                success(result) {\n                    console.log('resize success ' + result.size/1000 + 'kb');\n                    resolve({success:true,data:result})},\n                error(err){reject({success:false,data:null,err:err})}\n            })\n     })\n}\n\n// ----------------------------------------------------------------------------\n\nexport function compressImage( fileBuffer,quality ){\n\n    return new Promise((resolve,reject) => {\n        new Compressor(fileBuffer, \n            {\n                convertSize: (0.5 * 1000000),\n                quality: quality,\n                success(result) {\n                    console.log('compress success ' + result.size/1000 + 'kb');\n                    \n                    resolve({success:true,data:result})\n                },\n                error(err){\n                    console.log('compress fail ' + err);\n                    \n                    reject({success:false,data:null,err:err})}\n            })\n     })\n}\n\n// ----------------------------------------------------------------------------\n\nexport function canHandleDroppedFile(filename){\n    let ext = getExtension(filename)\n    console.log(ext);\n    let filetypes = ['jpeg','JPEG','JPG','jpg','PNG','png']\n    let found = filetypes.indexOf(ext)\n    return !(found === -1) \n}\n\n\nexport function getExtension (filepath) {\n    let fileParts = filepath.split('.');\n    let filetype = fileParts[fileParts.length-1];\n    return filetype\n}\n\nexport function getFilename (filepath) {\n    let parts = filepath.split('/')\n    let fname = parts[parts.length-1]\n    return fname\n}\n\nexport function stry (str)  {\n    str = JSON.stringify(str)\n    if (str.charAt(0) === '\"') str = str.substr(1,str.length-1)    \n    if (str.charAt(str.length -1) === '\"') str = str.substr(0,str.length-1)\n    return str\n}\n\nexport function getShortDate(longdate) {\n    var fdate = new Date(longdate)\n    \n    return format(fdate,'dd.MMM.yyyy')\n}"]},"metadata":{},"sourceType":"module"}