{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport tick from '../images/checkmark.png';\nimport './memorymodal.css';\nimport { getAllMemoryFiles, getTaggedPeople, getMemoryClouds, getMemorySearchWords, getCloudPeople } from '../memriioserver';\nimport { CheckBox, SubTag } from '../buttons/buttons';\n\nclass MemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      keywords: [],\n      // this is temporary   \n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null\n    };\n\n    this.onHide = () => {\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map(memfile => {\n        if (memfile.ishero) {\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.state.keywords = [];\n      words.map(worditem => {\n        this.state.keywords.push(worditem.keyword);\n      });\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.renderMemoryContent = () => {\n      const mem = this.props.memory;\n      const keywords = this.state.keywords.map((word, idx) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-style-image: none\",\n          key: 'k' + idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(CheckBox, {\n          checkedImg: tick,\n          label: word,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 59\n          }\n        }));\n      });\n      const people = this.state.taggedPeople.map(person => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: person.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 57\n          }\n        }, person.firstname + ' ' + person.lastname);\n      });\n\n      if (this.state.activefile) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalrow\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imgcolumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          alt: \"memory\",\n          src: this.state.activefile.thumburl,\n          className: \"imgStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }\n        }, mem.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy i measure mt2 mid-gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }\n        }, mem.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy measure mt2 black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }\n        }, \" \", mem.story, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"detailsColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }\n        }, \"Key words \"), /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordlist\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }\n        }, \" \", keywords, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }\n        }, \"Key People\"), /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordlist\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }\n        }, \" \", people, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footerStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"float-right\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(SubTag, {\n          className: \"closeBtn\",\n          onClick: this.onHide,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 19\n          }\n        })))));\n      } else {\n        return null;\n      }\n    };\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      let memoryContent = this.renderMemoryContent();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      }, memoryContent));\n    } else {\n      return null;\n    }\n  }\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","tick","getAllMemoryFiles","getTaggedPeople","getMemoryClouds","getMemorySearchWords","getCloudPeople","CheckBox","SubTag","MemoryModal","Component","state","memory","taggedPeople","memoryClouds","searchWords","keywords","memfiles","cloudPeople","userClouds","activefile","onHide","props","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","people","setState","clouds","populateCloudInfo","words","populateSearchWords","getHeroFile","hero","map","memfile","ishero","worditem","push","keyword","renderMemoryContent","mem","word","idx","person","userid","firstname","lastname","thumburl","title","description","story","render","show","memoryContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport tick from '../images/checkmark.png'\nimport './memorymodal.css'\n\nimport {getAllMemoryFiles, \n  getTaggedPeople,\n  getMemoryClouds,\n  getMemorySearchWords, \n  getCloudPeople,\n } from '../memriioserver'\nimport {CheckBox,SubTag} from '../buttons/buttons'\n\n\n\nclass MemoryModal extends React.Component{\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[], \n        keywords:[],    // this is temporary   \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null\n    }\n   \n\n    onHide = () =>{\n      this.props.onHideModal(this.props.memory)\n    }\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n        \n        this.populateMemoryFiles(this.props.memfiles)\n        getTaggedPeople      (this.props.memory.memid,((people)=>{this.setState({taggedPeople:people})}))\n        getMemoryClouds      (this.props.memory.memid,((clouds)=>{this.populateCloudInfo(clouds)}))\n        getMemorySearchWords (this.props.memory.memid,((words =>{this.populateSearchWords(words)})))\n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    let hero = this.state.memfiles[0]    \n    this.state.memfiles.map(memfile => {\n        if(memfile.ishero){           \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.state.keywords = []\n    words.map(worditem =>{\n        this.state.keywords.push(worditem.keyword)\n    })\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n\n    this.setState({memoryClouds:clouds})\n    getCloudPeople (clouds,((people)=>{this.setState({cloudPeople:people})}))   \n  }\n\n  //------------------------------------------------------------------------\n\n  renderMemoryContent = () => {\n    const mem = this.props.memory\n    const keywords    = this.state.keywords.map((word, idx) => {\n                                                      return (\n                                                        <li \n                                                            className='list-style-image: none'\n                                                            key={'k'+idx}>\n                                                          <CheckBox \n                                                              checkedImg = {tick}\n                                                              \n                                                              label = {word}/>\n                                                        </li>\n                                                        )\n                                                      })\n    const people      = this.state.taggedPeople.map(person => {\n                                                      return (\n                                                        <li key={person.userid}>\n                                                            {person.firstname+' '+person.lastname}\n                                                        </li>\n                                                      )\n                                                    })\n\n    if(this.state.activefile){\n      return (\n          <div className='modalrow'>\n            \n            <div className='imgcolumn'>\n              <img \n                alt='memory' \n                src={this.state.activefile.thumburl} \n                className = 'imgStyle'\n              />\n            </div>\n\n            <div className = 'infoColumn'>\n              \n              <h4>{mem.title} </h4>\n              <p className=\"f6 lh-copy i measure mt2 mid-gray\">{mem.description}</p>\n              <p className=\"f6 lh-copy measure mt2 black\"> { mem.story } </p>\n\n            </div>  \n\n            <div className = 'detailsColumn'>\n              \n              <h4>Key words </h4>\n              <ul className='wordlist' > { keywords } </ul>\n              <h4>Key People</h4>\n              <ul className='wordlist' > { people   } </ul>\n              <div className='footerStyle'>\n                <div className='float-right' >\n                  <SubTag className='closeBtn' onClick={this.onHide} />\n                </div>\n              </div>\n\n              \n            </div>  \n\n          </div>\n      )\n    } else {\n      return null\n    }\n    \n  }\n\n//------------------------------------------------------------------------\n\n    render(){\n\n      \n      if(this.props.show){\n        let memoryContent = this.renderMemoryContent()\n        return(\n          <div className= 'backdropStyle'>\n            <div className='modalStyle'>\n              {memoryContent}              \n            </div>\n          </div>\n        )\n      }else{\n        return null\n      }        \n  }\n\n};  \n\n\nexport default MemoryModal;\n\n\n"]},"metadata":{},"sourceType":"module"}