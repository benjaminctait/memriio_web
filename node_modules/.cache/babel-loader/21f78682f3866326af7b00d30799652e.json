{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport tick from '../images/checkmark.png';\nimport tag from '../images/tag.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport * as Utils from './utils';\nimport './memorymodal.css';\nimport { getAllMemoryFiles, getTaggedPeople, getMemoryClouds, getMemorySearchWords, getCloudPeople, getUser } from '../memriioserver';\nimport { CheckBox, SubTag, ImageLabel } from '../buttons/buttons';\n\nclass MemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      keywords: [],\n      // this is temporary   \n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null,\n      author: null,\n      memfileIndex: 0\n    };\n\n    this.onHide = () => {\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          getUser(this.props.memory.userid, author => {\n            this.setState({\n              author: author\n            });\n            console.log('Author + ' + JSON.stringify(author));\n          });\n          getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      this.state.memfileIndex = 0;\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map((memfile, index) => {\n        if (memfile.ishero) {\n          this.state.memfileIndex = index;\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.state.keywords = [];\n      words.map(worditem => {\n        this.state.keywords.push(worditem.keyword);\n      });\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.renderKeyWords = () => {\n      const keywords = this.state.keywords.map((word, idx) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'k' + idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(CheckBox, {\n          checkedImg: tick,\n          label: word,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }\n        }));\n      });\n      return keywords;\n    };\n\n    this.renderTaggedPeople = () => {\n      const people = this.state.taggedPeople.map(p => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 't' + p.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          img: tag,\n          label: p.firstname + ' ' + p.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 34\n          }\n        }));\n      });\n\n      if (this.state.author) {\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          key: 'a' + this.state.author.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          img: author,\n          label: this.state.author.firstname + ' ' + this.state.author.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      people.reverse();\n      return people;\n    };\n\n    this.renderDetails = () => {\n      const details = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'location',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        img: tag,\n        label: this.props.memory.location,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 26\n        }\n      })), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'sss',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        img: tag,\n        label: this.props.memory.createdon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }\n      })));\n      return details;\n    };\n\n    this.renderMemoryContent = () => {\n      const mem = this.props.memory;\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n\n      if (this.state.activefile) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalrow\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imgcolumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n          memfile: this.state.activefile,\n          thumbStyleClass: 'memoryModalImage',\n          fileStyleClass: 'memoryModalImage',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }\n        }, mem.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy i measure mt2 mid-gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }\n        }, mem.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy measure mt2 black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }\n        }, \" \", mem.story, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"detailsColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }\n        }, \"Tags \"), /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }\n        }, \" \", keywords, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }\n        }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }\n        }, \" \", people, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }\n        }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }\n        }, \" \", details, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: x,\n          onClick: this.onHide,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 21\n          }\n        }))));\n      } else {\n        return null;\n      }\n    };\n\n    this.goBack = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === 0) {\n          this.state.memfileIndex = ubound;\n        } else {\n          this.state.memfileIndex--;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.goForward = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === ubound) {\n          this.state.memfileIndex = 0;\n        } else {\n          this.state.memfileIndex++;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.renderCarouselControls = () => {\n      if (this.state.memfiles) {\n        const mem = this.props.memory;\n        const mfiles = this.state.memfiles;\n        const thumbs = mfiles.map((mfile, index) => {\n          return /*#__PURE__*/React.createElement(\"img\", {\n            key: 'thumb' + index,\n            className: \"thumb\",\n            src: mfile.thumburl,\n            onClick: index => {},\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 11\n            }\n          });\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controlbox\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: left,\n          onClick: this.goBack,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"thumbArray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 7\n          }\n        }, thumbs), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: right,\n          onClick: this.goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 7\n          }\n        }));\n      } else {\n        return null;\n      }\n    };\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      let memoryContent = this.renderMemoryContent();\n      let carouselControls = this.renderCarouselControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }, memoryContent, carouselControls));\n    } else {\n      return null;\n    }\n  } //------------------------------------------------------------------------\n\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","tick","tag","author","x","left","right","MemoryFileViewer","Utils","getAllMemoryFiles","getTaggedPeople","getMemoryClouds","getMemorySearchWords","getCloudPeople","getUser","CheckBox","SubTag","ImageLabel","MemoryModal","Component","state","memory","taggedPeople","memoryClouds","searchWords","keywords","memfiles","cloudPeople","userClouds","activefile","memfileIndex","onHide","props","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","userid","setState","console","log","JSON","stringify","people","clouds","populateCloudInfo","words","populateSearchWords","getHeroFile","hero","map","memfile","index","ishero","worditem","push","keyword","renderKeyWords","word","idx","renderTaggedPeople","p","firstname","lastname","reverse","renderDetails","details","location","createdon","renderMemoryContent","mem","title","description","story","goBack","e","ubound","length","goForward","renderCarouselControls","mfiles","thumbs","mfile","thumburl","render","show","memoryContent","carouselControls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport tick from '../images/checkmark.png'\nimport tag from '../images/tag.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport * as Utils from './utils'\nimport './memorymodal.css'\n\nimport {getAllMemoryFiles, \n  getTaggedPeople,\n  getMemoryClouds,\n  getMemorySearchWords, \n  getCloudPeople,\n  getUser,\n } from '../memriioserver'\nimport {CheckBox,SubTag,ImageLabel} from '../buttons/buttons'\n\n\n\nclass MemoryModal extends React.Component{\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[], \n        keywords:[],    // this is temporary   \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null,\n        author:null,\n        memfileIndex:0\n    }\n   \n\n    onHide = () =>{\n      this.props.onHideModal(this.props.memory)\n    }\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n        \n        this.populateMemoryFiles(this.props.memfiles)\n        getUser              (this.props.memory.userid,(author => {\n                                                              this.setState({author:author})\n                                                              console.log('Author + ' + JSON.stringify(author))\n                                                          }))\n        getTaggedPeople      (this.props.memory.memid,((people)=>{this.setState({taggedPeople:people})}))\n        getMemoryClouds      (this.props.memory.memid,((clouds)=>{this.populateCloudInfo(clouds)}))\n        getMemorySearchWords (this.props.memory.memid,((words =>{this.populateSearchWords(words)})))\n        \n        \n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    this.state.memfileIndex=0\n    let hero = this.state.memfiles[0]\n\n    this.state.memfiles.map((memfile,index)=> {\n\n        if(memfile.ishero){         \n            this.state.memfileIndex = index            \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.state.keywords = []\n    words.map(worditem =>{\n        this.state.keywords.push(worditem.keyword)\n    })\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n\n    this.setState({memoryClouds:clouds})\n    getCloudPeople (clouds,((people)=>{this.setState({cloudPeople:people})}))   \n  }\n\n  //------------------------------------------------------------------------\n\n  render(){\n      \n    if(this.props.show){\n      let memoryContent = this.renderMemoryContent()\n      let carouselControls = this.renderCarouselControls()\n      return(\n        <div className= 'backdropStyle'>\n          <div className='modalStyle'>\n            {memoryContent}              \n            {carouselControls}\n          </div>\n        </div>\n      )\n    }else{\n      return null\n    }        \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n  const keywords  = this.state.keywords.map(\n    (word, idx) => {\n      return (\n        <li \n            className='wordListItem'\n            key={'k'+idx}>\n          <CheckBox \n              checkedImg = {tick}\n              label = {word}/>\n        </li>\n        )\n      })\n  return keywords\n}\n\n//------------------------------------------------------------------------\n\nrenderTaggedPeople =() =>{\n  const people  = this.state.taggedPeople.map(\n    p => {\n        return (\n          <li \n            className='wordListItem'\n            key={'t' + p.userid}><ImageLabel img = {tag} label = {p.firstname+' '+p.lastname}/>                                                        \n          </li>\n        )\n      })\n      if(this.state.author){\n        people.push(      \n          <li key={'a' + this.state.author.userid}>\n            <ImageLabel \n              img = {author}\n              label = {this.state.author.firstname + ' ' + this.state.author.lastname}/>\n          </li>\n        ) \n      }\n      people.reverse()   \n  return people\n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  const details = \n    <div>\n      <li \n        className='wordListItem'\n        key={'location'}><ImageLabel img = {tag} label = {this.props.memory.location}/>\n      </li>\n      <li \n        className='wordListItem'\n        key={'sss'}><ImageLabel img = {tag} label = {this.props.memory.createdon}/>\n      </li>\n    </div>\n  return details\n}\n\n//------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    const mem       = this.props.memory\n    const keywords  = this.renderKeyWords()\n    const people    = this.renderTaggedPeople()\n    const details   = this.renderDetails()\n\n    if(this.state.activefile){\n      return (\n          <div className='modalrow'>\n           \n            <div className='imgcolumn'>\n              <MemoryFileViewer \n                memfile={this.state.activefile}\n                thumbStyleClass={'memoryModalImage'}\n                fileStyleClass={'memoryModalImage'}\n              />\n            </div>\n\n            <div className = 'infoColumn'>\n              \n              <h4>{mem.title} </h4>\n              <p className=\"f6 lh-copy i measure mt2 mid-gray\">{mem.description}</p>\n              <p className=\"f6 lh-copy measure mt2 black\"> { mem.story } </p>\n\n            </div>  \n\n            <div className = 'detailsColumn'>\n              \n              <h4>Tags </h4>\n              <ul className='wordList' > { keywords } </ul>\n              <h4>People</h4>\n              <ul className='wordList' > { people   } </ul>\n              <h4>Details</h4>\n              <ul className='wordList' > { details   } </ul>\n              <div className='footer'>                        \n                    <img  \n                      className='closeBtn'                   \n                      src = {x}\n                      onClick={this.onHide} />  \n              </div>              \n            </div>  \n          </div>\n      )\n    } else {\n      return null\n    }\n    \n  }\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === 0){\n      this.state.memfileIndex = ubound \n    }else{\n      this.state.memfileIndex--\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }\n}\n\ngoForward = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }    \n}\n\nrenderCarouselControls = () => {\n  if(this.state.memfiles)\n  {\n    const mem = this.props.memory\n    const mfiles = this.state.memfiles\n    const thumbs = mfiles.map((mfile,index) =>{\n        return(\n          <img key={'thumb'+index} className='thumb' src = {mfile.thumburl} onClick={(index) =>{}}/> \n        )})\n    \n    return (\n      <div className='controlbox'>\n      <img className='closeBtn' src = {left} onClick={this.goBack} /> \n      <div className='thumbArray'>\n          {thumbs}\n      </div> \n      <img className='closeBtn' src = {right} onClick={this.goForward} /> \n      </div>\n    )\n  }else{\n    return null\n  }\n}\n  \n\n};  \n\n\nexport default MemoryModal;\n\n\n"]},"metadata":{},"sourceType":"module"}