{"ast":null,"code":"var _ = require(\"underscore\");\n\n_.str = require('underscore.string');\nvar supported_languages = [\"danish\", \"dutch\", \"english\", \"french\", \"galician\", \"german\", \"italian\", \"polish\", \"portuguese\", \"romanian\", \"russian\", \"spanish\", \"swedish\"];\n\nvar stopwords = require(\"./stopwords/stopwords\");\n\nfunction _extract(str, options) {\n  if (_.isEmpty(str)) {\n    return [];\n  }\n\n  if (_.isEmpty(options)) {\n    options = {\n      remove_digits: true,\n      return_changed_case: true\n    };\n  }\n\n  var return_changed_case = options.return_changed_case;\n  var return_chained_words = options.return_chained_words;\n  var remove_digits = options.remove_digits;\n\n  var _language = options.language || \"english\";\n\n  var _remove_duplicates = options.remove_duplicates || false;\n\n  var return_max_ngrams = options.return_max_ngrams;\n\n  if (supported_languages.indexOf(_language) < 0) {\n    throw new Error(\"Language must be one of [\" + supported_languages.join(\",\") + \"]\");\n  } //  strip any HTML and trim whitespace\n\n\n  var text = _.str.trim(_.str.stripTags(str));\n\n  if (_.isEmpty(text)) {\n    return [];\n  } else {\n    var words = text.split(/\\s/);\n    var unchanged_words = [];\n    var low_words = []; //  change the case of all the words\n\n    for (var x = 0; x < words.length; x++) {\n      var w = words[x].match(/https?:\\/\\/.*[\\r\\n]*/g) ? words[x] : words[x].replace(/\\.|,|;|!|\\?|\\(|\\)|:|\"|^'|'$|“|”|‘|’/g, ''); //  remove periods, question marks, exclamation points, commas, and semi-colons\n      //  if this is a short result, make sure it's not a single character or something 'odd'\n\n      if (w.length === 1) {\n        w = w.replace(/-|_|@|&|#/g, '');\n      } //  if it's a number, remove it\n\n\n      var digits_match = w.match(/\\d/g);\n\n      if (remove_digits && digits_match && digits_match.length === w.length) {\n        w = \"\";\n      }\n\n      if (w.length > 0) {\n        low_words.push(w.toLowerCase());\n        unchanged_words.push(w);\n      }\n    }\n\n    var results = [];\n\n    var _stopwords = options.stopwords || _getStopwords({\n      language: _language\n    });\n\n    var _last_result_word_index = 0;\n    var _start_result_word_index = 0;\n    var _unbroken_word_chain = false;\n\n    for (var y = 0; y < low_words.length; y++) {\n      if (_stopwords.indexOf(low_words[y]) < 0) {\n        if (_last_result_word_index !== y - 1) {\n          _start_result_word_index = y;\n          _unbroken_word_chain = false;\n        } else {\n          _unbroken_word_chain = true;\n        }\n\n        var result_word = return_changed_case && !unchanged_words[y].match(/https?:\\/\\/.*[\\r\\n]*/g) ? low_words[y] : unchanged_words[y];\n\n        if (return_max_ngrams && _unbroken_word_chain && !return_chained_words && return_max_ngrams > y - _start_result_word_index && _last_result_word_index === y - 1) {\n          var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n          results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n        } else if (return_chained_words && _last_result_word_index === y - 1) {\n          var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n          results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n        } else {\n          results.push(result_word);\n        }\n\n        _last_result_word_index = y;\n      } else {\n        _unbroken_word_chain = false;\n      }\n    }\n\n    if (_remove_duplicates) {\n      results = _.uniq(results, function (item) {\n        return item;\n      });\n    }\n\n    return results;\n  }\n}\n\nfunction _getStopwords(options) {\n  options = options || {};\n\n  var _language = options.language || \"english\";\n\n  if (supported_languages.indexOf(_language) < 0) {\n    throw new Error(\"Language must be one of [\" + supported_languages.join(\",\") + \"]\");\n  }\n\n  return stopwords[_language];\n}\n\nmodule.exports = {\n  extract: _extract,\n  getStopwords: _getStopwords\n};","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/node_modules/keyword-extractor/lib/keyword_extractor.js"],"names":["_","require","str","supported_languages","stopwords","_extract","options","isEmpty","remove_digits","return_changed_case","return_chained_words","_language","language","_remove_duplicates","remove_duplicates","return_max_ngrams","indexOf","Error","join","text","trim","stripTags","words","split","unchanged_words","low_words","x","length","w","match","replace","digits_match","push","toLowerCase","results","_stopwords","_getStopwords","_last_result_word_index","_start_result_word_index","_unbroken_word_chain","y","result_word","change_pos","uniq","item","module","exports","extract","getStopwords"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACAD,CAAC,CAACE,GAAF,GAAQD,OAAO,CAAC,mBAAD,CAAf;AACA,IAAIE,mBAAmB,GAAG,CAAC,QAAD,EAAU,OAAV,EAAkB,SAAlB,EAA4B,QAA5B,EAAqC,UAArC,EAAgD,QAAhD,EAAyD,SAAzD,EAAmE,QAAnE,EAA4E,YAA5E,EAAyF,UAAzF,EAAoG,SAApG,EAA8G,SAA9G,EAAwH,SAAxH,CAA1B;;AACA,IAAIC,SAAS,GAAGH,OAAO,CAAC,uBAAD,CAAvB;;AAEA,SAASI,QAAT,CAAkBH,GAAlB,EAAuBI,OAAvB,EAA+B;AAC3B,MAAGN,CAAC,CAACO,OAAF,CAAUL,GAAV,CAAH,EAAkB;AACd,WAAO,EAAP;AACH;;AACD,MAAGF,CAAC,CAACO,OAAF,CAAUD,OAAV,CAAH,EAAsB;AAClBA,IAAAA,OAAO,GAAG;AACNE,MAAAA,aAAa,EAAE,IADT;AAENC,MAAAA,mBAAmB,EAAE;AAFf,KAAV;AAIH;;AACD,MAAIA,mBAAmB,GAAGH,OAAO,CAACG,mBAAlC;AACA,MAAIC,oBAAoB,GAAGJ,OAAO,CAACI,oBAAnC;AACA,MAAIF,aAAa,GAAGF,OAAO,CAACE,aAA5B;;AACA,MAAIG,SAAS,GAAGL,OAAO,CAACM,QAAR,IAAoB,SAApC;;AACA,MAAIC,kBAAkB,GAAGP,OAAO,CAACQ,iBAAR,IAA6B,KAAtD;;AACA,MAAIC,iBAAiB,GAAGT,OAAO,CAACS,iBAAhC;;AAEA,MAAGZ,mBAAmB,CAACa,OAApB,CAA4BL,SAA5B,IAAyC,CAA5C,EAA8C;AAC1C,UAAM,IAAIM,KAAJ,CAAU,8BAA4Bd,mBAAmB,CAACe,IAApB,CAAyB,GAAzB,CAA5B,GAA0D,GAApE,CAAN;AACH,GAnB0B,CAqB3B;;;AACA,MAAIC,IAAI,GAAGnB,CAAC,CAACE,GAAF,CAAMkB,IAAN,CAAWpB,CAAC,CAACE,GAAF,CAAMmB,SAAN,CAAgBnB,GAAhB,CAAX,CAAX;;AACA,MAAGF,CAAC,CAACO,OAAF,CAAUY,IAAV,CAAH,EAAmB;AACf,WAAO,EAAP;AACH,GAFD,MAEK;AACD,QAAIG,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,IAAX,CAAZ;AACA,QAAIC,eAAe,GAAG,EAAtB;AACA,QAAIC,SAAS,GAAG,EAAhB,CAHC,CAID;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAAGJ,KAAK,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;AAChC,UAAIE,CAAC,GAAGN,KAAK,CAACI,CAAD,CAAL,CAASG,KAAT,CAAe,uBAAf,IAA0CP,KAAK,CAACI,CAAD,CAA/C,GAAqDJ,KAAK,CAACI,CAAD,CAAL,CAASI,OAAT,CAAiB,sCAAjB,EAAwD,EAAxD,CAA7D,CADgC,CAEhC;AACA;;AACA,UAAGF,CAAC,CAACD,MAAF,KAAa,CAAhB,EAAkB;AACdC,QAAAA,CAAC,GAAGA,CAAC,CAACE,OAAF,CAAU,YAAV,EAAuB,EAAvB,CAAJ;AACH,OAN+B,CAOhC;;;AACA,UAAIC,YAAY,GAAGH,CAAC,CAACC,KAAF,CAAQ,KAAR,CAAnB;;AACA,UAAGrB,aAAa,IAAIuB,YAAjB,IAAiCA,YAAY,CAACJ,MAAb,KAAwBC,CAAC,CAACD,MAA9D,EAAqE;AACjEC,QAAAA,CAAC,GAAG,EAAJ;AACH;;AACD,UAAGA,CAAC,CAACD,MAAF,GAAW,CAAd,EAAgB;AACZF,QAAAA,SAAS,CAACO,IAAV,CAAeJ,CAAC,CAACK,WAAF,EAAf;AACAT,QAAAA,eAAe,CAACQ,IAAhB,CAAqBJ,CAArB;AACH;AACJ;;AACD,QAAIM,OAAO,GAAG,EAAd;;AACA,QAAIC,UAAU,GAAG7B,OAAO,CAACF,SAAR,IAAqBgC,aAAa,CAAC;AAAExB,MAAAA,QAAQ,EAAED;AAAZ,KAAD,CAAnD;;AACA,QAAI0B,uBAAuB,GAAG,CAA9B;AACA,QAAIC,wBAAwB,GAAG,CAA/B;AACP,QAAIC,oBAAoB,GAAG,KAA3B;;AACO,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGf,SAAS,CAACE,MAA7B,EAAqCa,CAAC,EAAtC,EAAyC;AAErC,UAAGL,UAAU,CAACnB,OAAX,CAAmBS,SAAS,CAACe,CAAD,CAA5B,IAAmC,CAAtC,EAAwC;AAEpC,YAAGH,uBAAuB,KAAKG,CAAC,GAAG,CAAnC,EAAqC;AACjCF,UAAAA,wBAAwB,GAAGE,CAA3B;AACAD,UAAAA,oBAAoB,GAAG,KAAvB;AACjB,SAHa,MAGP;AACIA,UAAAA,oBAAoB,GAAG,IAAvB;AACV;;AACa,YAAIE,WAAW,GAAGhC,mBAAmB,IAAI,CAACe,eAAe,CAACgB,CAAD,CAAf,CAAmBX,KAAnB,CAAyB,uBAAzB,CAAxB,GAA4EJ,SAAS,CAACe,CAAD,CAArF,GAA2FhB,eAAe,CAACgB,CAAD,CAA5H;;AAEA,YAAIzB,iBAAiB,IAAIwB,oBAArB,IAA6C,CAAC7B,oBAA9C,IAAsEK,iBAAiB,GAAIyB,CAAC,GAAGF,wBAA/F,IAA4HD,uBAAuB,KAAKG,CAAC,GAAG,CAAhK,EAAkK;AAC9J,cAAIE,UAAU,GAAGR,OAAO,CAACP,MAAR,GAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAAzB,GAA6BO,OAAO,CAACP,MAAR,GAAiB,CAA/D;AACAO,UAAAA,OAAO,CAACQ,UAAD,CAAP,GAAsBR,OAAO,CAACQ,UAAD,CAAP,GAAsBR,OAAO,CAACQ,UAAD,CAAP,GAAsB,GAAtB,GAA4BD,WAAlD,GAAgEA,WAAtF;AACH,SAHD,MAGO,IAAI/B,oBAAoB,IAAI2B,uBAAuB,KAAKG,CAAC,GAAG,CAA5D,EAA+D;AACpE,cAAIE,UAAU,GAAGR,OAAO,CAACP,MAAR,GAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAAzB,GAA6BO,OAAO,CAACP,MAAR,GAAiB,CAA/D;AACAO,UAAAA,OAAO,CAACQ,UAAD,CAAP,GAAsBR,OAAO,CAACQ,UAAD,CAAP,GAAsBR,OAAO,CAACQ,UAAD,CAAP,GAAsB,GAAtB,GAA4BD,WAAlD,GAAgEA,WAAtF;AACD,SAHM,MAGA;AACLP,UAAAA,OAAO,CAACF,IAAR,CAAaS,WAAb;AACD;;AAEDJ,QAAAA,uBAAuB,GAAGG,CAA1B;AACH,OArBD,MAqBO;AACjBD,QAAAA,oBAAoB,GAAG,KAAvB;AACI;AACG;;AAED,QAAG1B,kBAAH,EAAuB;AACnBqB,MAAAA,OAAO,GAAElC,CAAC,CAAC2C,IAAF,CAAOT,OAAP,EAAgB,UAAUU,IAAV,EAAgB;AACrC,eAAOA,IAAP;AACH,OAFQ,CAAT;AAGH;;AAED,WAAOV,OAAP;AACH;AACJ;;AAED,SAASE,aAAT,CAAuB9B,OAAvB,EAA+B;AAC3BA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAIK,SAAS,GAAGL,OAAO,CAACM,QAAR,IAAoB,SAApC;;AACA,MAAGT,mBAAmB,CAACa,OAApB,CAA4BL,SAA5B,IAAyC,CAA5C,EAA8C;AAC1C,UAAM,IAAIM,KAAJ,CAAU,8BAA4Bd,mBAAmB,CAACe,IAApB,CAAyB,GAAzB,CAA5B,GAA0D,GAApE,CAAN;AACH;;AAED,SAAOd,SAAS,CAACO,SAAD,CAAhB;AACH;;AAEDkC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,OAAO,EAAC1C,QADK;AAEb2C,EAAAA,YAAY,EAAEZ;AAFD,CAAjB","sourcesContent":["var _ = require(\"underscore\");\n_.str = require('underscore.string');\nvar supported_languages = [\"danish\",\"dutch\",\"english\",\"french\",\"galician\",\"german\",\"italian\",\"polish\",\"portuguese\",\"romanian\",\"russian\",\"spanish\",\"swedish\"];\nvar stopwords = require(\"./stopwords/stopwords\");\n\nfunction _extract(str, options){\n    if(_.isEmpty(str)){\n        return [];\n    }\n    if(_.isEmpty(options)){\n        options = {\n            remove_digits: true,\n            return_changed_case: true\n        };\n    }\n    var return_changed_case = options.return_changed_case;\n    var return_chained_words = options.return_chained_words;\n    var remove_digits = options.remove_digits;\n    var _language = options.language || \"english\";\n    var _remove_duplicates = options.remove_duplicates || false;\n    var return_max_ngrams = options.return_max_ngrams;\n\n    if(supported_languages.indexOf(_language) < 0){\n        throw new Error(\"Language must be one of [\"+supported_languages.join(\",\")+\"]\");\n    }\n\n    //  strip any HTML and trim whitespace\n    var text = _.str.trim(_.str.stripTags(str));\n    if(_.isEmpty(text)){\n        return [];\n    }else{\n        var words = text.split(/\\s/);\n        var unchanged_words = [];\n        var low_words = [];\n        //  change the case of all the words\n        for(var x = 0;x < words.length; x++){\n            var w = words[x].match(/https?:\\/\\/.*[\\r\\n]*/g) ? words[x] : words[x].replace(/\\.|,|;|!|\\?|\\(|\\)|:|\"|^'|'$|“|”|‘|’/g,'');\n            //  remove periods, question marks, exclamation points, commas, and semi-colons\n            //  if this is a short result, make sure it's not a single character or something 'odd'\n            if(w.length === 1){\n                w = w.replace(/-|_|@|&|#/g,'');\n            }\n            //  if it's a number, remove it\n            var digits_match = w.match(/\\d/g);\n            if(remove_digits && digits_match && digits_match.length === w.length){\n                w = \"\";\n            }\n            if(w.length > 0){\n                low_words.push(w.toLowerCase());\n                unchanged_words.push(w);\n            }\n        }\n        var results = [];\n        var _stopwords = options.stopwords || _getStopwords({ language: _language });\n        var _last_result_word_index = 0;\n        var _start_result_word_index = 0;\n\tvar _unbroken_word_chain = false;\n        for(var y = 0; y < low_words.length; y++){\n\n            if(_stopwords.indexOf(low_words[y]) < 0){\n                \n                if(_last_result_word_index !== y - 1){\n                    _start_result_word_index = y;\n                    _unbroken_word_chain = false; \n\t\t} else {\n\t            _unbroken_word_chain = true;\n\t\t}\n                var result_word = return_changed_case && !unchanged_words[y].match(/https?:\\/\\/.*[\\r\\n]*/g) ? low_words[y] : unchanged_words[y];\n                \n                if (return_max_ngrams && _unbroken_word_chain && !return_chained_words && return_max_ngrams > (y - _start_result_word_index) && _last_result_word_index === y - 1){\n                    var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n                    results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n                } else if (return_chained_words && _last_result_word_index === y - 1) {\n                  var change_pos = results.length - 1 < 0 ? 0 : results.length - 1;\n                  results[change_pos] = results[change_pos] ? results[change_pos] + ' ' + result_word : result_word;\n                } else {\n                  results.push(result_word);\n                }\n\n                _last_result_word_index = y;\n            } else {\n\t\t_unbroken_word_chain = false;\n\t    }\n        }\n\n        if(_remove_duplicates) {\n            results= _.uniq(results, function (item) {\n                return item;\n            });\n        }\n\n        return results;\n    }\n}\n\nfunction _getStopwords(options){\n    options = options || {};\n\n    var _language = options.language || \"english\";\n    if(supported_languages.indexOf(_language) < 0){\n        throw new Error(\"Language must be one of [\"+supported_languages.join(\",\")+\"]\");\n    }\n\n    return stopwords[_language];\n}\n\nmodule.exports = {\n    extract:_extract,\n    getStopwords: _getStopwords\n};\n"]},"metadata":{},"sourceType":"script"}