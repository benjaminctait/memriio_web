{"ast":null,"code":"/**\n * _s.prune: a more elegant version of truncate\n * prune extra chars, never leaving a half-chopped word.\n * @author github.com/rwz\n */\nvar makeString = require('./helper/makeString');\n\nvar rtrim = require('./rtrim');\n\nmodule.exports = function prune(str, length, pruneStr) {\n  str = makeString(str);\n  length = ~~length;\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';\n  if (str.length <= length) return str;\n\n  var tmpl = function (c) {\n    return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';\n  },\n      template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n\n  if (template.slice(template.length - 2).match(/\\w\\w/)) template = template.replace(/\\s*\\S+$/, '');else template = rtrim(template.slice(0, template.length - 1));\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;\n};","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/node_modules/underscore.string/prune.js"],"names":["makeString","require","rtrim","module","exports","prune","str","length","pruneStr","String","tmpl","c","toUpperCase","toLowerCase","template","slice","replace","match"],"mappings":"AAAA;;;;;AAKA,IAAIA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AACrDF,EAAAA,GAAG,GAAGN,UAAU,CAACM,GAAD,CAAhB;AACAC,EAAAA,MAAM,GAAG,CAAC,CAACA,MAAX;AACAC,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,IAAZ,GAAmBC,MAAM,CAACD,QAAD,CAAzB,GAAsC,KAAjD;AAEA,MAAIF,GAAG,CAACC,MAAJ,IAAcA,MAAlB,EAA0B,OAAOD,GAAP;;AAE1B,MAAII,IAAI,GAAG,UAASC,CAAT,EAAY;AACnB,WAAOA,CAAC,CAACC,WAAF,OAAoBD,CAAC,CAACE,WAAF,EAApB,GAAsC,GAAtC,GAA4C,GAAnD;AACD,GAFH;AAAA,MAGEC,QAAQ,GAAGR,GAAG,CAACS,KAAJ,CAAU,CAAV,EAAaR,MAAM,GAAG,CAAtB,EAAyBS,OAAzB,CAAiC,eAAjC,EAAkDN,IAAlD,CAHb,CAPqD,CAUiB;;;AAEtE,MAAII,QAAQ,CAACC,KAAT,CAAeD,QAAQ,CAACP,MAAT,GAAkB,CAAjC,EAAoCU,KAApC,CAA0C,MAA1C,CAAJ,EACEH,QAAQ,GAAGA,QAAQ,CAACE,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAX,CADF,KAGEF,QAAQ,GAAGZ,KAAK,CAACY,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBD,QAAQ,CAACP,MAAT,GAAkB,CAApC,CAAD,CAAhB;AAEF,SAAO,CAACO,QAAQ,GAAGN,QAAZ,EAAsBD,MAAtB,GAA+BD,GAAG,CAACC,MAAnC,GAA4CD,GAA5C,GAAkDA,GAAG,CAACS,KAAJ,CAAU,CAAV,EAAaD,QAAQ,CAACP,MAAtB,IAAgCC,QAAzF;AACD,CAlBD","sourcesContent":["/**\n * _s.prune: a more elegant version of truncate\n * prune extra chars, never leaving a half-chopped word.\n * @author github.com/rwz\n */\nvar makeString = require('./helper/makeString');\nvar rtrim = require('./rtrim');\n\nmodule.exports = function prune(str, length, pruneStr) {\n  str = makeString(str);\n  length = ~~length;\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\n  if (str.length <= length) return str;\n\n  var tmpl = function(c) {\n      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';\n    },\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n  if (template.slice(template.length - 2).match(/\\w\\w/))\n    template = template.replace(/\\s*\\S+$/, '');\n  else\n    template = rtrim(template.slice(0, template.length - 1));\n\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;\n};\n"]},"metadata":{},"sourceType":"script"}