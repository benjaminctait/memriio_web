{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/cardcollection/cardcollection.js\";\nimport React from 'react';\nimport { BaseCard, ShortCard } from './card';\nimport MemoryModal from '../memorymodal/memorymodal';\nimport Masonry from 'react-masonry-component';\nimport './cardcollection.css';\nimport { InputGroup } from 'react-bootstrap';\n\nclass CardCollection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      memories: null,\n      activeUser: null,\n      showMemoryModal: false,\n      activeMemory: null\n    };\n\n    this.onExpandMemory = memoryId => {\n      console.log('CardCollection->onExpandMemory memory id : ' + memoryId);\n      this.masonry.layout();\n    };\n\n    this.onShowModal = (memory, memfiles) => {\n      this.state.activeMemory = memory;\n      this.state.memfiles = memfiles;\n      this.setState({\n        showMemoryModal: !this.state.showMemoryModal\n      });\n\n      if (memory) {\n        console.log('blah blah :' + this.state.activeMemory.title);\n      }\n    };\n\n    this.handleLayoutComplete = () => {\n      console.log('onShowModal : layout done');\n    };\n\n    console.log('CardCollection constructor : mem count : ' + props.memories.length);\n    this.state = {\n      memories: props.memories,\n      activeUser: props.userid\n    };\n  }\n\n  //-------------------------------------------------------------------------------\n  render() {\n    if (Array.isArray(this.props.memories)) {\n      console.log('CarCollection-render : memory count : ' + this.props.memories.length);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-left\",\n        id: \"col1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col\",\n        id: \"col2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Masonry, {\n        ref: function (c) {\n          this.masonry = this.masonry || c.masonry;\n        }.bind(this),\n        onLayoutComplete: laidOutItems => this.handleLayoutComplete(laidOutItems),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      }, this.props.memories.map((memory, i) => {\n        let ukey = 'memcard' + i;\n\n        if (memory.cardtype == 0) {\n          return /*#__PURE__*/React.createElement(BaseCard, {\n            key: ukey,\n            memory: memory,\n            onEdit: this.props.onEditMemory,\n            onExpand: this.onExpandMemory,\n            onShowModal: this.onShowModal,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 45\n            }\n          });\n        } else if (memory.cardtype == 1) {\n          return /*#__PURE__*/React.createElement(ShortCard, {\n            key: ukey,\n            memory: memory,\n            onEditClick: this.props.onEditMemory,\n            onShowModal: this.onShowModal,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 45\n            }\n          });\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-right\",\n        id: \"col3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(MemoryModal, {\n        key: 'memmodal' + 42,\n        memory: this.state.activeMemory,\n        memfiles: this.state.memfiles,\n        show: this.state.showMemoryModal,\n        onHideModal: this.onShowModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, \"No memories Found\");\n    }\n  }\n\n}\n\nexport default CardCollection;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/cardcollection/cardcollection.js"],"names":["React","BaseCard","ShortCard","MemoryModal","Masonry","InputGroup","CardCollection","Component","constructor","props","state","memories","activeUser","showMemoryModal","activeMemory","onExpandMemory","memoryId","console","log","masonry","layout","onShowModal","memory","memfiles","setState","title","handleLayoutComplete","length","userid","render","Array","isArray","c","bind","laidOutItems","map","i","ukey","cardtype","onEditMemory"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {BaseCard,ShortCard} from './card'\nimport MemoryModal from '../memorymodal/memorymodal'\nimport Masonry from 'react-masonry-component';\n\nimport './cardcollection.css'\nimport { InputGroup } from 'react-bootstrap';\n\n\n\nclass CardCollection extends React.Component{\n\n    constructor(props){\n        super(props)\n        console.log('CardCollection constructor : mem count : ' + props.memories.length);\n        \n        this.state={\n            memories:props.memories,\n            activeUser:props.userid\n        }\n    }\n    \n    state={\n        memories:null,\n        activeUser:null,\n        showMemoryModal:false,\n        activeMemory:null\n    }\n//-------------------------------------------------------------------------------\n    onExpandMemory = (memoryId) => {\n        \n        console.log('CardCollection->onExpandMemory memory id : ' + memoryId)\n        this.masonry.layout()\n    }\n\n//-------------------------------------------------------------------------------\n\nonShowModal = (memory,memfiles) => {\n        \n        this.state.activeMemory = memory\n        this.state.memfiles = memfiles\n        this.setState({showMemoryModal:!this.state.showMemoryModal})\n        if(memory){\n            console.log('blah blah :' + this.state.activeMemory.title);\n        }     \n        \n    }\n\nhandleLayoutComplete = () => {\n    console.log('onShowModal : layout done');\n    \n}\n\n//-------------------------------------------------------------------------------\n    \n    render(){\n        if(Array.isArray(this.props.memories)){\n            console.log('CarCollection-render : memory count : ' + this.props.memories.length);\n            \n            return (\n            <div>\n                <div id=\"container\">\n                    <div class=\"col-left\" id=\"col1\"></div>\n                    <div class=\"col\" id=\"col2\">\n                        <Masonry\n\n                            ref={function(c) {this.masonry = this.masonry || c.masonry;}.bind(this)}\n                            onLayoutComplete={laidOutItems => this.handleLayoutComplete(laidOutItems)}\n                        >\n                            { \n                                this.props.memories.map((memory,i) => {\n                                    let ukey = 'memcard' + i                                    \n                                    if(memory.cardtype == 0){\n                                        return (\n                                            <BaseCard\n                                                key={ukey} \n                                                memory={memory}\n                                                onEdit = {this.props.onEditMemory }\n                                                onExpand = {this.onExpandMemory}\n                                                onShowModal = {this.onShowModal}\n                                                />)\n                                    }else if (memory.cardtype == 1){\n                                        return (\n                                            <ShortCard\n                                                key={ukey} \n                                                memory={memory}\n                                                onEditClick = {this.props.onEditMemory }\n                                                onShowModal = {this.onShowModal}\n                                            />)\n                                                  \n\n                                    }\n                                \n                                })\n                            }\n                        </Masonry>                    \n                    </div>\n                    <div class=\"col-right\" id=\"col3\"></div>\n                </div>\n                <MemoryModal \n                    key         = { 'memmodal' + 42}\n                    memory      = { this.state.activeMemory}\n                    memfiles    = { this.state.memfiles}\n                    show        = { this.state.showMemoryModal}\n                    onHideModal = { this.onShowModal}>\n                </MemoryModal>           \n            </div>        \n                    \n                \n            )\n        }else{\n            return (\n                <div> \n                    No memories Found\n                </div>\n            )\n        }   \n    }\n\n\n}\n\n\nexport default CardCollection; \n\n  \n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}