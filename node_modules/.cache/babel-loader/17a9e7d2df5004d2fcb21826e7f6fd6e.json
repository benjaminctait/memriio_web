{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memoryviewer/memoryImageViewer.js\";\nimport React from 'react';\nimport videoPlayImg from '../images/dottedcircleplay.png';\nimport videoStopImg from '../images/dottedcircleStop.png';\nimport Hls from 'hls.js'; //import ReactPlayer from 'react-player';\n\nimport './memoryImageViewer.css';\n\nclass MemoryFileViewer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videoPlaying: false,\n      fileType: 'empty',\n      // 'image' or 'video' or 'audio' or 'specific' or 'empty'\n      videoLoaded: false\n    };\n\n    this.handleClick = () => {\n      console.log('image clicked');\n    };\n\n    this.stopVideo = () => {\n      this.setState({\n        videoPlaying: false\n      });\n    };\n\n    this.playVideo = () => {\n      this.setState({\n        videoPlaying: true\n      });\n    };\n\n    this.determineFileCategory = memfile => {\n      if (memfile) {\n        if (this.isVideo(memfile.fileext)) {\n          return 'video';\n        } else {\n          if (this.isImage(memfile.fileext)) {\n            return 'image';\n          } else {\n            if (this.isAudio(memfile.fileext)) {\n              return 'audio';\n            } else {\n              return 'specific';\n            }\n          }\n        }\n      } else {\n        return 'empty';\n      }\n    };\n\n    this.isImage = fileExtension => {\n      let ext = fileExtension.toLowerCase();\n      let filetypes = ['jpeg', 'jpg', 'png'];\n      let found = filetypes.indexOf(ext);\n      return !(found === -1);\n    };\n\n    this.isVideo = fileExtension => {\n      let ext = fileExtension.toLowerCase();\n      let filetypes = ['mp4', 'mov', 'm3u8'];\n      let found = filetypes.indexOf(fileExtension);\n      return !(found === -1);\n    };\n\n    this.isAudio = fileExtension => {\n      let ext = fileExtension.toLowerCase();\n      let filetypes = ['m4a', 'wav'];\n      let found = filetypes.indexOf(fileExtension);\n      return !(found === -1);\n    };\n\n    this.renderControls = () => {\n      if (this.props.memfile) {\n        if (this.state.fileType === 'video') {\n          if (this.state.videoPlaying) {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"buttonPosition\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"img\", {\n              alt: \"Play\",\n              src: videoStopImg,\n              className: 'card-playBtn',\n              onClick: this.stopVideo,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 25\n              }\n            }));\n          } else {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"buttonPosition\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"img\", {\n              alt: \"Play\",\n              src: videoPlayImg,\n              className: 'card-playBtn',\n              onClick: this.playVideo,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 25\n              }\n            }));\n          }\n        }\n      }\n    };\n\n    this.renderOriginalFile = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      });\n    };\n\n    this.renderImageThumb = () => {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"memory\",\n        src: this.props.memfile.thumburl,\n        className: this.props.thumbStyleClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }\n      });\n    };\n\n    this.handleVideoReady = () => {\n      console.log('video loaded');\n    };\n\n    this.renderVideo = () => {\n      console.log('rendervideo : ' + JSON.stringify(this.props.memfile.thumburl));\n      return /*#__PURE__*/React.createElement(\"video\", {\n        className: \"videoCanvas\",\n        ref: player => this.player = player,\n        autoPlay: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      });\n    };\n  }\n\n  //-----------------------------------------------------------------------------\n  componentDidUpdate() {\n    const video = this.player;\n    const hls = new Hls();\n    const url = 'https://memriiostorage.s3.amazonaws.com/1-150-1596928099992-0-stream/hls_master.m3u8';\n    hls.loadSource(url);\n    hls.attachMedia(video);\n    hls.on(Hls.Events.MANIFEST_PARSED, function () {\n      video.play();\n    });\n  } //-----------------------------------------------------------------------------\n\n\n  //-----------------------------------------------------------------------------\n  render() {\n    const {\n      memfile,\n      alternateRenderer\n    } = this.props;\n    this.state.fileType = this.determineFileCategory(memfile);\n    let visibleContent = null;\n    const controls = this.renderControls();\n    const thumb = memfile ? memfile.thumburl : null;\n\n    if (alternateRenderer) {\n      return alternateRenderer();\n    } else {\n      if (this.state.fileType === 'image') {\n        console.log('FILEVIEWER file is image');\n        visibleContent = this.renderImageThumb();\n      } else if (this.state.fileType === 'video') {\n        console.log('FILEVIEWER file is video');\n        visibleContent = this.renderVideo();\n      } else {\n        visibleContent = null;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"xover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      }, visibleContent, controls);\n    }\n  }\n\n}\n\n; //-----------------------------------------------------------------------------\n\nexport default MemoryFileViewer;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memoryviewer/memoryImageViewer.js"],"names":["React","videoPlayImg","videoStopImg","Hls","MemoryFileViewer","Component","state","videoPlaying","fileType","videoLoaded","handleClick","console","log","stopVideo","setState","playVideo","determineFileCategory","memfile","isVideo","fileext","isImage","isAudio","fileExtension","ext","toLowerCase","filetypes","found","indexOf","renderControls","props","renderOriginalFile","renderImageThumb","thumburl","thumbStyleClass","handleVideoReady","renderVideo","JSON","stringify","player","componentDidUpdate","video","hls","url","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","render","alternateRenderer","visibleContent","controls","thumb"],"mappings":"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","sourcesContent":["import React from 'react';\nimport videoPlayImg from '../images/dottedcircleplay.png'\nimport videoStopImg from '../images/dottedcircleStop.png'\nimport Hls from 'hls.js'\n//import ReactPlayer from 'react-player';\nimport './memoryImageViewer.css';\n\n\nclass MemoryFileViewer extends React.Component{\n\n    state = {\n        videoPlaying:false,\n        fileType:'empty',        // 'image' or 'video' or 'audio' or 'specific' or 'empty'\n        videoLoaded:false,\n\n    }\n\n\n//-----------------------------------------------------------------------------\n\ncomponentDidUpdate() {\n    const video = this.player;\n    const hls = new Hls();\n    const url = 'https://memriiostorage.s3.amazonaws.com/1-150-1596928099992-0-stream/hls_master.m3u8'\n\n    hls.loadSource(url);\n    hls.attachMedia(video);\n    hls.on(Hls.Events.MANIFEST_PARSED, function() { video.play(); });\n}\n\n//-----------------------------------------------------------------------------\n\nhandleClick = () =>{\n    console.log('image clicked')\n    \n}\n\nstopVideo = () => {\n    this.setState({videoPlaying:false})\n    \n}\n//-----------------------------------------------------------------------------\nplayVideo = () => {\n    this.setState({videoPlaying:true})\n}\n\n//-----------------------------------------------------------------------------\n\ndetermineFileCategory = (memfile) => {\n\n    if(memfile){\n        if(this.isVideo(memfile.fileext)){\n            return 'video'\n        }else{\n            if(this.isImage(memfile.fileext)){\n                return 'image'\n            }else{\n                if(this.isAudio(memfile.fileext)){\n                    return 'audio'\n                }else{\n                    return 'specific'\n                }\n            }\n        }\n    }else{\n        return 'empty'\n    }\n}\n\n//-----------------------------------------------------------------------------\n\nisImage= (fileExtension) =>{\n    let ext = fileExtension.toLowerCase()\n    let filetypes = ['jpeg','jpg','png']\n    let found = filetypes.indexOf(ext)\n    return !(found === -1)    \n}\n\n//-----------------------------------------------------------------------------\n\nisVideo= (fileExtension) =>{\n\n    let ext = fileExtension.toLowerCase()\n    let filetypes = ['mp4','mov','m3u8']\n    let found = filetypes.indexOf(fileExtension)\n    return !(found === -1)    \n}\n//-----------------------------------------------------------------------------\n\nisAudio= (fileExtension) =>{\n\n    let ext = fileExtension.toLowerCase()\n    let filetypes = ['m4a','wav']\n    let found = filetypes.indexOf(fileExtension)\n    return !(found === -1)    \n}\n//-----------------------------------------------------------------------------\n\nrenderControls = () => {\n    if(this.props.memfile)\n    {\n        if(this.state.fileType === 'video')\n        {\n            if(this.state.videoPlaying)\n            {\n                return(\n                    <div className='buttonPosition'>\n                        <img \n                            alt=        'Play'\n                            src=        { videoStopImg} \n                            className=  { 'card-playBtn' }\n                            onClick =   { this.stopVideo }\n                        />  \n                    </div>\n                )\n\n            }else{\n                return(\n                    <div className='buttonPosition'>\n                        <img \n                            alt=        'Play'\n                            src=        { videoPlayImg} \n                            className=  { 'card-playBtn' }\n                            onClick =   { this.playVideo }\n                        />  \n                    </div>\n                )\n            }\n            \n        }\n    }\n}\n\n//-----------------------------------------------------------------------------\n\nrenderOriginalFile = () => {\n    return(\n\n        <div className=''>\n            \n        </div>\n    )\n}\n//-----------------------------------------------------------------------------\n\nrenderImageThumb = () => {\n    return (\n        \n            <img \n                alt=         'memory'\n                src=        { this.props.memfile.thumburl } \n                className=  { this.props.thumbStyleClass }\n            />  \n           \n   \n    )\n}\nhandleVideoReady = () => {\n    console.log('video loaded');\n}\n//-----------------------------------------------------------------------------\n\nrenderVideo = () =>{\n    console.log('rendervideo : ' + JSON.stringify(this.props.memfile.thumburl));\n\n    return (\n        <video\n          className=\"videoCanvas\"\n          ref={player => (this.player = player)}\n          autoPlay={true}\n        />\n  )\n}\n\n//-----------------------------------------------------------------------------\n\nrender(){\n    const {memfile,alternateRenderer} = this.props\n    this.state.fileType = this.determineFileCategory(memfile)\n    let visibleContent = null\n\n    const controls = this.renderControls()\n    const thumb = memfile? memfile.thumburl : null        \n\n    if(alternateRenderer) { \n        return ( alternateRenderer() )\n    } else {\n        if(this.state.fileType === 'image') {\n            console.log('FILEVIEWER file is image');\n            visibleContent = this.renderImageThumb()}\n        else if (this.state.fileType === 'video'){\n            console.log('FILEVIEWER file is video');\n            visibleContent = this.renderVideo() \n        }else{\n            visibleContent = null\n        }\n    \n        return (\n            <div className='xover'>\n                {visibleContent}\n                {controls}\n            </div>\n        )\n        \n    }\n}\n\n};\n\n//-----------------------------------------------------------------------------\n\nexport default MemoryFileViewer\n\n"]},"metadata":{},"sourceType":"module"}