{"ast":null,"code":"var makeString = require('./helper/makeString');\n\nfunction getIndent(str) {\n  var matches = str.match(/^[\\s\\\\t]*/gm);\n  var indent = matches[0].length;\n\n  for (var i = 1; i < matches.length; i++) {\n    indent = Math.min(matches[i].length, indent);\n  }\n\n  return indent;\n}\n\nmodule.exports = function dedent(str, pattern) {\n  str = makeString(str);\n  var indent = getIndent(str);\n  var reg;\n  if (indent === 0) return str;\n\n  if (typeof pattern === 'string') {\n    reg = new RegExp('^' + pattern, 'gm');\n  } else {\n    reg = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  }\n\n  return str.replace(reg, '');\n};","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/node_modules/underscore.string/dedent.js"],"names":["makeString","require","getIndent","str","matches","match","indent","length","i","Math","min","module","exports","dedent","pattern","reg","RegExp","replace"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,MAAIC,OAAO,GAAGD,GAAG,CAACE,KAAJ,CAAU,aAAV,CAAd;AACA,MAAIC,MAAM,GAAGF,OAAO,CAAC,CAAD,CAAP,CAAWG,MAAxB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACG,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvCF,IAAAA,MAAM,GAAGG,IAAI,CAACC,GAAL,CAASN,OAAO,CAACI,CAAD,CAAP,CAAWD,MAApB,EAA4BD,MAA5B,CAAT;AACD;;AAED,SAAOA,MAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBV,GAAhB,EAAqBW,OAArB,EAA8B;AAC7CX,EAAAA,GAAG,GAAGH,UAAU,CAACG,GAAD,CAAhB;AACA,MAAIG,MAAM,GAAGJ,SAAS,CAACC,GAAD,CAAtB;AACA,MAAIY,GAAJ;AAEA,MAAIT,MAAM,KAAK,CAAf,EAAkB,OAAOH,GAAP;;AAElB,MAAI,OAAOW,OAAP,KAAmB,QAAvB,EAAiC;AAC/BC,IAAAA,GAAG,GAAG,IAAIC,MAAJ,CAAW,MAAMF,OAAjB,EAA0B,IAA1B,CAAN;AACD,GAFD,MAEO;AACLC,IAAAA,GAAG,GAAG,IAAIC,MAAJ,CAAW,aAAaV,MAAb,GAAsB,GAAjC,EAAsC,IAAtC,CAAN;AACD;;AAED,SAAOH,GAAG,CAACc,OAAJ,CAAYF,GAAZ,EAAiB,EAAjB,CAAP;AACD,CAdD","sourcesContent":["var makeString = require('./helper/makeString');\n\nfunction getIndent(str) {\n  var matches = str.match(/^[\\s\\\\t]*/gm);\n  var indent = matches[0].length;\n  \n  for (var i = 1; i < matches.length; i++) {\n    indent = Math.min(matches[i].length, indent);\n  }\n\n  return indent;\n}\n\nmodule.exports = function dedent(str, pattern) {\n  str = makeString(str);\n  var indent = getIndent(str);\n  var reg;\n\n  if (indent === 0) return str;\n\n  if (typeof pattern === 'string') {\n    reg = new RegExp('^' + pattern, 'gm');\n  } else {\n    reg = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  }\n\n  return str.replace(reg, '');\n};\n"]},"metadata":{},"sourceType":"script"}