{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport greycross from '../images/x-grey.png';\nimport tick from '../images/tick.png';\nimport tag from '../images/tag.png';\nimport globe from '../images/outline-globe.png';\nimport calendar from '../images/calendar.png';\nimport key from '../images/key.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport edit from '../images/edit.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport trash from '../images/trash.png';\nimport hero from '../images/hero-full.png';\nimport heroOutline from '../images/hero-outline-grey.png';\nimport cloudIMG from '../images/cloud.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport { format } from \"date-fns\";\nimport * as mem from '../memriioserver';\nimport * as DropSearch from '../dropsearch/dropsearch';\nimport WordExctractor from 'keyword-extractor';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport './memorymodal.css';\nimport { CheckBox, SubTag, ImageLabel } from '../buttons/buttons';\n\nclass MemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null,\n      author: null,\n      memfileIndex: 0,\n      editMode: false\n    };\n\n    this.onHide = () => {\n      this.state.editMode = false;\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          mem.getUser(this.props.memory.userid, author => {\n            this.setState({\n              author: author\n            });\n            console.log('Author + ' + JSON.stringify(author));\n          });\n          mem.getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          mem.getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          mem.getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      this.state.memfileIndex = 0;\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map((memfile, index) => {\n        if (memfile.ishero) {\n          this.state.memfileIndex = index;\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      mem.getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n        console.log('populate_cloud_info');\n        console.log(mem.stry(people));\n      });\n    };\n\n    this.toggleEditMode = () => {\n      this.setState({\n        editMode: !this.state.editMode\n      });\n    };\n\n    this.userIsAuthorisedToEdit = () => {\n      return true;\n    };\n\n    this.deleteFileFromMemory = () => {\n      console.log('delte file from memroy');\n    };\n\n    this.makeHeroFile = () => {\n      console.log('make hero file');\n    };\n\n    this.handleDeleteTaggedPerson = Person => {\n      console.log('delete tagged person called ' + JSON.stringify(Person));\n    };\n\n    this.handleAddTaggedPerson = () => {\n      console.log('add tagged person');\n    };\n\n    this.handleRemoveFromCloud = Cloud => {\n      console.log('delete cloud called ' + JSON.stringify(Cloud));\n    };\n\n    this.handleAddCloud = () => {\n      console.log('add cloud');\n    };\n\n    this.activeFileisHero = () => {\n      var afile = this.state.activefile;\n\n      if (afile) {\n        if (afile.ishero) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    this.renderMemoryContent = () => {\n      const imageZone = this.renderImageZone();\n      const storyZone = this.renderStoryZone();\n      const detailsZone = this.renderDetailsZone();\n\n      if (this.state.activefile) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalrow\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 9\n          }\n        }, imageZone, storyZone, detailsZone);\n      } else {\n        return null;\n      }\n    };\n\n    this.handleSearchWordClick = (itemKey, upState) => {\n      const ind = this.state.searchWords.findIndex(item => {\n        return item.id === itemKey;\n      });\n      this.state.searchWords[ind].included = upState;\n      console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]));\n      mem.updateMemword(this.state.searchWords[ind]);\n      this.setState({\n        searchWords: this.state.searchWords\n      });\n    };\n\n    this.renderKeyWords = () => {\n      if (this.state.editMode) {\n        return /*#__PURE__*/React.createElement(Container, {\n          onDrop: e => this.setState({\n            searchWords: this.applyDrag(this.state.searchWords, e)\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 7\n          }\n        }, this.state.searchWords.map((wordItem, idx) => {\n          return /*#__PURE__*/React.createElement(Draggable, {\n            className: \"wordListItem\",\n            key: 'k' + idx,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(CheckBox, {\n            itemKey: wordItem.id,\n            onClick: this.handleSearchWordClick,\n            upState: wordItem.included,\n            downImg: greycross,\n            upImg: tick,\n            label: wordItem.keyword,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }\n          }));\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 9\n          }\n        }, this.state.searchWords.map((wordItem, idx) => {\n          if (wordItem.included) {\n            return /*#__PURE__*/React.createElement(\"li\", {\n              className: \"wordListItem\",\n              key: 'k' + idx,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }\n            }, /*#__PURE__*/React.createElement(ImageLabel, {\n              leftImg: key,\n              label: wordItem.keyword,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 19\n              }\n            }));\n          }\n        }));\n      }\n    };\n\n    this.applyDrag = (arr, dragResult) => {\n      const {\n        removedIndex,\n        addedIndex,\n        payload\n      } = dragResult;\n      if (removedIndex === null && addedIndex === null) return arr;\n      const result = [...arr];\n      let itemToAdd = payload;\n      if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n      if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n      return result;\n    };\n\n    this.renderTaggedPeople = () => {\n      if (this.state.editMode) {\n        const people = this.state.taggedPeople.map(p => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'p' + p.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            data: p,\n            leftImg: tag,\n            badge: x,\n            onBadgeClick: this.handleDeleteTaggedPerson,\n            label: p.firstname + ' ' + p.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }\n          }));\n        });\n\n        if (this.state.author) {\n          people.push( /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'a' + this.state.author.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: author,\n            label: this.state.author.firstname + ' ' + this.state.author.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }\n          })));\n        }\n\n        people.reverse();\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 22\n          }\n        }, \" \", DropSearch.peopleDropSearch(this.state.cloudPeople), \" \"));\n        return people;\n      } else {\n        const people = this.state.taggedPeople.map(p => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 't' + p.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: tag,\n            label: p.firstname + ' ' + p.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 36\n            }\n          }));\n        });\n\n        if (this.state.author) {\n          people.push( /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'a' + this.state.author.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: author,\n            label: this.state.author.firstname + ' ' + this.state.author.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }\n          })));\n        }\n\n        people.reverse();\n        return people;\n      }\n    };\n\n    this.renderDetails = () => {\n      var fdate = new Date(this.props.memory.createdon);\n      var formattedDate = format(fdate, 'dd.MMM.yyyy');\n      const details = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'location',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        leftImg: globe,\n        label: this.props.memory.location,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 26\n        }\n      })), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'sss',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        leftImg: calendar,\n        label: formattedDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }\n      })));\n      return details;\n    };\n\n    this.renderClouds = () => {\n      if (this.state.editMode) {\n        const clouds = this.state.memoryClouds.map(cloud => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'cloud' + cloud.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            data: cloud,\n            badge: x,\n            onBadgeClick: this.handleRemoveFromCloud,\n            leftImg: cloudIMG,\n            label: cloud.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 40\n            }\n          }));\n        });\n        clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'cloudPersonal',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: cloudIMG,\n          label: 'Personal',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 35\n          }\n        })));\n        clouds.reverse();\n        clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'cloudAdd',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: cloudIMG,\n          label: '+ Cloud',\n          onClick: this.handleAddCloud,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 30\n          }\n        })));\n        return clouds;\n      } else {\n        const clouds = this.state.memoryClouds.map(cloud => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'cloud' + cloud.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: cloudIMG,\n            label: cloud.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 40\n            }\n          }));\n        });\n        clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'cloudPersonal',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: cloudIMG,\n          label: 'Personal',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 35\n          }\n        })));\n        clouds.reverse();\n        return clouds;\n      }\n    };\n\n    this.renderImageZone = () => {\n      let editControls = null;\n\n      if (this.state.editMode) {\n        var heroImg = this.activeFileisHero() ? hero : heroOutline;\n        editControls = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imageEditConrols\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: trash,\n          onClick: this.deleteFileFromMemory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: heroImg,\n          onClick: this.makeHeroFile,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 7\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imgcolumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n        memfile: this.state.activefile,\n        thumbStyleClass: 'memoryModalImage',\n        fileStyleClass: 'memoryModalImage',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 7\n        }\n      }), editControls);\n    };\n\n    this.onTitleBlur = e => {\n      const newTitle = e.target.value;\n\n      if (newTitle !== this.props.memory.title) {\n        this.props.memory.title = newTitle;\n        mem.updateTitle(this.props.memory.memid, newTitle);\n      }\n    };\n\n    this.onDescriptionBlur = e => {\n      const newDescription = e.target.value;\n\n      if (newDescription !== this.props.memory.description) {\n        this.props.memory.description = newDescription;\n        mem.updateDescription(this.props.memory.memid, newDescription);\n      }\n    };\n\n    this.onStoryBlur = e => {\n      const newStory = e.target.value;\n\n      if (newStory !== this.props.memory.story) {\n        console.log('updated story ');\n        this.props.memory.story = newStory;\n        mem.updateStory(this.props.memory.memid, newStory);\n        mem.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n      }\n    };\n\n    this.handleStoryChange = event => {\n      let addarray = this.state.searchWords;\n      let addarray2 = [];\n      let story = event.target.value;\n      let words = WordExctractor.extract(story, {\n        language: \"english\",\n        remove_digits: true,\n        return_changed_case: true,\n        remove_duplicates: true\n      }); // add any new words that exist in the story\n\n      words.map(word => {\n        if (!this.searchWordExists(word)) {\n          addarray.push({\n            included: true,\n            keyword: word,\n            strength: 0\n          });\n        }\n      }); // remove any search words that now longer exist in the story\n\n      addarray.map(w => {\n        if (words.find(word => w.keyword === word) !== undefined) {\n          addarray2.push({\n            included: w.included,\n            keyword: w.keyword,\n            strength: w.strength\n          });\n        }\n      });\n      this.setState({\n        searchWords: addarray2,\n        story: story\n      });\n    };\n\n    this.searchWordExists = word => {\n      return this.state.searchWords.find(wordItem => word === wordItem.keyword);\n    };\n\n    this.renderStoryZone = () => {\n      const mem = this.props.memory;\n\n      if (this.state.editMode) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onTitleBlur,\n          className: \"input-reset titleEdit\",\n          type: \"text\",\n          defaultValue: mem.title,\n          placeholder: \"Title\",\n          id: \"title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onDescriptionBlur,\n          className: \"input-reset descriptionEdit\",\n          type: \"text\",\n          defaultValue: mem.description,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"textarea\", {\n          onBlur: this.onStoryBlur,\n          className: \"input-reset storyEdit\",\n          onChange: this.handleStoryChange,\n          type: \"text\",\n          defaultValue: mem.story,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 9\n          }\n        }, mem.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy i measure mt2 mid-gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 9\n          }\n        }, mem.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy measure mt2 black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 9\n          }\n        }, \" \", mem.story, \" \"));\n      }\n    };\n\n    this.renderCornerControls = () => {\n      let editBtn = null;\n\n      if (this.userIsAuthorisedToEdit()) {\n        editBtn = /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: edit,\n          onClick: this.toggleEditMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 7\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: x,\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 7\n        }\n      }), editBtn);\n    };\n\n    this.renderDetailsZone = () => {\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n      const clouds = this.renderClouds();\n      const cornerCtrls = this.renderCornerControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detailsColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 7\n        }\n      }, \"Tags \"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"keyWordList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 7\n        }\n      }, \" \", keywords, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 7\n        }\n      }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"peopleList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 7\n        }\n      }, people), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 7\n        }\n      }, \"Clouds\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"cloudList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 7\n        }\n      }, \" \", clouds, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 7\n        }\n      }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"detailsList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 7\n        }\n      }, \" \", details, \" \"), cornerCtrls);\n    };\n\n    this.handleDropfiles = async acceptedFiles => {\n      const reader = new FileReader();\n      acceptedFiles.forEach(file => {\n        reader.onload = () => {\n          console.log('onload ' + file.name);\n\n          if (mem.canHandleDroppedFile(file.name)) {\n            this.prepAndUploadFile(file);\n          } else {\n            alert('File type ' + mem.getExtension(file.name) + ' not yet implemented');\n          }\n        };\n\n        reader.readAsArrayBuffer(file);\n      });\n    };\n\n    this.prepAndUploadFile = file => {\n      let commonfileName = this.state.author.userid + '-' + Date.now();\n      let ext = mem.getExtension(file.name);\n      let fname = commonfileName + '-original' + '.' + ext;\n      let tname = commonfileName + '-thumb' + '.' + ext;\n      let filebuffer = null;\n      let newMemfiles = this.state.memfiles;\n      let memfile = {\n        id: 0,\n        memid: this.props.memory.memid,\n        fileurl: '',\n        ishero: false,\n        fileext: ext,\n        thumburl: '',\n        thumbext: ext\n      };\n      mem.compressImage(file, 0.9).then(result => {\n        if (result.success) {\n          filebuffer = result.data;\n          mem.resizeImage(filebuffer, 1500).then(result => {\n            if (result.success) {\n              mem.uploadFile(tname, result.data).then(result => {\n                if (result.success) {\n                  memfile.thumburl = result.awsurl;\n                  newMemfiles.push(memfile);\n                  this.setState({\n                    memfiles: newMemfiles\n                  });\n                  mem.uploadFile(fname, filebuffer).then(result => {\n                    if (result.success) {\n                      let last = this.state.memfiles.length - 1;\n                      this.state.memfiles[last].fileurl = result.awsurl;\n                      mem.addFileToMemory({\n                        originalURL: this.state.memfiles[last].fileurl,\n                        thumbURL: this.state.memfiles[last].thumburl\n                      }, false, this.props.memory.memid).then(result => {\n                        if (result.success) {\n                          console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.renderCarouselControls = () => {\n      const mem = this.props.memory;\n      const mfiles = this.state.memfiles;\n      let thumbs = null;\n\n      if (mfiles) {\n        thumbs = mfiles.map((mfile, index) => {\n          return /*#__PURE__*/React.createElement(\"img\", {\n            key: 'thumb' + index,\n            className: \"thumb\",\n            src: mfile.thumburl,\n            onClick: index => {},\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 14\n            }\n          });\n        });\n      }\n\n      if (!this.state.editMode && mfiles) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controlbox\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: left,\n          onClick: this.goBack,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"thumbArray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 11\n          }\n        }, thumbs), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: right,\n          onClick: this.goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 11\n          }\n        }));\n      } else if (this.state.editMode && mfiles) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controlbox\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: left,\n          onClick: this.goBack,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(Dropzone, {\n          onDrop: acceptedFiles => this.handleDropfiles(acceptedFiles),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 11\n          }\n        }, ({\n          getRootProps,\n          getInputProps\n        }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          className: \"thumbArrayEdit\"\n        }, getRootProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 17\n          }\n        }), thumbs)), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: right,\n          onClick: this.goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return null;\n      }\n    };\n\n    this.goBack = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === 0) {\n          this.state.memfileIndex = ubound;\n        } else {\n          this.state.memfileIndex--;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.goForward = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === ubound) {\n          this.state.memfileIndex = 0;\n        } else {\n          this.state.memfileIndex++;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      let memoryContent = this.renderMemoryContent();\n      let carouselControls = this.renderCarouselControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }\n      }, memoryContent, carouselControls, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      })));\n    } else {\n      return null;\n    }\n  } //-------------------------------------------------------------------------------\n\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","greycross","tick","tag","globe","calendar","key","author","x","edit","left","right","trash","hero","heroOutline","cloudIMG","MemoryFileViewer","format","mem","DropSearch","WordExctractor","Container","Draggable","Dropzone","useDropzone","CheckBox","SubTag","ImageLabel","MemoryModal","Component","state","memory","taggedPeople","memoryClouds","searchWords","memfiles","cloudPeople","userClouds","activefile","memfileIndex","editMode","onHide","props","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","getUser","userid","setState","console","log","JSON","stringify","getTaggedPeople","people","getMemoryClouds","clouds","populateCloudInfo","getMemorySearchWords","words","populateSearchWords","getHeroFile","map","memfile","index","ishero","getCloudPeople","stry","toggleEditMode","userIsAuthorisedToEdit","deleteFileFromMemory","makeHeroFile","handleDeleteTaggedPerson","Person","handleAddTaggedPerson","handleRemoveFromCloud","Cloud","handleAddCloud","activeFileisHero","afile","renderMemoryContent","imageZone","renderImageZone","storyZone","renderStoryZone","detailsZone","renderDetailsZone","handleSearchWordClick","itemKey","upState","ind","findIndex","item","id","included","updateMemword","renderKeyWords","e","applyDrag","wordItem","idx","keyword","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","renderTaggedPeople","p","firstname","lastname","push","reverse","peopleDropSearch","renderDetails","fdate","Date","createdon","formattedDate","details","location","renderClouds","cloud","name","editControls","heroImg","onTitleBlur","newTitle","target","value","title","updateTitle","onDescriptionBlur","newDescription","description","updateDescription","onStoryBlur","newStory","story","updateStory","setMemorySearchWords","handleStoryChange","event","addarray","addarray2","extract","language","remove_digits","return_changed_case","remove_duplicates","word","searchWordExists","strength","w","find","undefined","renderCornerControls","editBtn","keywords","cornerCtrls","handleDropfiles","acceptedFiles","reader","FileReader","forEach","file","onload","canHandleDroppedFile","prepAndUploadFile","alert","getExtension","readAsArrayBuffer","commonfileName","now","ext","fname","tname","filebuffer","newMemfiles","fileurl","fileext","thumburl","thumbext","compressImage","then","success","data","resizeImage","uploadFile","awsurl","last","length","addFileToMemory","originalURL","thumbURL","renderCarouselControls","mfiles","thumbs","mfile","goBack","goForward","getRootProps","getInputProps","ubound","render","show","memoryContent","carouselControls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport greycross from '../images/x-grey.png'\nimport tick from '../images/tick.png'\nimport tag from '../images/tag.png'\nimport globe from '../images/outline-globe.png'\nimport calendar from '../images/calendar.png'\nimport key from '../images/key.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport edit from '../images/edit.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport trash from '../images/trash.png'\nimport hero from '../images/hero-full.png'\nimport heroOutline from '../images/hero-outline-grey.png'\nimport cloudIMG from '../images/cloud.png'\n\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport { format } from \"date-fns\";\n\nimport * as mem from '../memriioserver'\nimport * as DropSearch from '../dropsearch/dropsearch'\n\nimport WordExctractor from 'keyword-extractor'\nimport { Container, Draggable} from 'react-smooth-dnd'\nimport Dropzone,{useDropzone} from 'react-dropzone'\n\nimport './memorymodal.css'\n\nimport {CheckBox,SubTag,ImageLabel} from '../buttons/buttons'\n\nclass MemoryModal extends React.Component{\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[],         \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null,\n        author:null,\n        memfileIndex:0,\n        editMode:false,\n       \n    }\n   \n\n  onHide = () =>{\n    this.state.editMode = false\n    this.props.onHideModal(this.props.memory)\n  }\n\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n        \n        this.populateMemoryFiles(this.props.memfiles)\n        mem.getUser              (this.props.memory.userid,(author => {\n                                                              this.setState({author:author})\n                                                              console.log('Author + ' + JSON.stringify(author))\n                                                          }))\n        mem.getTaggedPeople      (this.props.memory.memid,((people)=>{this.setState({taggedPeople:people})}))\n        mem.getMemoryClouds      (this.props.memory.memid,((clouds)=>{this.populateCloudInfo(clouds)}))\n        mem.getMemorySearchWords (this.props.memory.memid,((words =>{this.populateSearchWords(words)})))\n        \n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    this.state.memfileIndex=0\n    let hero = this.state.memfiles[0]\n\n    this.state.memfiles.map((memfile,index)=> {\n\n        if(memfile.ishero){         \n            this.state.memfileIndex = index            \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n    this.setState({memoryClouds:clouds})\n    mem.getCloudPeople (clouds,((people)=>{\n      this.setState({cloudPeople:people})\n      console.log('populate_cloud_info' );\n      console.log(mem.stry(people));\n      \n    }))   \n  }\n\n//------------------------------------------------------------------------\n\n  toggleEditMode =() =>{\n    this.setState({editMode:!this.state.editMode})\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  userIsAuthorisedToEdit = () =>{\n    return true\n  }\n\n  //------------------------------------------------------------------------\n\n  deleteFileFromMemory =() =>{\n    console.log('delte file from memroy');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n\n  makeHeroFile = () =>{\n    console.log('make hero file');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  handleDeleteTaggedPerson = (Person) =>{\n    console.log('delete tagged person called ' + JSON.stringify(Person));\n    \n  }\n\n  handleAddTaggedPerson = () =>{\n    console.log('add tagged person')\n    \n  }\n\n  //------------------------------------------------------------------------\n  //------------------------------------------------------------------------\n\n  handleRemoveFromCloud = ( Cloud ) =>{\n    console.log('delete cloud called ' + JSON.stringify(Cloud));\n  }\n\n  //------------------------------------------------------------------------\n  \n  handleAddCloud = () =>{\n    console.log('add cloud')\n  }\n\n  //------------------------------------------------------------------------\n\n  activeFileisHero =() =>{\n    var afile = this.state.activefile\n    \n    if(afile){\n      if(afile.ishero){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  render(){\n    \n    if(this.props.show){\n      let memoryContent = this.renderMemoryContent()\n      let carouselControls = this.renderCarouselControls()\n      return(\n        <div className= 'backdropStyle'>\n          <div className='modalStyle'>\n            {memoryContent}   \n            {carouselControls}\n            <div>\n              \n            </div>\n          </div>\n        </div>\n      )\n    }else{\n      return null\n    }        \n}\n\n//-------------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    \n  const imageZone   = this.renderImageZone()\n  const storyZone   = this.renderStoryZone()\n  const detailsZone = this.renderDetailsZone()\n  \n  if(this.state.activefile){\n    return (\n        <div className='modalrow'>\n          {imageZone}\n          {storyZone}\n          {detailsZone}\n        </div>\n    )\n  } else {\n    return null\n  }\n  \n}\n\n  \n//------------------------------------------------------------------------\n\nhandleSearchWordClick = (itemKey,upState) =>{\n  \n  const ind = this.state.searchWords.findIndex(item =>{return item.id === itemKey})\n  this.state.searchWords[ind].included = upState\n  console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]))\n  mem.updateMemword(this.state.searchWords[ind])\n  this.setState({searchWords:this.state.searchWords})\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n \n  if(this.state.editMode)\n  {\n    return (\n      <Container  onDrop={e => this.setState({searchWords:this.applyDrag(this.state.searchWords,e)})}>\n      \n        {\n          this.state.searchWords.map((wordItem, idx) => {\n            return (\n              <Draggable className='wordListItem' key={'k'+idx}>\n                <CheckBox \n                  itemKey = {wordItem.id}\n                  onClick = {this.handleSearchWordClick}\n                  upState = {wordItem.included} \n                  downImg = {greycross} \n                  upImg   = {tick} \n                  label   = {wordItem.keyword}\n                />\n              </Draggable> \n            )\n          })\n        }\n      </Container>\n)\n  }else{\n    return (\n      \n        <div>\n        {\n          this.state.searchWords.map((wordItem, idx) => {\n            if(wordItem.included)\n            { \n              return (\n                <li className='wordListItem' key={'k'+idx}>\n                  <ImageLabel leftImg = {key} label = {wordItem.keyword}/>\n                </li> \n              )\n            }\n          })\n        }\n        </div>\n    )\n  }\n}\n\n//------------------------------------------------------------------------\n\napplyDrag = (arr, dragResult) => {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n  if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n  if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n  return result;\n};\n\n//------------------------------------------------------------------------\n\nrenderTaggedPeople =() =>{\n\n  if(this.state.editMode){\n    const people  = this.state.taggedPeople.map(\n      p => {\n          return (\n            <li \n              className='wordListItem'\n              key={'p' + p.userid}>\n                <ImageLabel \n                  data          = { p   }\n                  leftImg       = { tag } \n                  badge         = { x   } \n                  onBadgeClick  = { this.handleDeleteTaggedPerson  }\n                  label         = { p.firstname + ' ' + p.lastname }/>                                                        \n            </li>\n          )\n        })\n        if(this.state.author){\n          people.push(      \n            <li \n              className='wordListItem'\n              key={'a' + this.state.author.userid}>\n              <ImageLabel \n                leftImg = { author}\n                label =   { this.state.author.firstname + ' ' + this.state.author.lastname}/>\n            </li>\n          ) \n        }\n        people.reverse()   \n        people.push( <li > { DropSearch.peopleDropSearch(this.state.cloudPeople) } </li>)\n        \n        return people\n  }else{\n    const people  = this.state.taggedPeople.map(\n      p => {\n          return (\n            <li \n              className='wordListItem'\n              key={'t' + p.userid}><ImageLabel leftImg = {tag} label = {p.firstname+' '+p.lastname}/>                                                        \n            </li>\n          )\n        })\n        if(this.state.author){\n          people.push(      \n            <li \n              className='wordListItem'\n              key={'a' + this.state.author.userid}>\n              <ImageLabel \n                leftImg = {author}\n                label = {this.state.author.firstname + ' ' + this.state.author.lastname}/>\n            </li>\n          ) \n        }\n        people.reverse()   \n    return people\n  }\n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  var fdate = new Date(this.props.memory.createdon)\n  var formattedDate = format(fdate,'dd.MMM.yyyy')\n\n  const details = \n    <div>\n      <li \n        className='wordListItem'\n        key={'location'}><ImageLabel leftImg = {globe} label = {this.props.memory.location}/>\n      </li>\n      <li \n        className='wordListItem'\n        key={'sss'}><ImageLabel leftImg = {calendar} label = {formattedDate}/>\n      </li>\n    </div>\n  return details\n}\n\n//------------------------------------------------------------------------\n\nrenderClouds =() => {\n  \n  if(this.state.editMode){\n    const clouds  = this.state.memoryClouds.map(\n      cloud => {\n          return (\n            <li \n              className='wordListItem'\n              key={'cloud' + cloud.id}><ImageLabel \n                data          = { cloud }\n                badge         = { x   } \n                onBadgeClick  = { this.handleRemoveFromCloud  }\n                leftImg = {cloudIMG} \n                label = {cloud.name}/>                            \n            </li>\n          )\n        })\n        clouds.push(      \n          <li \n            className='wordListItem'\n            key={'cloudPersonal'}><ImageLabel leftImg = {cloudIMG} label = {'Personal'}/>                                                        \n          </li>\n        ) \n        clouds.reverse()\n        clouds.push(      \n          <li \n            className='wordListItem'\n            key={'cloudAdd'}><ImageLabel \n              leftImg = {cloudIMG} \n              label = {'+ Cloud'}\n              onClick = {this.handleAddCloud}\n              />                                                        \n          </li>\n        ) \n        return clouds\n  }else{\n    const clouds  = this.state.memoryClouds.map(\n      cloud => {\n          return (\n            <li \n              className='wordListItem'\n              key={'cloud' + cloud.id}><ImageLabel leftImg = {cloudIMG} label = {cloud.name}/>                                                        \n            </li>\n          )\n        })\n        clouds.push(      \n          <li \n            className='wordListItem'\n            key={'cloudPersonal'}><ImageLabel leftImg = {cloudIMG} label = {'Personal'}/>                                                        \n          </li>\n        ) \n        clouds.reverse()\n        return clouds\n  }\n  \n\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderImageZone =()=>{\n  let editControls=null\n\n  if(this.state.editMode){\n    var heroImg = this.activeFileisHero() ? hero : heroOutline;\n\n    editControls = \n    <div className = 'imageEditConrols' >\n      <img  \n        className='closeBtn'\n        src = {trash}\n        onClick={this.deleteFileFromMemory} \n        />\n      <img  \n        className='closeBtn'\n        src = {heroImg}\n        onClick = {this.makeHeroFile}\n       />\n    </div>\n  }\n\n  return (\n    <div className='imgcolumn'>\n      <MemoryFileViewer \n        memfile={this.state.activefile}\n        thumbStyleClass={'memoryModalImage'}\n        fileStyleClass={'memoryModalImage'}\n      />\n      {editControls}\n    </div>\n  )\n}\n\nonTitleBlur = (e) => {\n  const newTitle = e.target.value\n  if(newTitle !== this.props.memory.title){\n    this.props.memory.title = newTitle\n    mem.updateTitle(this.props.memory.memid,newTitle)\n\n  }  \n}\n//------------------------------------------------------------------------\n\nonDescriptionBlur = (e) => {\n  const newDescription = e.target.value\n  if(newDescription !== this.props.memory.description){\n    this.props.memory.description = newDescription\n    mem.updateDescription(this.props.memory.memid,newDescription)\n  }  \n}\n//------------------------------------------------------------------------\n\nonStoryBlur = (e) => {\n  const newStory = e.target.value\n  if(newStory !== this.props.memory.story){\n    console.log('updated story ');    \n    this.props.memory.story = newStory\n    mem.updateStory(this.props.memory.memid,newStory)    \n    mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n  }  \n}\n\n//------------------------------------------------------------------------\n\nhandleStoryChange = (event) =>{\n  let addarray = this.state.searchWords\n  let addarray2 = []\n  let story = event.target.value\n  let words = WordExctractor.extract(story,\n                                      {\n                                          language:\"english\",\n                                          remove_digits: true,\n                                          return_changed_case:true,\n                                          remove_duplicates: true\n                                      });\n    \n  // add any new words that exist in the story\n  words.map(word =>{\n      if(!this.searchWordExists(word)){\n        addarray.push({included:true,keyword:word,strength:0})       \n      }      \n  })\n\n  // remove any search words that now longer exist in the story\n  addarray.map(w =>{    \n    if(words.find(word => w.keyword === word) !== undefined){      \n      addarray2.push({included:w.included,keyword:w.keyword,strength:w.strength})\n    }   \n})\n  this.setState({searchWords:addarray2,story:story})  \n}\n\n//------------------------------------------------------------------------\n\nsearchWordExists = (word) => {\n  return this.state.searchWords.find(wordItem => word === wordItem.keyword)    \n}\n\n//------------------------------------------------------------------------\n\nrenderStoryZone = () =>{\n  const mem = this.props.memory\n  if(this.state.editMode)\n  {\n    return (\n      <div className = 'infoColumn'>\n        <input \n            onBlur = {this.onTitleBlur} className='input-reset titleEdit' \n            type=\"text\"  defaultValue = {mem.title} placeholder='Title' id=\"title\" />\n        <input \n            onBlur = {this.onDescriptionBlur} className='input-reset descriptionEdit' \n            type=\"text\"  defaultValue = {mem.description} placeholder='Description' id=\"description\" />\n        <textarea\n            onBlur   = {this.onStoryBlur} className='input-reset storyEdit' onChange = {this.handleStoryChange} \n            type=\"text\"  defaultValue = {mem.story} placeholder='Description' id=\"description\" /> \n      </div>  \n    )\n  }else{\n    return (\n      <div className = 'infoColumn'>\n        <h4>{mem.title} </h4>\n        <p className=\"f6 lh-copy i measure mt2 mid-gray\">{mem.description}</p>\n        <p className=\"f6 lh-copy measure mt2 black\"> { mem.story } </p>\n      </div>  \n    )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderCornerControls =() =>{\n  let editBtn = null\n  if(this.userIsAuthorisedToEdit()){\n    editBtn=\n      <img  \n      className='closeBtn'                   \n      src = {edit}\n      onClick={this.toggleEditMode} />\n  }\n  return (\n    <div className='footer'>                        \n      <img  \n        className='closeBtn'                   \n        src = {x}\n        onClick={this.onHide} />\n        {editBtn}\n\n    </div>\n\n  )\n}\n//------------------------------------------------------------------------\n\n\n\nrenderDetailsZone = () => {\n\n  const keywords     = this.renderKeyWords()\n  const people       = this.renderTaggedPeople()\n  const details      = this.renderDetails()\n  const clouds       = this.renderClouds()\n  const cornerCtrls  = this.renderCornerControls()\n  \n\n  return (\n    <div className = 'detailsColumn'>\n      <h4>Tags </h4>\n      <ul className='keyWordList' > { keywords } </ul>\n      <h4>People</h4>\n      <ul className='peopleList' > \n        { people   }\n      </ul>\n      <h4>Clouds</h4>\n      <ul className='cloudList' > { clouds   } </ul>\n      <h4>Details</h4>\n      <ul className='detailsList' > { details  } </ul>\n      {cornerCtrls}              \n    </div>  \n  )\n}\n\n//------------------------------------------------------------------------\n\nhandleDropfiles = async (acceptedFiles) =>{\n  \n  const reader = new FileReader()\n  acceptedFiles.forEach((file) => {\n    \n    reader.onload = () => {\n      console.log('onload ' + file.name);\n      if(mem.canHandleDroppedFile(file.name)){\n        this.prepAndUploadFile(file)\n      }else{\n        alert('File type ' + mem.getExtension(file.name) + ' not yet implemented' )\n      }\n    }\n\n  reader.readAsArrayBuffer(file) \n\n  })\n}\n      \n\n//------------------------------------------------------------------------\n\nprepAndUploadFile = (file)=>{\n\n  let commonfileName = this.state.author.userid + '-' + Date.now()\n  let ext = mem.getExtension(file.name)\n  let fname = commonfileName + '-original'  + '.' + ext\n  let tname = commonfileName + '-thumb'     + '.' + ext\n  let filebuffer = null\n  let newMemfiles = this.state.memfiles\n  let memfile = {\n    id:0,\n    memid:this.props.memory.memid,\n    fileurl:'',\n    ishero:false,\n    fileext:ext,\n    thumburl:'',\n    thumbext:ext,\n  }\n  \n  mem.compressImage(file,0.9)\n      .then(result =>{\n        if(result.success){\n          filebuffer = result.data\n          mem.resizeImage(filebuffer,1500)\n          .then(result =>{\n            if(result.success){ \n            mem.uploadFile(tname,result.data)\n            .then(result =>{\n              if(result.success){\n                memfile.thumburl = result.awsurl\n                newMemfiles.push(memfile)\n                this.setState({memfiles:newMemfiles})\n                mem.uploadFile(fname,filebuffer)\n                .then(result =>{\n                  if(result.success){\n                    let last = this.state.memfiles.length-1\n                    this.state.memfiles[last].fileurl=result.awsurl\n                    mem.addFileToMemory({\n                        originalURL:this.state.memfiles[last].fileurl,\n                        thumbURL:this.state.memfiles[last].thumburl\n                    },false,this.props.memory.memid)\n                    .then(result => {\n                      if(result.success){\n                        console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n\n                      }\n                    })\n                  }\n                })\n              }\n            })\n            }\n          })\n        }\n        }) \n}\n\n//------------------------------------------------------------------------\n\nrenderCarouselControls = () => {\n\n  const mem = this.props.memory\n  const mfiles = this.state.memfiles\n  let thumbs = null\n  if(mfiles){\n    thumbs = mfiles.map((mfile,index) =>{\n      return(<img key={'thumb'+index} className='thumb' src = {mfile.thumburl} onClick={(index) =>{}}/>)})\n  }\n\n  if(!this.state.editMode && mfiles){\n      return (\n        <div className='controlbox'>\n          <img className='closeBtn' src = {left} onClick={this.goBack} /> \n          <div className='thumbArray'>\n              {thumbs}\n          </div> \n          <img className='closeBtn' src = {right} onClick={this.goForward} /> \n        </div>\n      )\n\n  }else if (this.state.editMode && mfiles) {      \n      return (\n        <div className='controlbox'>\n          <img className='closeBtn' src = {left} onClick={this.goBack} /> \n          <Dropzone onDrop={acceptedFiles => this.handleDropfiles(acceptedFiles)}>\n            {\n              ({getRootProps, getInputProps}) => (              \n                <div className='thumbArrayEdit' {...getRootProps()}>\n                  {thumbs}\n                </div>              \n              )\n            }\n          </Dropzone>\n          <img className='closeBtn' src = {right} onClick={this.goForward} /> \n        </div>\n      )\n    }else{\n      return null\n    }  \n}\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === 0){\n      this.state.memfileIndex = ubound \n    }else{\n      this.state.memfileIndex--\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }\n}\n\ngoForward = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }    \n}\n\n  \n\n};  \n\n\nexport default MemoryModal;\n\n\n"]},"metadata":{},"sourceType":"module"}