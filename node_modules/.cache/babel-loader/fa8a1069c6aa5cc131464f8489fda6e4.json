{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport tick from '../images/checkmark.png';\nimport tag from '../images/tag.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport './memorymodal.css';\nimport { getAllMemoryFiles, getTaggedPeople, getMemoryClouds, getMemorySearchWords, getCloudPeople, getUser } from '../memriioserver';\nimport { CheckBox, SubTag, ImageLabel } from '../buttons/buttons';\n\nclass MemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      keywords: [],\n      // this is temporary   \n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null,\n      author: null\n    };\n\n    this.onHide = () => {\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          getUser(this.props.memory.userid, author => {\n            this.setState({\n              author: author\n            });\n            console.log('Author + ' + JSON.stringify(author));\n          });\n          getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map(memfile => {\n        if (memfile.ishero) {\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.state.keywords = [];\n      words.map(worditem => {\n        this.state.keywords.push(worditem.keyword);\n      });\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.renderMemoryContent = () => {\n      const mem = this.props.memory;\n      const keywords = this.state.keywords.map((word, idx) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'k' + idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(CheckBox, {\n          checkedImg: tick,\n          label: word,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }\n        }));\n      });\n      const people = this.state.taggedPeople.map(p => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: 't' + p.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          img: tag,\n          label: p.firstname + ' ' + p.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 36\n          }\n        }));\n      });\n\n      if (this.state.author) {\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          key: 'a' + this.state.author.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          img: author,\n          label: this.state.author.firstname + ' ' + this.state.author.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }\n        })));\n      }\n\n      people.reverse();\n\n      if (this.state.activefile) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalrow\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imgcolumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          alt: \"memory\",\n          src: this.state.activefile.thumburl,\n          className: \"imgStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }\n        }, mem.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy i measure mt2 mid-gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }\n        }, mem.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy measure mt2 black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }\n        }, \" \", mem.story, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"detailsColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }\n        }, \"Key words \"), /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }\n        }, \" \", keywords, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }\n        }, \"Key People\"), /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }\n        }, \" \", people, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"footerStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"float-right\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: x,\n          onClick: this.onHide,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 19\n          }\n        })))));\n      } else {\n        return null;\n      }\n    };\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      let memoryContent = this.renderMemoryContent();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }\n      }, memoryContent));\n    } else {\n      return null;\n    }\n  }\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","tick","tag","author","x","getAllMemoryFiles","getTaggedPeople","getMemoryClouds","getMemorySearchWords","getCloudPeople","getUser","CheckBox","SubTag","ImageLabel","MemoryModal","Component","state","memory","taggedPeople","memoryClouds","searchWords","keywords","memfiles","cloudPeople","userClouds","activefile","onHide","props","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","userid","setState","console","log","JSON","stringify","people","clouds","populateCloudInfo","words","populateSearchWords","getHeroFile","hero","map","memfile","ishero","worditem","push","keyword","renderMemoryContent","mem","word","idx","p","firstname","lastname","reverse","thumburl","title","description","story","render","show","memoryContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport tick from '../images/checkmark.png'\nimport tag from '../images/tag.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport './memorymodal.css'\n\nimport {getAllMemoryFiles, \n  getTaggedPeople,\n  getMemoryClouds,\n  getMemorySearchWords, \n  getCloudPeople,\n  getUser,\n } from '../memriioserver'\nimport {CheckBox,SubTag,ImageLabel} from '../buttons/buttons'\n\n\n\nclass MemoryModal extends React.Component{\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[], \n        keywords:[],    // this is temporary   \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null,\n        author:null\n    }\n   \n\n    onHide = () =>{\n      this.props.onHideModal(this.props.memory)\n    }\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n        \n        this.populateMemoryFiles(this.props.memfiles)\n        getUser              (this.props.memory.userid,(author => {\n                                                              this.setState({author:author})\n                                                              console.log('Author + ' + JSON.stringify(author))\n                                                          }))\n        getTaggedPeople      (this.props.memory.memid,((people)=>{this.setState({taggedPeople:people})}))\n        getMemoryClouds      (this.props.memory.memid,((clouds)=>{this.populateCloudInfo(clouds)}))\n        getMemorySearchWords (this.props.memory.memid,((words =>{this.populateSearchWords(words)})))\n        \n        \n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    let hero = this.state.memfiles[0]    \n    this.state.memfiles.map(memfile => {\n        if(memfile.ishero){           \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.state.keywords = []\n    words.map(worditem =>{\n        this.state.keywords.push(worditem.keyword)\n    })\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n\n    this.setState({memoryClouds:clouds})\n    getCloudPeople (clouds,((people)=>{this.setState({cloudPeople:people})}))   \n  }\n\n  //------------------------------------------------------------------------\n\n  renderMemoryContent = () => {\n    const mem = this.props.memory\n    const keywords  = this.state.keywords.map(\n        (word, idx) => {\n          return (\n            <li \n                className='wordListItem'\n                key={'k'+idx}>\n              <CheckBox \n                  checkedImg = {tick}\n                  label = {word}/>\n            </li>\n            )\n          })\n    const people  = this.state.taggedPeople.map(\n      p => {\n          return (\n            <li \n              key={'t' + p.userid}><ImageLabel img = {tag} label = {p.firstname+' '+p.lastname}/>                                                        \n            </li>\n          )\n        })\n    if(this.state.author){\n      people.push(      \n        <li key={'a' + this.state.author.userid}>\n          <ImageLabel \n            img = {author}\n            label = {this.state.author.firstname + ' ' + this.state.author.lastname}/>\n        </li>\n      ) \n    }\n        \n    people.reverse()                                \n\n    if(this.state.activefile){\n      return (\n          <div className='modalrow'>\n            \n            <div className='imgcolumn'>\n              <img \n                alt='memory' \n                src={this.state.activefile.thumburl} \n                className = 'imgStyle'\n              />\n            </div>\n\n            <div className = 'infoColumn'>\n              \n              <h4>{mem.title} </h4>\n              <p className=\"f6 lh-copy i measure mt2 mid-gray\">{mem.description}</p>\n              <p className=\"f6 lh-copy measure mt2 black\"> { mem.story } </p>\n\n            </div>  \n\n            <div className = 'detailsColumn'>\n              \n              <h4>Key words </h4>\n              <ul className='wordList' > { keywords } </ul>\n              <h4>Key People</h4>\n              <ul className='wordList' > { people   } </ul>\n              <div className='footerStyle'>\n                <div className='float-right' >\n                  <img \n                    className='closeBtn' \n                    src = {x}\n                    onClick={this.onHide} />\n                </div>\n              </div>\n\n              \n            </div>  \n\n          </div>\n      )\n    } else {\n      return null\n    }\n    \n  }\n\n//------------------------------------------------------------------------\n\n    render(){\n\n      \n      if(this.props.show){\n        let memoryContent = this.renderMemoryContent()\n        return(\n          <div className= 'backdropStyle'>\n            <div className='modalStyle'>\n              {memoryContent}              \n            </div>\n          </div>\n        )\n      }else{\n        return null\n      }        \n  }\n\n};  \n\n\nexport default MemoryModal;\n\n\n"]},"metadata":{},"sourceType":"module"}