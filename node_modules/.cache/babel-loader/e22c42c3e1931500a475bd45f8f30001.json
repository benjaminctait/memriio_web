{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/admin/admin.js\";\nimport React, { useState } from 'react';\nimport * as mem from '../memriioserver';\nimport './admin.css';\nimport { CloudLabel } from '../buttons/buttons';\nimport cloudImage from '../images/cloud.png';\nimport tag from '../images/tag.png';\nimport cross from '../images/x-symbol.png';\nimport Modal from 'react-modal';\nimport { Grid, Input, Select } from 'react-spreadsheet-grid';\nimport * as DropSearch from '../dropsearch/dropsearch';\nimport { number } from 'prop-types';\n\nclass Admin extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clouds: [],\n      users: [],\n      memberships: [],\n      personModalIsOpen: false,\n      columns: null,\n      newuser: null,\n      modalState: 'add'\n    };\n\n    this.handleCloudSearch = e => {\n      console.log(e.target.value);\n    };\n\n    this.handleSelectCloud = cloud => {\n      console.log(cloud.name);\n      let clouds = [];\n      clouds.push(cloud);\n      mem.getCloudPeople(clouds, null).then(people => {\n        this.setState({\n          people: people\n        });\n      });\n    };\n\n    this.handleShowAllUsers = () => {\n      let ppl = null;\n      mem.getAllUsers().then(people => {\n        ppl = people;\n        mem.getCloudMemberships().then(result => {\n          console.log('memberships');\n          console.log(mem.stry(result.data));\n          this.setState({\n            people: ppl,\n            memberships: result.data\n          });\n        });\n      });\n    };\n\n    this.handlePeopleSearch = () => {};\n\n    this.handleSelectPerson = Person => {};\n\n    this.handleUserUpdateClouds = clouds => {\n      let cloudids = [];\n      clouds.map(cloud => {\n        cloudids.push(parseInt(cloud.value));\n      });\n      console.log('handleUserUpdateClouds for user : ' + this.state.newuser.userid + ' clouds : ' + mem.stry(cloudids));\n      mem.setUserMemberships(this.state.newuser.userid, cloudids);\n    };\n\n    this.renderCloudPeople = () => {\n      if (this.state.people) {\n        if (!this.state.columns) this.state.columns = this.initColumns();\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"admin-zone \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"floatLeft headtext\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 9\n          }\n        }, \"Users\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchHeader\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          className: \"textBox\",\n          placeholder: \"..people search\",\n          onChange: this.handlePeopleSearch,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          className: \"textBox\",\n          placeholder: \"..cloud filter\",\n          onChange: this.handleCloudSearch,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(\"button\", {\n          id: \"newuserbtn\",\n          className: \"newButton\",\n          onClick: this.handleShowAddPersonModel,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }\n        }, \"New User\")), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"floatLeft\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Grid, {\n          rows: this.state.people,\n          columns: this.state.columns,\n          getRowKey: row => row.userid,\n          isColumnsResizable: true,\n          onColumnResize: this.onColumnResize,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }\n        })));\n      } else {\n        return null;\n      }\n    };\n\n    this.handleShowAddPersonModel = () => {\n      this.setState({\n        modalState: 'add',\n        personModalIsOpen: true\n      });\n    };\n\n    this.handleFirstNameChange = e => {\n      this.state.newuser.firstname = e.target.value;\n    };\n\n    this.handleLastNameChange = e => {\n      this.state.newuser.lastname = e.target.value;\n    };\n\n    this.handleEmailChange = e => {\n      this.state.newuser.email = e.target.value;\n    };\n\n    this.handlePasswordChange = e => {\n      this.state.newuser.password = e.target.value;\n    };\n\n    this.handleCloseModal = () => {\n      this.setState({\n        personModalIsOpen: false\n      });\n    };\n\n    this.handleDeleteUser = () => {\n      let ppl = this.state.people;\n      let idx = ppl.findIndex(person => {\n        return person.userid === this.state.newuser.userid;\n      });\n      ppl.splice(idx, 1);\n      this.setState({\n        people: ppl,\n        personModalIsOpen: false\n      });\n      mem.deleteUser(this.state.newuser).then(result => {}, error => {\n        alert('there was a problem trying to delete user');\n      });\n    };\n\n    this.handleAddPerson = () => {\n      const n = this.state.newuser;\n\n      if (n.firstname === '' || n.lastname === '' || n.email === '') {\n        alert('Cannot have blank fields');\n      } else if (!mem.isEmailFormat(n.email)) {\n        alert('email format is invalid');\n      } else {\n        mem.getUserByEmail(n.email).then(result => {\n          alert('A user with this email already exists');\n        }, error => {\n          mem.setNewUser(n).then(result => {\n            console.log('new user added : ' + mem.stry(result));\n            this.setState({\n              personModalIsOpen: false\n            });\n          }, error => alert('Opps ! something went wrong ' + mem.stry(error)));\n        });\n      }\n    };\n\n    this.onColumnResize = widthValues => {\n      const newColumns = [].concat(this.state.columns);\n      Object.keys(widthValues).forEach(columnId => {\n        const column = this.state.columns.find(({\n          id\n        }) => id === columnId);\n        column.width = widthValues[columnId];\n      });\n      this.setState({\n        columns: newColumns\n      });\n    };\n\n    this.handleShowDeleteUser = user => {\n      this.setState({\n        modalState: 'delete',\n        newuser: user,\n        personModalIsOpen: true\n      });\n    };\n\n    this.getUserMemberships = userid => {\n      let clouds = [];\n\n      if (this.state.memberships) {\n        this.state.memberships.map(membership => {\n          if (membership.userid === userid) {\n            clouds.push({\n              id: membership.id,\n              name: membership.name\n            });\n          }\n        });\n      }\n\n      return clouds;\n    };\n\n    this.initColumns = () => {\n      return [{\n        id: 'photo',\n        title: () => 'Photo',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(\"img\", {\n            src: row.avatar,\n            alt: 'image',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 22\n            }\n          });\n        },\n        width: 5\n      }, {\n        id: 'userid',\n        title: () => 'Id',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(Input, {\n            value: row.userid,\n            focus: focus,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 20\n            }\n          });\n        },\n        width: 3\n      }, {\n        id: 'firstname',\n        title: () => 'First Name',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(Input, {\n            value: row.firstname,\n            focus: focus,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 20\n            }\n          });\n        },\n        width: 10\n      }, {\n        id: 'lastname',\n        title: () => 'Last Name',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(Input, {\n            value: row.lastname,\n            focus: focus,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 20\n            }\n          });\n        },\n        width: 10\n      }, {\n        id: 'email',\n        title: () => 'email',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(Input, {\n            value: row.email,\n            focus: focus,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 20\n            }\n          });\n        },\n        width: 12\n      }, {\n        id: 'username',\n        title: () => 'Username',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(Input, {\n            value: row.email,\n            focus: focus,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 20\n            }\n          });\n        },\n        width: 12\n      }, {\n        id: 'mobile',\n        title: () => 'mobile',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(Input, {\n            value: row.mobile,\n            focus: focus,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 20\n            }\n          });\n        },\n        width: 10\n      }, {\n        id: 'joined',\n        title: () => 'Joined',\n        value: (row, {\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(Input, {\n            value: mem.getShortDate(row.joined),\n            focus: focus,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 20\n            }\n          });\n        },\n        width: 8\n      }, {\n        id: 'clouds',\n        title: () => 'Clouds',\n        value: (row, {\n          focus\n        }) => {\n          let selected = this.getUserMemberships(row.userid);\n          this.state.newuser.userid = row.userid;\n          console.log('before handleUserUpdateClouds for user : ' + this.state.newuser.userid);\n          return DropSearch.cloudDropSearch(this.state.clouds, selected, true, false, this.handleUserUpdateClouds);\n        },\n        width: 24\n      }, {\n        id: 'delete',\n        title: () => 'Delete',\n        value: (row, {\n          active,\n          focus\n        }) => {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            className: 'newButton small2',\n            active: active,\n            focus: focus,\n            onClick: () => this.handleShowDeleteUser(row),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 20\n            }\n          }, \"Delete\");\n        },\n        width: 6\n      }];\n    };\n  }\n\n  //---------------------------------------------------------------\n  componentDidMount() {\n    console.log('Administration.componentDidMount ');\n    this.state.newuser = {\n      userid: 0,\n      firstname: '',\n      lastname: '',\n      email: '',\n      password: ''\n    };\n    mem.getAllClouds().then(clouds => {\n      this.setState({\n        clouds: clouds\n      });\n      this.handleShowAllUsers();\n    });\n  } //---------------------------------------------------------------\n\n\n  //---------------------------------------------------------------\n  render() {\n    const cloudpeople = this.renderCloudPeople();\n    const addPersonModel = this.renderAddPersonModal();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-page-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, addPersonModel, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), cloudpeople);\n  } //---------------------------------------------------------------\n\n\n  //-------------------------------------------------------------------------\n  renderAddPersonModal() {\n    let content = null;\n    let user = this.state.newuser;\n\n    if (this.state.modalState === 'add') {\n      content = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"headtext\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 5\n        }\n      }, \"Add Person\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltext spacer\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 7\n        }\n      }, \"First Name\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"textBox mw\",\n        placeholder: \"...first Name\",\n        id: \"firstname\",\n        onChange: this.handleFirstNameChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltex mw\",\n        placeholder: \"...last Name\",\n        id: \"lastname\",\n        onChange: this.handleLastNameChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltext spacer\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 7\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"textBox mw\",\n        placeholder: \"...email\",\n        id: \"email\",\n        onChange: this.handleEmailChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltext spacer\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 7\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"textBox mw\",\n        placeholder: \"...password\",\n        id: \"password\",\n        onChange: this.handlePasswordChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"spacer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 5\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalfooter \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"newButton small spacer\",\n        onClick: this.handleCloseModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 7\n        }\n      }, \" Cancel \"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"newButton small spacer\",\n        onClick: this.handleAddPerson,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 7\n        }\n      }, \" Add \")));\n    } else {\n      content = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"headtext\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 5\n        }\n      }, \"Delete Person\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltext spacer\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 7\n        }\n      }, \"First Name\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"textBox mw\",\n        contentEditable: false,\n        value: user.firstname,\n        id: \"firstname\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltext spacer\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 7\n        }\n      }, \"Last Name\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"textBox mw\",\n        contentEditable: false,\n        value: user.lastname,\n        id: \"firstname\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltext spacer\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 7\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"textBox mw\",\n        contentEditable: false,\n        value: user.email,\n        id: \"firstname\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"labelpair\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"labeltext spacer\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 7\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"textBox mw\",\n        contentEditable: false,\n        value: \"********\",\n        id: \"firstname\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"spacer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 5\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalfooter \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"newButton small spacer\",\n        onClick: this.handleCloseModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 7\n        }\n      }, \" Cancel \"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"newButton small spacer\",\n        onClick: this.handleDeleteUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 7\n        }\n      }, \" Delete \")));\n    }\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.personModalIsOpen,\n      onRequestClose: this.closeModal,\n      className: \"modal\",\n      overlayClassName: \"backdropStyle\",\n      contentLabel: \"Example Modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 5\n      }\n    }, content);\n  } //---------------------------------------------------------------\n  //---------------------------------------------------------------\n\n\n}\n\nexport default Admin;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/admin/admin.js"],"names":["React","useState","mem","CloudLabel","cloudImage","tag","cross","Modal","Grid","Input","Select","DropSearch","number","Admin","Component","state","clouds","users","memberships","personModalIsOpen","columns","newuser","modalState","handleCloudSearch","e","console","log","target","value","handleSelectCloud","cloud","name","push","getCloudPeople","then","people","setState","handleShowAllUsers","ppl","getAllUsers","getCloudMemberships","result","stry","data","handlePeopleSearch","handleSelectPerson","Person","handleUserUpdateClouds","cloudids","map","parseInt","userid","setUserMemberships","renderCloudPeople","initColumns","handleShowAddPersonModel","row","onColumnResize","handleFirstNameChange","firstname","handleLastNameChange","lastname","handleEmailChange","email","handlePasswordChange","password","handleCloseModal","handleDeleteUser","idx","findIndex","person","splice","deleteUser","error","alert","handleAddPerson","n","isEmailFormat","getUserByEmail","setNewUser","widthValues","newColumns","concat","Object","keys","forEach","columnId","column","find","id","width","handleShowDeleteUser","user","getUserMemberships","membership","title","focus","avatar","mobile","getShortDate","joined","selected","cloudDropSearch","active","componentDidMount","getAllClouds","render","cloudpeople","addPersonModel","renderAddPersonModal","content","closeModal"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport * as mem from '../memriioserver'\nimport './admin.css'\nimport { CloudLabel } from '../buttons/buttons';\nimport cloudImage from '../images/cloud.png'\nimport tag from '../images/tag.png'\nimport cross from '../images/x-symbol.png'\nimport Modal from 'react-modal'\nimport {Grid,Input,Select} from 'react-spreadsheet-grid'\n\nimport * as DropSearch from '../dropsearch/dropsearch'\nimport { number } from 'prop-types';\n\n\nclass Admin extends React.Component{\n\nstate ={\n  clouds:[],\n  users:[],\n  memberships:[],\n  personModalIsOpen:false,\n  columns:null,\n  newuser:null,\n  modalState:'add'\n}\n\n//---------------------------------------------------------------\n\ncomponentDidMount(){\n  console.log('Administration.componentDidMount ' )\n  this.state.newuser =\n    {\n      userid:0,\n      firstname:'',\n      lastname:'',\n      email:'',\n      password:''\n    }\n  mem.getAllClouds().then(clouds => {\n    this.setState({clouds:clouds})\n    this.handleShowAllUsers()\n  })\n}\n\n//---------------------------------------------------------------\n\nhandleCloudSearch = (e) => {\n  console.log(e.target.value);\n  \n}\n\n//---------------------------------------------------------------\n\nhandleSelectCloud = ( cloud ) => {\n  console.log(cloud.name);\n  let clouds = []\n  clouds.push(cloud)\n  mem.getCloudPeople(clouds,null).then(people => {this.setState({people:people})})\n  \n}\n\n//---------------------------------------------------------------\n\nhandleShowAllUsers = () =>{\n  let ppl = null\n  mem.getAllUsers().then(people=> {\n    ppl = people\n    mem.getCloudMemberships().then(result =>{\n      console.log('memberships');\n      console.log(mem.stry(result.data));      \n      this.setState({people:ppl,memberships:result.data})\n    })})\n}\n//---------------------------------------------------------------\n\nhandlePeopleSearch = ( ) => { \n\n}\n//---------------------------------------------------------------\n\nhandleSelectPerson = (Person) => {\n\n}\n\n//---------------------------------------------------------------\n\nhandleUserUpdateClouds = (clouds) =>{\n  let cloudids = []\n  clouds.map(cloud =>{cloudids.push( parseInt(cloud.value))})\n  console.log('handleUserUpdateClouds for user : ' + this.state.newuser.userid + ' clouds : ' + mem.stry(cloudids));\n  mem.setUserMemberships(this.state.newuser.userid,cloudids)\n  \n}\n\n//---------------------------------------------------------------\n\nrender(){\n \n  const cloudpeople     = this.renderCloudPeople()\n  const addPersonModel  = this.renderAddPersonModal()\n    return (\n      <div className='some-page-wrapper'>\n        {addPersonModel}\n        <div className ='headerrow'></div>               \n          {cloudpeople}        \n      </div>\n    )\n}\n\n//---------------------------------------------------------------\n\nrenderCloudPeople = () =>{\n  \n  if(this.state.people){\n    if(!this.state.columns) this.state.columns = this.initColumns()\n    \n    return ( \n      <div className='admin-zone '>\n        <div className='floatLeft headtext'>Users</div>\n        <div className = 'searchHeader'>\n          <input className='textBox' placeholder='..people search' onChange={this.handlePeopleSearch}/>\n          <input className='textBox' placeholder='..cloud filter' onChange ={this.handleCloudSearch}/>\n          <button id='newuserbtn' className='newButton' onClick={this.handleShowAddPersonModel}>New User</button>\n        </div>\n        \n        <div className='floatLeft'>\n          <Grid \n            rows={this.state.people}\n            columns = {this.state.columns}            \n            getRowKey={row => row.userid}\n            isColumnsResizable\n            onColumnResize = {this.onColumnResize}\n          />\n        </div>\n      </div>\n    )\n  }else{\n    return null\n  }\n  \n\n}\n\n//--------------------------ADD PERSON MODAL -----------------------------\n//--------------------------================------------------------------\n\nhandleShowAddPersonModel  = ()  =>  { this.setState({modalState:'add',personModalIsOpen:true})}\nhandleFirstNameChange     = (e) =>  { this.state.newuser.firstname = e.target.value }\nhandleLastNameChange      = (e) =>  { this.state.newuser.lastname  = e.target.value }\nhandleEmailChange         = (e) =>  { this.state.newuser.email     = e.target.value }\nhandlePasswordChange      = (e) =>  { this.state.newuser.password  = e.target.value }\nhandleCloseModal          = ()  =>  { this.setState({personModalIsOpen:false})}\n\n//-------------------------------------------------------------------------\n\nhandleDeleteUser          = ()  =>  {\n  let ppl = this.state.people\n  let idx = ppl.findIndex((person) => {return person.userid === this.state.newuser.userid})\n  ppl.splice( idx , 1 )\n  this.setState({people:ppl,personModalIsOpen:false})\n  mem.deleteUser(this.state.newuser)\n  .then(result=>{},error=>{ alert('there was a problem trying to delete user')})\n}\n\n//-------------------------------------------------------------------------\n\nhandleAddPerson           = ()  =>  { \n  const n = this.state.newuser \n \n  if(n.firstname === '' || n.lastname === '' || n.email===''){\n    alert('Cannot have blank fields')\n  }else if (!mem.isEmailFormat(n.email)) {\n    alert('email format is invalid')\n  }else{    \n    mem.getUserByEmail(n.email)\n    .then(result =>{\n        alert('A user with this email already exists')\n      },error=>{\n        mem.setNewUser(n)\n        .then(result=>{\n          console.log('new user added : ' + mem.stry(result));\n          this.setState({personModalIsOpen:false})\n          },error=>alert('Opps ! something went wrong ' + mem.stry(error)))\n      })               \n  }    \n} \n  \n \n\n//-------------------------------------------------------------------------\n\nrenderAddPersonModal (){\nlet content = null\nlet user = this.state.newuser\n\nif(this.state.modalState === 'add'){\n  content = \n  <div>\n    <div className='headtext' >Add Person</div>\n    <div className='labelpair'>\n      <label className='labeltext spacer' htmlFor=\"name\">First Name</label>\n      <input className='textBox mw'  placeholder='...first Name'id='firstname' onChange={this.handleFirstNameChange}/>  \n    </div>\n\n    <div className='labelpair'>\n      <label className='labeltex mw'  placeholder='...last Name' id='lastname' onChange={this.handleLastNameChange}/>  \n    </div>\n\n    <div className='labelpair'>\n      <label className='labeltext spacer' htmlFor=\"name\">Email</label>\n      <input className='textBox mw'  placeholder='...email' id='email' onChange={this.handleEmailChange}/>  \n    </div>\n\n    <div className='labelpair'>\n      <label className='labeltext spacer' htmlFor=\"name\">Password</label>\n      <input  className='textBox mw' placeholder='...password' id='password' onChange={this.handlePasswordChange}/>  \n    </div>\n    <div className='spacer'></div>\n    <div className='modalfooter '>\n      <button className='newButton small spacer' onClick={this.handleCloseModal}> Cancel </button>\n      <button className='newButton small spacer' onClick={this.handleAddPerson}> Add </button>\n    </div>   \n  </div> \n}else{ \n  content = \n  <div>\n    <div className='headtext' >Delete Person</div>\n    <div className='labelpair'>\n      <label className='labeltext spacer' htmlFor=\"name\">First Name</label>\n      <input className='textBox mw' contentEditable={false} value={user.firstname} id='firstname' />  \n    </div>\n\n    <div className='labelpair'>\n      <label className='labeltext spacer' htmlFor=\"name\">Last Name</label>\n      <input className='textBox mw' contentEditable={false} value={user.lastname} id='firstname' />  \n    </div>\n\n    <div className='labelpair'>\n      <label className='labeltext spacer' htmlFor=\"name\">Email</label>\n      <input className='textBox mw' contentEditable={false} value={user.email} id='firstname' />  \n    </div>\n\n    <div className='labelpair'>\n      <label className='labeltext spacer' htmlFor=\"name\">Password</label>\n      <input className='textBox mw' contentEditable={false} value='********' id='firstname' />  \n    </div>\n    <div className='spacer'></div>\n    <div className='modalfooter '>\n      <button className='newButton small spacer' onClick={this.handleCloseModal}> Cancel </button>\n      <button className='newButton small spacer' onClick={this.handleDeleteUser}> Delete </button>\n    </div>   \n  </div> \n  \n} \n\n  return(\n    <Modal\n          isOpen          = {this.state.personModalIsOpen}          \n          onRequestClose  = {this.closeModal}\n          className       = 'modal'\n          overlayClassName= 'backdropStyle'\n          contentLabel    = \"Example Modal\"\n    >{content}</Modal>    \n  )\n  \n}\n\n//---------------------------------------------------------------\n\nonColumnResize = (widthValues) => {\n  \n  const newColumns = [].concat(this.state.columns)\n  Object.keys(widthValues).forEach((columnId) => {\n      const column = this.state.columns.find(({ id }) => id === columnId);\n      column.width = widthValues[columnId]\n  })\n  this.setState({columns:newColumns})\n}\n\n//---------------------------------------------------------------\nhandleShowDeleteUser = (user) => {\n\n  this.setState({modalState:'delete', newuser:user, personModalIsOpen:true})\n}\n\n//---------------------------------------------------------------\n\ngetUserMemberships = ( userid ) =>{\n  let clouds=[]\n\n  if(this.state.memberships){\n    this.state.memberships.map(membership =>{\n      if (membership.userid === userid){\n        clouds.push({\n          id:membership.id,\n          name:membership.name})}})\n  }\n  \n  return clouds\n}\n\n//---------------------------------------------------------------\n\ninitColumns = () =>{\n  return(\n    [\n      {\n        id: 'photo',\n        title: () => 'Photo',\n        value: (row, { focus }) => {\n            return ( <img src={row.avatar} alt={'image'} /> )\n        },\n        width:5,\n      }, {\n        id: 'userid',\n        title: () => 'Id',\n        value: (row, { focus }) => {\n          return ( <Input value={row.userid} focus={focus} /> )\n        },\n        width:3,\n      }, {\n        id: 'firstname',\n        \n        title: () => 'First Name',\n        value: (row, { focus }) => {\n          return ( <Input value={row.firstname} focus={focus} /> )\n        },\n        width:10,\n      }, {\n        id: 'lastname',\n        title: () => 'Last Name',\n        value: (row, { focus }) => {\n          return ( <Input value={row.lastname} focus={focus} /> )\n        },\n        width:10,\n      }, {\n        id: 'email',\n        title: () => 'email',\n        value: (row, { focus }) => {\n          return ( <Input value={row.email} focus={focus} /> )\n        },\n        width:12,\n      }, {\n        id: 'username',\n        title: () => 'Username',\n        value: (row, { focus }) => {\n          return ( <Input value={row.email} focus={focus} /> )\n        },\n        width:12,\n      }, {\n        id: 'mobile',\n        title: () => 'mobile',\n        value: (row, { focus }) => {\n          return ( <Input value={row.mobile} focus={focus} /> )\n        },\n        width:10,\n      }, {\n        id: 'joined',\n        title: () => 'Joined',\n        value: (row, { focus }) => {\n          return ( <Input value={ mem.getShortDate(row.joined)} focus={focus} /> )\n        },\n        width:8,\n      }, {\n        id: 'clouds',\n        title: () => 'Clouds',\n        value: (row, { focus }) => {\n          let selected = this.getUserMemberships(row.userid)\n          this.state.newuser.userid = row.userid\n          console.log('before handleUserUpdateClouds for user : ' + this.state.newuser.userid );\n          return ( DropSearch.cloudDropSearch(this.state.clouds,selected,true,false ,this.handleUserUpdateClouds) )\n          },\n        width:24,\n      },{\n        id: 'delete',\n        title: () => 'Delete',\n        \n        value: (row, { active,focus }) => {\n          return ( <button className={'newButton small2'} active={active} focus={focus} onClick={()=>this.handleShowDeleteUser(row)}>Delete</button> )\n          },\n        width:6,\n      }\n    ]\n  )\n}\n\n//---------------------------------------------------------------\n\n}\nexport default Admin"]},"metadata":{},"sourceType":"module"}