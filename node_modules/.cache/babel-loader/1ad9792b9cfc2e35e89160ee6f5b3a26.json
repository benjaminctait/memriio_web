{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memoryeditor/memoryeditor.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport './memoryeditor.css';\nconst memData = {\n  files: [],\n  remoteURLS: [],\n  userid: 0,\n  currentMemoryID: 0,\n  mode: 'upload'\n};\n\nclass MemoryEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFileInputChange = ev => {\n      this.setState({\n        files: ev.target.files\n      });\n      memData.files = ev.target.files;\n    };\n\n    this.postNewMemory = () => {\n      if (memData.files.length > 0) {\n        console.log('loading memory:', memData);\n        this.uploadFiles(memData.files, this.createMemoryLog);\n      } else {\n        console.log('no files to load');\n      }\n    };\n\n    this.addMemoryFiles = (memid, urlArray) => {\n      console.log('calling api - addmemfile:', memid, urlArray[0]);\n      fetch('https://memriio-api-0.herokuapp.com/addmemfile', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          memid: memid,\n          fileurl: urlArray[0],\n          ishero: true\n        })\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n        return data;\n      });\n    };\n\n    this.createMemoryLog = addmfiles => {\n      fetch('https://memriio-api-0.herokuapp.com/creatememory', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userid: this.state.userid,\n          groupid: 0,\n          ispersonal: true\n        })\n      }).then(response => response.json()).then(memory => {\n        if (memory.created) {\n          this.setState({\n            currentMemoryID: memory.id\n          });\n          memData.currentMemoryID = memory.id;\n          return addmfiles(memory.id, memData.remoteURLS);\n        }\n      });\n    };\n\n    this.uploadFiles = (filearray, callmemorylog) => {\n      const file = filearray[0];\n      console.log('uploading files:', file); // Split the filename to get the name and type\n\n      let fileParts = file.name.split('.');\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      fetch('https://memriio-api-0.herokuapp.com/signedurl', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: fileName,\n          fileType: fileType\n        })\n      }).then(response => response.json()).then(response => {\n        var signedRequest = response.signedURL;\n        memData.remoteURLS[0] = response.url;\n        console.log('remote url', response.url);\n        var options = {\n          headers: {\n            'Content-Type': fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log('fileupload result:', result);\n          this.setState({\n            remoteUrls: memData.remoteURLS\n          });\n          return callmemorylog(this.addMemoryFiles);\n        }).catch(error => {\n          console.log('Error uploading file');\n          console.log(error);\n          return [];\n        });\n      }).catch(error => {\n        console.log('Error getting signed request');\n        console.log(error);\n        return [];\n      });\n    };\n\n    this.state = {\n      files: [],\n      remoteUrls: [],\n      userid: props.userid,\n      currentMemoryID: 0,\n      mode: 'upload'\n    };\n    memData.userid = props.userid;\n  }\n\n  render() {\n    if (true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }\n      }, \"File Upload\"), /*#__PURE__*/React.createElement(\"input\", {\n        onChange: this.onFileInputChange,\n        type: \"file\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.postNewMemory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, \"Post Memory\"));\n    }\n  }\n\n}\n\nexport default MemoryEditor;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memoryeditor/memoryeditor.js"],"names":["React","axios","memData","files","remoteURLS","userid","currentMemoryID","mode","MemoryEditor","Component","constructor","props","onFileInputChange","ev","setState","target","postNewMemory","length","console","log","uploadFiles","createMemoryLog","addMemoryFiles","memid","urlArray","fetch","method","headers","body","JSON","stringify","fileurl","ishero","then","response","json","data","addmfiles","state","groupid","ispersonal","memory","created","id","filearray","callmemorylog","file","fileParts","name","split","fileName","fileType","signedRequest","signedURL","url","options","put","result","remoteUrls","catch","error","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './memoryeditor.css'\n\n\nconst memData = {\n    files:[],\n    remoteURLS:[],\n    userid:0,\n    currentMemoryID:0,\n    mode:'upload'\n}\n\nclass MemoryEditor extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            files:[],\n            remoteUrls:[],\n            userid:props.userid,\n            currentMemoryID:0,\n            mode:'upload'\n        }\n        memData.userid = props.userid\n    }    \n    \n    onFileInputChange = (ev) => {\n         this.setState({files: ev.target.files})\n         memData.files = ev.target.files;\n     }\n\n// post new memory -----------------------------------------------------\n\n    postNewMemory = () => {\n    \n        if(memData.files.length > 0){\n            console.log('loading memory:',memData);\n            \n            this.uploadFiles(memData.files,this.createMemoryLog)\n            \n        }else{\n            console.log('no files to load');\n        }\n        \n    }\n\n// add file to memory -----------------------------------------------------\n\n    addMemoryFiles = (memid,urlArray) => {\n    console.log('calling api - addmemfile:',memid,urlArray[0]);\n    \n     fetch('https://memriio-api-0.herokuapp.com/addmemfile', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({\n                    memid: memid,\n                    fileurl: urlArray[0],\n                    ishero: true})\n                })\n                .then((response) => response.json())\n                .then((data) => {\n                    console.log(data);\n                    return data;\n                })\n    }\n\n// create memory log -----------------------------------------------------\n\n    createMemoryLog = (addmfiles) => {\n        \n        fetch('https://memriio-api-0.herokuapp.com/creatememory', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n            userid:this.state.userid,\n            groupid: 0,\n            ispersonal: true\n            })\n            })\n                .then(response => response.json())\n                .then(memory => {\n                    if(memory.created){\n                        this.setState({currentMemoryID:memory.id})\n                        memData.currentMemoryID = memory.id\n                        return addmfiles(memory.id,memData.remoteURLS);\n                    }   \n                })\n    }\n    \n// upload files -----------------------------------------------------\n\n    uploadFiles = (filearray,callmemorylog) => {\n        \n        const file =  filearray[0];\n        console.log('uploading files:',file);\n        \n\n        // Split the filename to get the name and type\n        let fileParts = file.name.split('.');\n        let fileName = fileParts[0];\n        let fileType = fileParts[1];\n        \n        fetch('https://memriio-api-0.herokuapp.com/signedurl', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                    fileName : fileName,\n                    fileType : fileType\n                })\n            })\n            .then(response => response.json())\n            .then(response => {\n                var signedRequest = response.signedURL;\n                memData.remoteURLS[0] = response.url;\n                console.log('remote url',response.url);\n                \n                var options = {\n                    headers: {\n                    'Content-Type': fileType\n                  }\n                }\n                axios.put(signedRequest,file,options)\n                    .then(result => {\n                    console.log('fileupload result:',result);\n                    this.setState({remoteUrls:memData.remoteURLS})\n                    return callmemorylog(this.addMemoryFiles)\n                    \n                })\n                .catch(error => {\n                    console.log('Error uploading file');\n                    console.log(error);\n                    return []\n                })\n              })\n               .catch(error => {\n                console.log('Error getting signed request')\n                console.log(error)\n                return []\n              })\n    }\n\n    render(){\n        \n        if(true){\n            return (\n             \n                <div>\n                \n                    <p>File Upload</p>\n                    <input onChange={this.onFileInputChange} type='file'  />\n                    <button onClick = {this.postNewMemory}>Post Memory</button>\n                \n                </div>\n            \n                         \n            )\n        }\n    }\n\n}\n        \n    \n\n\nexport default MemoryEditor;\n"]},"metadata":{},"sourceType":"module"}