{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport greycross from '../images/x-grey.png';\nimport tick from '../images/tick.png';\nimport tag from '../images/tag.png';\nimport globe from '../images/outline-globe.png';\nimport calendar from '../images/calendar.png';\nimport key from '../images/key.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport edit from '../images/edit.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport trash from '../images/trash.png';\nimport hero from '../images/hero-full.png';\nimport heroOutline from '../images/hero-outline-grey.png';\nimport cloudIMG from '../images/cloud.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport * as mem from '../memriioserver';\nimport * as DropSearch from '../dropsearch/dropsearch';\nimport WordExctractor from 'keyword-extractor';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport './memorymodal.css';\nimport { CheckBox, SubTag, ImageLabel } from '../buttons/buttons';\n\nclass MemoryModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null,\n      author: null,\n      memfileIndex: 0,\n      editMode: false,\n      showSelectPeople: false,\n      showSelectClouds: false,\n      addPeopleRef: null,\n      addCloudRef: null\n    };\n\n    this.onHide = () => {\n      this.state.editMode = false;\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          mem.getUser(this.props.memory.userid, author => {\n            this.setState({\n              author: author\n            });\n          });\n          mem.getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          mem.getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          mem.getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n          mem.getUserClouds(this.props.memory.userid, clouds => {\n            this.setState({\n              userClouds: clouds\n            });\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      this.state.memfileIndex = 0;\n\n      if (this.state.memfiles) {\n        let hero = this.state.memfiles[0];\n        this.state.memfiles.map((memfile, index) => {\n          if (memfile.ishero) {\n            this.state.memfileIndex = index;\n            hero = memfile;\n          }\n        });\n        return hero;\n      } else {\n        return null;\n      }\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      mem.getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.toggleEditMode = () => {\n      this.setState({\n        editMode: !this.state.editMode\n      });\n    };\n\n    this.userIsAuthorisedToEdit = () => {\n      return true;\n    };\n\n    this.deleteFileFromMemory = () => {\n      console.log('delte file from memroy');\n    };\n\n    this.makeHeroFile = () => {\n      console.log('make hero file');\n    };\n\n    this.handleAddTaggedPerson = Person => {\n      let tp = this.state.taggedPeople;\n\n      if (!tp.find(dude => dude.userid === Person.userid)) {\n        tp.push(Person);\n        tp.reverse();\n        this.setState({\n          taggedPeople: tp\n        });\n        mem.addTaggedPerson(this.props.memory.memid, Person.userid);\n      }\n    };\n\n    this.handleRemoveFromCloud = Cloud => {\n      let cl = [];\n      this.state.memoryClouds.map(cloud => {\n        if (cloud.id !== Cloud.id) cl.push(cloud);\n      });\n      mem.deleteTaggedCloud(this.props.memory.memid, Cloud.id).then(result => {\n        this.populateCloudInfo(cl);\n      });\n    };\n\n    this.handleDeleteTaggedPerson = Person => {\n      let tp = [];\n      this.state.taggedPeople.map(p => {\n        if (p.userid !== Person.userid) tp.push(p);\n      });\n      this.setState({\n        taggedPeople: tp\n      });\n      mem.deleteTaggedPerson(this.props.memory.memid, Person.userid);\n    };\n\n    this.handleAddCloud = clouds => {\n      let cloud = clouds[0];\n      let cl = this.state.memoryClouds;\n      console.log('memorymodal.handleaAddCloud newCloud : ' + mem.stry(cloud));\n      let newCloudID = parseInt(cloud.value);\n\n      if (!cl.find(newcl => newcl.id === newCloudID)) {\n        cl.push({\n          id: newCloudID,\n          name: cloud.label\n        });\n        cl.reverse();\n        this.setState({\n          memoryClouds: cl\n        });\n        mem.addTaggedCloud(this.props.memory.memid, newCloudID).then(result => {\n          this.populateCloudInfo(cl);\n        });\n      }\n    };\n\n    this.toggleAddPeople = () => {\n      this.setState({\n        showSelectPeople: !this.state.showSelectPeople\n      });\n      console.log(\"showSelectPeople : \" + this.state.showSelectPeople);\n    };\n\n    this.toggleAddCloud = () => {\n      this.setState({\n        showSelectClouds: !this.state.showSelectClouds\n      });\n      console.log(\"showSelectCloud : \" + this.addCloudRef.current.getBoundingClientRect().x);\n    };\n\n    this.activeFileisHero = () => {\n      var afile = this.state.activefile;\n\n      if (afile) {\n        if (afile.ishero) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    this.renderMemoryContent = () => {\n      const imageZone = this.renderImageZone();\n      const storyZone = this.renderStoryZone();\n      const detailsZone = this.renderDetailsZone();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 9\n        }\n      }, imageZone, storyZone, detailsZone);\n    };\n\n    this.handleSearchWordClick = (itemKey, upState) => {\n      const ind = this.state.searchWords.findIndex(item => {\n        return item.id === itemKey;\n      });\n      this.state.searchWords[ind].included = upState;\n      console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]));\n      mem.updateMemword(this.state.searchWords[ind]);\n      this.setState({\n        searchWords: this.state.searchWords\n      });\n    };\n\n    this.renderKeyWords = () => {\n      if (this.state.editMode) {\n        return /*#__PURE__*/React.createElement(Container, {\n          onDrop: e => this.setState({\n            searchWords: this.applyDrag(this.state.searchWords, e)\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 7\n          }\n        }, this.state.searchWords.map((wordItem, idx) => {\n          return /*#__PURE__*/React.createElement(Draggable, {\n            className: \"wordListItem\",\n            key: 'k' + idx,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(CheckBox, {\n            itemKey: wordItem.id,\n            onClick: this.handleSearchWordClick,\n            upState: wordItem.included,\n            downImg: greycross,\n            upImg: tick,\n            label: wordItem.keyword,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }\n          }));\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 9\n          }\n        }, this.state.searchWords.map((wordItem, idx) => {\n          if (wordItem.included) {\n            return /*#__PURE__*/React.createElement(\"li\", {\n              className: \"wordListItem\",\n              key: 'k' + idx,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 17\n              }\n            }, /*#__PURE__*/React.createElement(ImageLabel, {\n              leftImg: key,\n              label: wordItem.keyword,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 19\n              }\n            }));\n          }\n        }));\n      }\n    };\n\n    this.applyDrag = (arr, dragResult) => {\n      const {\n        removedIndex,\n        addedIndex,\n        payload\n      } = dragResult;\n      if (removedIndex === null && addedIndex === null) return arr;\n      const result = [...arr];\n      let itemToAdd = payload;\n      if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n      if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n      return result;\n    };\n\n    this.renderTaggedPeople = () => {\n      let plus = null;\n\n      if (this.state.editMode) {\n        const people = this.state.taggedPeople.map(p => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'p' + p.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            data: p,\n            leftImg: tag,\n            badge: x,\n            onBadgeClick: this.handleDeleteTaggedPerson,\n            label: p.firstname + ' ' + p.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }\n          }));\n        });\n\n        if (this.state.author) {\n          people.push( /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'a' + this.state.author.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: author,\n            label: this.state.author.firstname + ' ' + this.state.author.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }\n          })));\n        }\n\n        people.reverse();\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          ref: this.addPeopleRef,\n          className: \"wordListItem\",\n          key: 'addPerson',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          onClick: this.toggleAddPeople,\n          label: '+ add',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }\n        })));\n        return people;\n      } else {\n        const people = this.state.taggedPeople.map(p => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 't' + p.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: tag,\n            label: p.firstname + ' ' + p.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 36\n            }\n          }));\n        });\n\n        if (this.state.author) {\n          people.push( /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'a' + this.state.author.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: author,\n            label: this.state.author.firstname + ' ' + this.state.author.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 15\n            }\n          })));\n        }\n\n        people.reverse();\n        return people;\n      }\n    };\n\n    this.renderDetails = () => {\n      if (this.props.memory) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'location',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: globe,\n          label: this.props.memory.location,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 28\n          }\n        })), /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'sss',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: calendar,\n          label: mem.getShortDate(this.props.memory.createdon),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 23\n          }\n        })));\n      }\n    };\n\n    this.renderClouds = () => {\n      if (this.state.editMode) {\n        const clouds = this.state.memoryClouds.map(cloud => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'cloud' + cloud.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            data: cloud,\n            badge: x,\n            onBadgeClick: this.handleRemoveFromCloud,\n            leftImg: cloudIMG,\n            label: cloud.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 40\n            }\n          }));\n        });\n        clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n          ref: this.addCloudRef,\n          className: \"wordListItem\",\n          key: 'addCloud',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          onClick: this.toggleAddCloud,\n          label: '+ add',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }\n        })));\n        return clouds;\n      } else {\n        const clouds = this.state.memoryClouds.map(cloud => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'cloud' + cloud.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: cloudIMG,\n            label: cloud.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 40\n            }\n          }));\n        });\n        return clouds;\n      }\n    };\n\n    this.renderImageZone = () => {\n      let editControls = null;\n      let imagezone = null;\n\n      if (this.state.editMode) {\n        var heroImg = this.activeFileisHero() ? hero : heroOutline;\n        editControls = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imageEditConrols\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: trash,\n          onClick: this.deleteFileFromMemory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: heroImg,\n          onClick: this.makeHeroFile,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 7\n          }\n        }));\n        return /*#__PURE__*/React.createElement(Dropzone, {\n          onDrop: acceptedFiles => this.handleDropfiles(acceptedFiles),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 7\n          }\n        }, ({\n          getRootProps,\n          getInputProps\n        }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          className: \"imgcolumn\"\n        }, getRootProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(MemoryFileViewer, {\n          memfile: this.state.activefile,\n          thumbStyleClass: 'memoryModalImage',\n          fileStyleClass: 'memoryModalImage',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 15\n          }\n        }), editControls));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imgcolumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n          memfile: this.state.activefile,\n          thumbStyleClass: 'memoryModalImage',\n          fileStyleClass: 'memoryModalImage',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 9\n          }\n        }));\n      }\n    };\n\n    this.onTitleBlur = e => {\n      const newTitle = e.target.value;\n      this.props.memory.title = newTitle;\n      mem.updateTitle(this.props.memory.memid, newTitle);\n      mem.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n    };\n\n    this.onDescriptionBlur = e => {\n      const newDescription = e.target.value;\n      this.props.memory.description = newDescription;\n      mem.updateDescription(this.props.memory.memid, newDescription);\n      mem.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n    };\n\n    this.onStoryBlur = e => {\n      const newStory = e.target.value;\n      this.props.memory.story = newStory;\n      mem.updateStory(this.props.memory.memid, newStory);\n      mem.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n    };\n\n    this.handleDescriptionChange = event => {\n      let fulltext = this.props.memory.title + ' ' + this.props.memory.story + ' ' + event.target.value;\n      this.addToSearchWords(fulltext);\n      this.props.memory.description = event.target.value;\n    };\n\n    this.handleTitleChange = event => {\n      let fulltext = this.props.memory.description + ' ' + this.props.memory.story + ' ' + event.target.value;\n      this.addToSearchWords(fulltext);\n      this.props.memory.title = event.target.value;\n    };\n\n    this.handleStoryChange = event => {\n      let fulltext = this.props.memory.description + ' ' + this.props.memory.title + ' ' + event.target.value;\n      this.addToSearchWords(fulltext);\n      this.props.memory.story = event.target.value;\n    };\n\n    this.addToSearchWords = textContent => {\n      let addarray = this.state.searchWords;\n      let addarray2 = [];\n      let words = WordExctractor.extract(textContent, {\n        language: \"english\",\n        remove_digits: true,\n        return_changed_case: true,\n        remove_duplicates: true\n      }); // add any new words that exist in the story\n\n      words.map(word => {\n        if (!this.searchWordExists(word)) {\n          addarray.push({\n            included: true,\n            keyword: word,\n            strength: 0\n          });\n        }\n      }); // remove any search words that now longer exist in the story\n\n      addarray.map(w => {\n        if (words.find(word => w.keyword === word) !== undefined) {\n          addarray2.push({\n            included: w.included,\n            keyword: w.keyword,\n            strength: w.strength\n          });\n        }\n      });\n      this.setState({\n        searchWords: addarray2\n      });\n    };\n\n    this.searchWordExists = word => {\n      return this.state.searchWords.find(wordItem => word === wordItem.keyword);\n    };\n\n    this.renderStoryZone = () => {\n      const mem = this.props.memory;\n\n      if (this.state.editMode) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onTitleBlur,\n          className: \"input-reset titleEdit\",\n          onChange: this.handleTitleChange,\n          type: \"text\",\n          defaultValue: mem.title,\n          placeholder: \"Title\",\n          id: \"title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onDescriptionBlur,\n          className: \"input-reset descriptionEdit\",\n          onChange: this.handleDescriptionChange,\n          type: \"text\",\n          defaultValue: mem.description,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"textarea\", {\n          onBlur: this.onStoryBlur,\n          className: \"input-reset storyEdit\",\n          onChange: this.handleStoryChange,\n          type: \"text\",\n          defaultValue: mem.story,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 9\n          }\n        }, mem.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy i measure mt2 mid-gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 9\n          }\n        }, mem.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy measure mt2 black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 9\n          }\n        }, \" \", mem.story, \" \"));\n      }\n    };\n\n    this.renderCornerControls = () => {\n      let editBtn = null;\n      let deleteBtn = null;\n\n      if (this.userIsAuthorisedToEdit()) {\n        editBtn = /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: edit,\n          onClick: this.toggleEditMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 7\n          }\n        });\n        deleteBtn = /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: trash,\n          onClick: this.handleDeleteMemory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 5\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 5\n        }\n      }, deleteBtn, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: x,\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 7\n        }\n      }), editBtn);\n    };\n\n    this.renderDetailsZone = () => {\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n      const clouds = this.renderClouds();\n      const cornerCtrls = this.renderCornerControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detailsColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 9\n        }\n      }, \"Tags \"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"keyWordList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 9\n        }\n      }, \"  \", keywords, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z25\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 9\n        }\n      }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"peopleList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 9\n        }\n      }, \"   \", people, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 9\n        }\n      }, \"Clouds\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"cloudList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 9\n        }\n      }, \"    \", clouds, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 9\n        }\n      }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"detailsList \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 9\n        }\n      }, \"        \", details, \" \")), cornerCtrls);\n    };\n\n    this.handleDropfiles = async acceptedFiles => {\n      const reader = new FileReader();\n      acceptedFiles.forEach(file => {\n        reader.onload = () => {\n          console.log('onload ' + file.name);\n\n          if (mem.canHandleDroppedFile(file.name)) {\n            this.prepAndUploadFile(file);\n          } else {\n            alert('File type ' + mem.getExtension(file.name) + ' not yet implemented');\n          }\n        };\n\n        reader.readAsArrayBuffer(file);\n      });\n    };\n\n    this.handleDeleteMemory = () => {\n      this.props.onDeleteMemory(this.props.memory);\n    };\n\n    this.prepAndUploadFile = file => {\n      let commonfileName = this.state.author.userid + '-' + this.props.memory.memid + '-' + Date.now();\n      let ext = mem.getExtension(file.name);\n      let fname = commonfileName + '-original' + '.' + ext;\n      let tname = commonfileName + '-thumb' + '.' + ext;\n      let filebuffer = null;\n      let newMemfiles = this.state.memfiles;\n      let memfile = {\n        id: 0,\n        memid: this.props.memory.memid,\n        fileurl: '',\n        ishero: false,\n        fileext: ext,\n        thumburl: '',\n        thumbext: ext\n      };\n      mem.compressImage(file, 0.9).then(result => {\n        if (result.success) {\n          filebuffer = result.data;\n          mem.resizeImage(filebuffer, 1500).then(result => {\n            if (result.success) {\n              mem.uploadFile(tname, result.data).then(result => {\n                if (result.success) {\n                  memfile.thumburl = result.awsurl;\n                  newMemfiles.push(memfile);\n                  this.setState({\n                    memfiles: newMemfiles\n                  });\n                  mem.uploadFile(fname, filebuffer).then(result => {\n                    if (result.success) {\n                      let last = this.state.memfiles.length - 1;\n                      this.state.memfiles[last].fileurl = result.awsurl;\n                      mem.addFileToMemory({\n                        originalURL: this.state.memfiles[last].fileurl,\n                        thumbURL: this.state.memfiles[last].thumburl\n                      }, false, this.props.memory.memid).then(result => {\n                        if (result.success) {\n                          console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.renderCarouselControls = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"controlbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: left,\n        onClick: this.goBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: right,\n        onClick: this.goForward,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.goBack = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === 0) {\n          this.state.memfileIndex = ubound;\n        } else {\n          this.state.memfileIndex--;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.goForward = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === ubound) {\n          this.state.memfileIndex = 0;\n        } else {\n          this.state.memfileIndex++;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.addPeopleRef = React.createRef();\n    this.addCloudRef = React.createRef();\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      let memoryContent = this.renderMemoryContent();\n      let carouselControls = this.renderCarouselControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }\n      }, memoryContent, carouselControls));\n    } else {\n      return null;\n    }\n  } //------------------------------------------------------------------------\n\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","greycross","tick","tag","globe","calendar","key","author","x","edit","left","right","trash","hero","heroOutline","cloudIMG","MemoryFileViewer","mem","DropSearch","WordExctractor","Container","Draggable","Dropzone","useDropzone","CheckBox","SubTag","ImageLabel","MemoryModal","Component","constructor","props","state","memory","taggedPeople","memoryClouds","searchWords","memfiles","cloudPeople","userClouds","activefile","memfileIndex","editMode","showSelectPeople","showSelectClouds","addPeopleRef","addCloudRef","onHide","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","getUser","userid","setState","getTaggedPeople","people","getMemoryClouds","clouds","populateCloudInfo","getMemorySearchWords","words","populateSearchWords","getUserClouds","getHeroFile","map","memfile","index","ishero","getCloudPeople","toggleEditMode","userIsAuthorisedToEdit","deleteFileFromMemory","console","log","makeHeroFile","handleAddTaggedPerson","Person","tp","find","dude","push","reverse","addTaggedPerson","handleRemoveFromCloud","Cloud","cl","cloud","id","deleteTaggedCloud","then","result","handleDeleteTaggedPerson","p","deleteTaggedPerson","handleAddCloud","stry","newCloudID","parseInt","value","newcl","name","label","addTaggedCloud","toggleAddPeople","toggleAddCloud","current","getBoundingClientRect","activeFileisHero","afile","renderMemoryContent","imageZone","renderImageZone","storyZone","renderStoryZone","detailsZone","renderDetailsZone","handleSearchWordClick","itemKey","upState","ind","findIndex","item","included","JSON","stringify","updateMemword","renderKeyWords","e","applyDrag","wordItem","idx","keyword","arr","dragResult","removedIndex","addedIndex","payload","itemToAdd","splice","renderTaggedPeople","plus","firstname","lastname","renderDetails","location","getShortDate","createdon","renderClouds","editControls","imagezone","heroImg","acceptedFiles","handleDropfiles","getRootProps","getInputProps","onTitleBlur","newTitle","target","title","updateTitle","setMemorySearchWords","onDescriptionBlur","newDescription","description","updateDescription","onStoryBlur","newStory","story","updateStory","handleDescriptionChange","event","fulltext","addToSearchWords","handleTitleChange","handleStoryChange","textContent","addarray","addarray2","extract","language","remove_digits","return_changed_case","remove_duplicates","word","searchWordExists","strength","w","undefined","renderCornerControls","editBtn","deleteBtn","handleDeleteMemory","keywords","details","cornerCtrls","reader","FileReader","forEach","file","onload","canHandleDroppedFile","prepAndUploadFile","alert","getExtension","readAsArrayBuffer","onDeleteMemory","commonfileName","Date","now","ext","fname","tname","filebuffer","newMemfiles","fileurl","fileext","thumburl","thumbext","compressImage","success","data","resizeImage","uploadFile","awsurl","last","length","addFileToMemory","originalURL","thumbURL","renderCarouselControls","goBack","goForward","ubound","createRef","render","show","memoryContent","carouselControls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport greycross from '../images/x-grey.png'\nimport tick from '../images/tick.png'\nimport tag from '../images/tag.png'\nimport globe from '../images/outline-globe.png'\nimport calendar from '../images/calendar.png'\nimport key from '../images/key.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport edit from '../images/edit.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport trash from '../images/trash.png'\nimport hero from '../images/hero-full.png'\nimport heroOutline from '../images/hero-outline-grey.png'\nimport cloudIMG from '../images/cloud.png'\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport * as mem from '../memriioserver'\nimport * as DropSearch from '../dropsearch/dropsearch'\n\nimport WordExctractor from 'keyword-extractor'\nimport { Container, Draggable} from 'react-smooth-dnd'\nimport Dropzone,{useDropzone} from 'react-dropzone'\n\nimport './memorymodal.css'\n\nimport {CheckBox,SubTag,ImageLabel} from '../buttons/buttons'\n\nclass MemoryModal extends React.Component{\n  constructor(props) {\n    super(props);\n    this.addPeopleRef = React.createRef();\n    this.addCloudRef = React.createRef();\n  }\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[],         \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null,\n        author:null,\n        memfileIndex:0,\n        editMode:false,\n\n        showSelectPeople:false,\n        showSelectClouds:false,\n        addPeopleRef:null,\n        addCloudRef:null,\n        \n    }\n   \n\n  onHide = () =>{\n    this.state.editMode = false\n    this.props.onHideModal(this.props.memory)\n  }\n\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n\n        \n\n        this.populateMemoryFiles ( this.props.memfiles )\n        mem.getUser              ( this.props.memory.userid,(author => { this.setState({author:author})}))\n        mem.getTaggedPeople      ( this.props.memory.memid,(people => { this.setState({taggedPeople:people})}))\n        mem.getMemoryClouds      ( this.props.memory.memid,(clouds => { this.populateCloudInfo(clouds)}))\n        mem.getMemorySearchWords ( this.props.memory.memid,(words  => { this.populateSearchWords(words)}))\n        mem.getUserClouds        ( this.props.memory.userid,(clouds => { this.setState({userClouds:clouds})}))\n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    this.state.memfileIndex=0\n    if(this.state.memfiles){\n      let hero = this.state.memfiles[0]\n      this.state.memfiles.map((memfile,index)=> {\n  \n          if(memfile.ishero){         \n              this.state.memfileIndex = index            \n              hero = memfile\n          }\n      })\n      return hero\n    }else{\n      return null\n    }\n   \n  }\n//---------------------------------------------------------------------------------\n\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n\n//---------------------------------------------------------------------------------\n\n  populateSearchWords = (words) =>{\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n    this.setState({memoryClouds:clouds})\n    mem.getCloudPeople (clouds,((people)=>{\n      this.setState({cloudPeople:people})\n    }))   \n  }\n\n//------------------------------------------------------------------------\n\n  toggleEditMode =() =>{\n    this.setState({editMode:!this.state.editMode})\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  userIsAuthorisedToEdit = () =>{\n    return true\n  }\n\n  //------------------------------------------------------------------------\n\n  deleteFileFromMemory =() =>{\n    console.log('delte file from memroy');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n\n  makeHeroFile = () =>{\n    console.log('make hero file');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  handleAddTaggedPerson = (Person) =>{\n    \n    let tp = this.state.taggedPeople\n    if(!tp.find(dude => dude.userid === Person.userid)){\n      tp.push(Person)\n      tp.reverse()\n      this.setState({taggedPeople:tp})\n      mem.addTaggedPerson(this.props.memory.memid,Person.userid)\n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  handleRemoveFromCloud = ( Cloud ) =>{\n    let cl = []\n    this.state.memoryClouds.map(cloud =>{if(cloud.id !== Cloud.id) cl.push(cloud)})\n    mem.deleteTaggedCloud(this.props.memory.memid,Cloud.id)\n    .then(result =>{\n      this.populateCloudInfo(cl)\n    })\n\n  }\n\n  //------------------------------------------------------------------------\n\n  handleDeleteTaggedPerson = (Person) =>{\n    let tp = []\n    this.state.taggedPeople.map( p =>{if(p.userid !== Person.userid)tp.push(p)})\n    this.setState({taggedPeople:tp})\n    mem.deleteTaggedPerson(this.props.memory.memid,Person.userid)\n  }\n\n  //------------------------------------------------------------------------\n\n  handleAddCloud = (clouds) =>{\n    let cloud = clouds[0]\n    let cl = this.state.memoryClouds\n    console.log('memorymodal.handleaAddCloud newCloud : ' + mem.stry(cloud))\n    let newCloudID = parseInt(cloud.value)\n    if(!cl.find(newcl => newcl.id === newCloudID)){\n\n      cl.push({\n        id:newCloudID,\n        name:cloud.label\n      })\n      cl.reverse()\n      this.setState({memoryClouds:cl})\n      mem.addTaggedCloud(this.props.memory.memid,newCloudID)\n      .then(result => {\n        this.populateCloudInfo(cl)\n      })\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  toggleAddPeople = () =>{ \n    this.setState({showSelectPeople:!this.state.showSelectPeople}) \n    console.log(\"showSelectPeople : \" + this.state.showSelectPeople);\n  }\n\n  //------------------------------------------------------------------------\n  \n  toggleAddCloud = () =>{ \n    this.setState({showSelectClouds:!this.state.showSelectClouds}) \n    console.log(\"showSelectCloud : \" + this.addCloudRef.current.getBoundingClientRect().x  );\n  }\n\n  //------------------------------------------------------------------------\n  activeFileisHero =() =>{\n    var afile = this.state.activefile\n    \n    if(afile){\n      if(afile.ishero){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  render(){\n    \n   \n    if(this.props.show){\n     \n      \n        let memoryContent = this.renderMemoryContent()\n        let carouselControls = this.renderCarouselControls()\n        return(\n          <div className= 'backdropStyle'>\n            <div className='modalStyle'>\n              {memoryContent}   \n              {carouselControls}\n            </div>\n          </div>\n        )\n    \n  }else{\n    return null\n  }    \n}\n\n//------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    \n  const imageZone   = this.renderImageZone()\n  const storyZone   = this.renderStoryZone()\n  const detailsZone = this.renderDetailsZone()\n    return (\n        <div className='modalrow'>\n          {imageZone}\n          {storyZone}\n          {detailsZone}\n        </div>\n    )\n}\n  \n//------------------------------------------------------------------------\n\nhandleSearchWordClick = (itemKey,upState) =>{\n  \n  const ind = this.state.searchWords.findIndex(item =>{return item.id === itemKey})\n  this.state.searchWords[ind].included = upState\n  console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]))\n  mem.updateMemword(this.state.searchWords[ind])\n  this.setState({searchWords:this.state.searchWords})\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n \n  if(this.state.editMode)\n  {\n    return (\n      <Container  onDrop={e => this.setState({searchWords:this.applyDrag(this.state.searchWords,e)})}>\n      \n        {\n          this.state.searchWords.map((wordItem, idx) => {\n            return (\n              <Draggable className='wordListItem' key={'k'+idx}>\n                <CheckBox \n                  itemKey = {wordItem.id}\n                  onClick = {this.handleSearchWordClick}\n                  upState = {wordItem.included} \n                  downImg = {greycross} \n                  upImg   = {tick} \n                  label   = {wordItem.keyword}\n                />\n              </Draggable> \n            )\n          })\n        }\n      </Container>\n)\n  }else{\n    return (\n      \n        <div>\n        {\n          this.state.searchWords.map((wordItem, idx) => {\n            if(wordItem.included)\n            { \n              return (\n                <li className='wordListItem' key={'k'+idx}>\n                  <ImageLabel leftImg = {key} label = {wordItem.keyword}/>\n                </li> \n              )\n            }\n          })\n        }\n        </div>\n    )\n  }\n}\n\n//------------------------------------------------------------------------\n\napplyDrag = (arr, dragResult) => {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n  if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n  if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n  return result;\n};\n\n//------------------------------------------------------------------------\n\n\nrenderTaggedPeople =() =>{\nlet plus = null\n  if(this.state.editMode){\n    const people  = this.state.taggedPeople.map(\n      p => {\n          return (\n            <li \n              className='wordListItem'\n              key={'p' + p.userid}>\n                <ImageLabel \n                  data          = { p   }\n                  leftImg       = { tag } \n                  badge         = { x   } \n                  onBadgeClick  = { this.handleDeleteTaggedPerson  }\n                  label         = { p.firstname + ' ' + p.lastname }/>                                                        \n            </li>\n          )\n        })\n        if(this.state.author){\n          people.push(      \n            <li \n              className='wordListItem'\n              key={'a' + this.state.author.userid}>\n              <ImageLabel \n                leftImg = { author}\n                label =   { this.state.author.firstname + ' ' + this.state.author.lastname}/>\n            </li>\n          ) \n        }\n        people.reverse()   \n        people.push(      \n          <li \n            ref = { this.addPeopleRef } \n            className='wordListItem'\n            key={'addPerson'}>\n            <ImageLabel \n              \n              onClick = { this.toggleAddPeople }\n              label   = { '+ add' }\n            />\n          </li>\n        ) \n        \n        \n        return people\n  }else{\n    const people  = this.state.taggedPeople.map(\n      p => {\n          return (\n            <li \n              className='wordListItem'\n              key={'t' + p.userid}><ImageLabel leftImg = {tag} label = {p.firstname+' '+p.lastname}/>                                                        \n            </li>\n          )\n        })\n        if(this.state.author){\n          people.push(      \n            <li \n              className='wordListItem'\n              key={'a' + this.state.author.userid}>\n              <ImageLabel \n                leftImg = {author}\n                label = {this.state.author.firstname + ' ' + this.state.author.lastname}/>\n            </li>\n          ) \n        }\n        people.reverse()   \n    return people\n  }\n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  \n  if(this.props.memory){    \n   return (\n      <div>\n        <li \n          className='wordListItem'\n          key={'location'}><ImageLabel leftImg = {globe} label = {this.props.memory.location}/>\n        </li>\n        <li \n          className='wordListItem'\n          key={'sss'}><ImageLabel leftImg = {calendar} label = {mem.getShortDate(this.props.memory.createdon) }/>\n        </li>\n      </div>\n   )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderClouds =() => {\n  \n  if(this.state.editMode ){\n    const clouds  = this.state.memoryClouds.map(\n      cloud => {\n          return (\n            <li \n              className='wordListItem'\n              key={'cloud' + cloud.id}><ImageLabel \n                data          = { cloud }\n                badge         = { x   } \n                onBadgeClick  = { this.handleRemoveFromCloud  }\n                leftImg = {cloudIMG} \n                label = {cloud.name}/>                            \n            </li>\n          )\n        })\n        clouds.push(      \n          <li \n            ref = { this.addCloudRef }\n            className='wordListItem'\n            key={'addCloud'}>\n            <ImageLabel \n              onClick = { this.toggleAddCloud }\n              label =   { '+ add'}/>\n          </li>\n        ) \n        \n        return clouds\n  }else{\n    const clouds  = this.state.memoryClouds.map(\n      cloud => {\n          return (\n            <li \n              className='wordListItem'\n              key={'cloud' + cloud.id}><ImageLabel leftImg = {cloudIMG} label = {cloud.name}/>                                                        \n            </li>\n          )\n        })        \n        return clouds\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderImageZone =()=>{\n  let editControls=null\n  let imagezone = null\n\n  if(this.state.editMode ){\n    var heroImg = this.activeFileisHero() ? hero : heroOutline;\n\n    editControls = \n    <div className = 'imageEditConrols' >\n      <img  \n        className='closeBtn'\n        src = {trash}\n        onClick={this.deleteFileFromMemory} \n        />\n      <img  \n        className='closeBtn'\n        src = {heroImg}\n        onClick = {this.makeHeroFile}\n       />\n    </div>\n\n    return (\n      <Dropzone onDrop={acceptedFiles => this.handleDropfiles(acceptedFiles)}>\n        {\n          ({getRootProps, getInputProps}) => (              \n            <div className='imgcolumn' {...getRootProps()} >\n              <MemoryFileViewer \n                memfile={this.state.activefile}\n                thumbStyleClass={'memoryModalImage'}\n                fileStyleClass={'memoryModalImage'}\n              />\n              {editControls}\n            </div>          \n          )\n        }\n      </Dropzone>\n    )\n  }else{\n    return (\n      <div className='imgcolumn'>\n        <MemoryFileViewer \n          memfile={this.state.activefile}\n          thumbStyleClass={'memoryModalImage'}\n          fileStyleClass={'memoryModalImage'}\n        />       \n      </div>\n    )\n  }\n\n  \n}\n\nonTitleBlur = (e) => {\n  \n  const newTitle = e.target.value\n  this.props.memory.title = newTitle\n  mem.updateTitle(this.props.memory.memid,newTitle)\n  mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)    \n  \n}\n//------------------------------------------------------------------------\n\nonDescriptionBlur = (e) => {\n  \n  const newDescription = e.target.value\n  this.props.memory.description = newDescription\n  mem.updateDescription(this.props.memory.memid,newDescription)\n  mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n    \n}\n//------------------------------------------------------------------------\n\nonStoryBlur = (e) => {\n \n  const newStory = e.target.value\n  this.props.memory.story = newStory\n  mem.updateStory(this.props.memory.memid,newStory)    \n  mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n\n}\n\n//------------------------------------------------------------------------\n\nhandleDescriptionChange = (event) => {\n  let fulltext = this.props.memory.title + ' ' + this.props.memory.story + ' ' + event.target.value\n  this.addToSearchWords(fulltext)\n  this.props.memory.description = event.target.value\n}\n\nhandleTitleChange       = (event) => {\n\n  let fulltext = this.props.memory.description + ' ' + this.props.memory.story + ' ' + event.target.value\n  this.addToSearchWords(fulltext) \n  this.props.memory.title = event.target.value\n}\n\nhandleStoryChange       = (event) => {\n  let fulltext = this.props.memory.description + ' ' + this.props.memory.title + ' ' + event.target.value\n  this.addToSearchWords(fulltext)\n  this.props.memory.story = event.target.value\n}\n\naddToSearchWords = (textContent) =>{\n  let addarray = this.state.searchWords\n  let addarray2 = []  \n  let words = WordExctractor.extract(textContent,\n                                      {\n                                          language:\"english\",\n                                          remove_digits: true,\n                                          return_changed_case:true,\n                                          remove_duplicates: true\n                                      })\n    \n  // add any new words that exist in the story\n  words.map(word =>{\n      if(!this.searchWordExists(word)){\n        addarray.push({included:true,keyword:word,strength:0})       \n      }      \n  })\n\n  // remove any search words that now longer exist in the story\n  addarray.map(w =>{    \n    if(words.find(word => w.keyword === word) !== undefined){      \n      addarray2.push({included:w.included,keyword:w.keyword,strength:w.strength})\n    }   \n  })\n\n  this.setState({searchWords:addarray2})  \n}\n\n//------------------------------------------------------------------------\n\nsearchWordExists = (word) => {\n  return this.state.searchWords.find(wordItem => word === wordItem.keyword)    \n}\n\n//------------------------------------------------------------------------\n\nrenderStoryZone = () =>{\n  const mem = this.props.memory\n\n  if( this.state.editMode )\n  {\n    return (\n      <div className = 'infoColumn'>\n        <input \n            onBlur = { this.onTitleBlur } className='input-reset titleEdit' onChange = { this.handleTitleChange }\n            type=\"text\"  defaultValue = { mem.title } placeholder='Title' id=\"title\" />\n        <input \n            onBlur = {this.onDescriptionBlur} className='input-reset descriptionEdit'  onChange = { this.handleDescriptionChange }\n            type=\"text\"  defaultValue = { mem.description } placeholder='Description' id=\"description\" />\n        <textarea\n            onBlur   = { this.onStoryBlur } className='input-reset storyEdit' onChange = { this.handleStoryChange } \n            type=\"text\"  defaultValue = { mem.story } placeholder='Description' id=\"description\" /> \n      </div> \n    )\n  }else{\n    return (\n      <div className = 'infoColumn'>\n        <h4>{ mem.title } </h4>\n        <p className=\"f6 lh-copy i measure mt2 mid-gray\">{ mem.description }</p>\n        <p className=\"f6 lh-copy measure mt2 black\"> { mem.story } </p>\n      </div>  \n    )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderCornerControls =() =>{\n  let editBtn = null\n  let deleteBtn = null\n  if(this.userIsAuthorisedToEdit()){\n    editBtn=\n      <img  \n      className='closeBtn'                   \n      src = {edit}\n      onClick={this.toggleEditMode} />\n\n    deleteBtn=\n    <img  \n    className='closeBtn'                   \n    src = {trash}\n    onClick={this.handleDeleteMemory} />\n    \n  }\n  return (\n    <div className='footer'>    \n      {deleteBtn}   \n\n      <img  \n        className='closeBtn'                   \n        src = {x}\n        onClick={this.onHide} />\n\n      {editBtn}\n\n    </div>\n\n  )\n}\n//------------------------------------------------------------------------\n\n\n\nrenderDetailsZone = () => {\n\n  const keywords     = this.renderKeyWords()\n  const people       = this.renderTaggedPeople()\n  const details      = this.renderDetails()\n  const clouds       = this.renderClouds()\n  const cornerCtrls  = this.renderCornerControls()\n  \n\n  return (\n    <div className = 'detailsColumn'>\n      <div className = 'z40'> \n        <h4>Tags </h4>\n        <ul className='keyWordList scroll' >  { keywords } </ul>\n      </div>\n      <div className = 'z25'>\n        <h4>People</h4>\n        <ul className='peopleList scroll' >   { people   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Clouds</h4>\n        <ul className='cloudList scroll' >    { clouds   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Details</h4>\n        <ul className='detailsList ' >        { details  } </ul>\n      </div>\n      {cornerCtrls}              \n    </div>  \n  )\n}\n\n//------------------------------------------------------------------------\n\nhandleDropfiles = async (acceptedFiles) =>{\n  \n  const reader = new FileReader()\n  acceptedFiles.forEach((file) => {\n    \n    reader.onload = () => {\n      console.log('onload ' + file.name);\n      if(mem.canHandleDroppedFile(file.name)){\n        this.prepAndUploadFile(file)\n      }else{\n        alert('File type ' + mem.getExtension(file.name) + ' not yet implemented' )\n      }\n    }\n\n  reader.readAsArrayBuffer(file) \n\n  })\n}\n\n//------------------------------------------------------------------------\n\nhandleDeleteMemory = ( ) => {\n \n this.props.onDeleteMemory(this.props.memory)\n\n}\n\n//------------------------------------------------------------------------\n\nprepAndUploadFile = (file)=>{\n \n  let commonfileName = this.state.author.userid + '-' + this.props.memory.memid + '-' + Date.now()\n  let ext = mem.getExtension(file.name)\n  let fname = commonfileName + '-original'  + '.' + ext\n  let tname = commonfileName + '-thumb'     + '.' + ext\n  let filebuffer = null\n  let newMemfiles = this.state.memfiles\n  let memfile = {\n    id:0,\n    memid:this.props.memory.memid,\n    fileurl:'',\n    ishero:false,\n    fileext:ext,\n    thumburl:'',\n    thumbext:ext,\n  }\n  \n  mem.compressImage(file,0.9)\n      .then(result =>{\n        if(result.success){\n          filebuffer = result.data\n          mem.resizeImage(filebuffer,1500)\n          .then(result =>{\n            if(result.success){ \n            mem.uploadFile(tname,result.data)\n            .then(result =>{\n              if(result.success){\n                memfile.thumburl = result.awsurl\n                newMemfiles.push(memfile)\n                this.setState({memfiles:newMemfiles})\n                mem.uploadFile(fname,filebuffer)\n                .then(result =>{\n                  if(result.success){\n                    let last = this.state.memfiles.length-1\n                    this.state.memfiles[last].fileurl=result.awsurl\n                    mem.addFileToMemory({\n                        originalURL:this.state.memfiles[last].fileurl,\n                        thumbURL:this.state.memfiles[last].thumburl\n                    },false,this.props.memory.memid)\n                    .then(result => {\n                      if(result.success){\n                        console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n\n                      }\n                    })\n                  }\n                })\n              }\n            })\n            }\n          })\n        }\n        }) \n}\n\n//------------------------------------------------------------------------\n\nrenderCarouselControls = () => {\n\n  return (\n    <div className='controlbox'>\n      <img className='closeBtn' src = {left} onClick={this.goBack} /> \n      \n      <img className='closeBtn' src = {right} onClick={this.goForward} /> \n    </div>\n  )\n}\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === 0){\n      this.state.memfileIndex = ubound \n    }else{\n      this.state.memfileIndex--\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }\n}\n\ngoForward = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }    \n}\n\n};  \n\nexport default MemoryModal;\n"]},"metadata":{},"sourceType":"module"}