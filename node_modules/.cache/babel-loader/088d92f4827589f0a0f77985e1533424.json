{"ast":null,"code":"// Wrap\n// wraps a string by a certain width\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function wrap(str, options) {\n  str = makeString(str);\n  options = options || {};\n  var width = options.width || 75;\n  var seperator = options.seperator || '\\n';\n  var cut = options.cut || false;\n  var preserveSpaces = options.preserveSpaces || false;\n  var trailingSpaces = options.trailingSpaces || false;\n  var result;\n\n  if (width <= 0) {\n    return str;\n  } else if (!cut) {\n    var words = str.split(' ');\n    var current_column = 0;\n    result = '';\n\n    while (words.length > 0) {\n      // if adding a space and the next word would cause this line to be longer than width...\n      if (1 + words[0].length + current_column > width) {\n        //start a new line if this line is not already empty\n        if (current_column > 0) {\n          // add a space at the end of the line is preserveSpaces is true\n          if (preserveSpaces) {\n            result += ' ';\n            current_column++;\n          } // fill the rest of the line with spaces if trailingSpaces option is true\n          else if (trailingSpaces) {\n              while (current_column < width) {\n                result += ' ';\n                current_column++;\n              }\n            } //start new line\n\n\n          result += seperator;\n          current_column = 0;\n        }\n      } // if not at the begining of the line, add a space in front of the word\n\n\n      if (current_column > 0) {\n        result += ' ';\n        current_column++;\n      } // tack on the next word, update current column, a pop words array\n\n\n      result += words[0];\n      current_column += words[0].length;\n      words.shift();\n    } // fill the rest of the line with spaces if trailingSpaces option is true\n\n\n    if (trailingSpaces) {\n      while (current_column < width) {\n        result += ' ';\n        current_column++;\n      }\n    }\n\n    return result;\n  } else {\n    var index = 0;\n    result = ''; // walk through each character and add seperators where appropriate\n\n    while (index < str.length) {\n      if (index % width == 0 && index > 0) {\n        result += seperator;\n      }\n\n      result += str.charAt(index);\n      index++;\n    } // fill the rest of the line with spaces if trailingSpaces option is true\n\n\n    if (trailingSpaces) {\n      while (index % width > 0) {\n        result += ' ';\n        index++;\n      }\n    }\n\n    return result;\n  }\n};","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/node_modules/underscore.string/wrap.js"],"names":["makeString","require","module","exports","wrap","str","options","width","seperator","cut","preserveSpaces","trailingSpaces","result","words","split","current_column","length","shift","index","charAt"],"mappings":"AAAA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,GAAd,EAAmBC,OAAnB,EAA2B;AAC1CD,EAAAA,GAAG,GAAGL,UAAU,CAACK,GAAD,CAAhB;AAEAC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIC,KAAK,GAAGD,OAAO,CAACC,KAAR,IAAiB,EAA7B;AACA,MAAIC,SAAS,GAAGF,OAAO,CAACE,SAAR,IAAqB,IAArC;AACA,MAAIC,GAAG,GAAGH,OAAO,CAACG,GAAR,IAAe,KAAzB;AACA,MAAIC,cAAc,GAAGJ,OAAO,CAACI,cAAR,IAA0B,KAA/C;AACA,MAAIC,cAAc,GAAGL,OAAO,CAACK,cAAR,IAA0B,KAA/C;AAEA,MAAIC,MAAJ;;AAEA,MAAGL,KAAK,IAAI,CAAZ,EAAc;AACZ,WAAOF,GAAP;AACD,GAFD,MAIK,IAAG,CAACI,GAAJ,EAAQ;AAEX,QAAII,KAAK,GAAGR,GAAG,CAACS,KAAJ,CAAU,GAAV,CAAZ;AACA,QAAIC,cAAc,GAAG,CAArB;AACAH,IAAAA,MAAM,GAAG,EAAT;;AAEA,WAAMC,KAAK,CAACG,MAAN,GAAe,CAArB,EAAuB;AAErB;AACA,UAAG,IAAIH,KAAK,CAAC,CAAD,CAAL,CAASG,MAAb,GAAsBD,cAAtB,GAAuCR,KAA1C,EAAgD;AAC9C;AACA,YAAGQ,cAAc,GAAG,CAApB,EAAsB;AACpB;AACA,cAAIL,cAAJ,EAAmB;AACjBE,YAAAA,MAAM,IAAI,GAAV;AACAG,YAAAA,cAAc;AACf,WAHD,CAIA;AAJA,eAKK,IAAGJ,cAAH,EAAkB;AACrB,qBAAMI,cAAc,GAAGR,KAAvB,EAA6B;AAC3BK,gBAAAA,MAAM,IAAI,GAAV;AACAG,gBAAAA,cAAc;AACf;AACF,aAZmB,CAapB;;;AACAH,UAAAA,MAAM,IAAIJ,SAAV;AACAO,UAAAA,cAAc,GAAG,CAAjB;AACD;AACF,OAtBoB,CAwBrB;;;AACA,UAAGA,cAAc,GAAG,CAApB,EAAsB;AACpBH,QAAAA,MAAM,IAAI,GAAV;AACAG,QAAAA,cAAc;AACf,OA5BoB,CA8BrB;;;AACAH,MAAAA,MAAM,IAAIC,KAAK,CAAC,CAAD,CAAf;AACAE,MAAAA,cAAc,IAAIF,KAAK,CAAC,CAAD,CAAL,CAASG,MAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;AAED,KAzCU,CA2CX;;;AACA,QAAGN,cAAH,EAAkB;AAChB,aAAMI,cAAc,GAAGR,KAAvB,EAA6B;AAC3BK,QAAAA,MAAM,IAAI,GAAV;AACAG,QAAAA,cAAc;AACf;AACF;;AAED,WAAOH,MAAP;AAED,GArDI,MAuDA;AAEH,QAAIM,KAAK,GAAG,CAAZ;AACAN,IAAAA,MAAM,GAAG,EAAT,CAHG,CAKH;;AACA,WAAMM,KAAK,GAAGb,GAAG,CAACW,MAAlB,EAAyB;AACvB,UAAGE,KAAK,GAAGX,KAAR,IAAiB,CAAjB,IAAsBW,KAAK,GAAG,CAAjC,EAAmC;AACjCN,QAAAA,MAAM,IAAIJ,SAAV;AACD;;AACDI,MAAAA,MAAM,IAAIP,GAAG,CAACc,MAAJ,CAAWD,KAAX,CAAV;AACAA,MAAAA,KAAK;AACN,KAZE,CAcH;;;AACA,QAAGP,cAAH,EAAkB;AAChB,aAAMO,KAAK,GAAGX,KAAR,GAAgB,CAAtB,EAAwB;AACtBK,QAAAA,MAAM,IAAI,GAAV;AACAM,QAAAA,KAAK;AACN;AACF;;AAED,WAAON,MAAP;AACD;AACF,CAhGD","sourcesContent":["// Wrap\n// wraps a string by a certain width\n\nvar makeString = require('./helper/makeString');\n\nmodule.exports = function wrap(str, options){\n  str = makeString(str);\n  \n  options = options || {};\n  \n  var width = options.width || 75;\n  var seperator = options.seperator || '\\n';\n  var cut = options.cut || false;\n  var preserveSpaces = options.preserveSpaces || false;\n  var trailingSpaces = options.trailingSpaces || false;\n  \n  var result;\n  \n  if(width <= 0){\n    return str;\n  }\n  \n  else if(!cut){\n  \n    var words = str.split(' ');\n    var current_column = 0;\n    result = '';\n  \n    while(words.length > 0){\n      \n      // if adding a space and the next word would cause this line to be longer than width...\n      if(1 + words[0].length + current_column > width){\n        //start a new line if this line is not already empty\n        if(current_column > 0){\n          // add a space at the end of the line is preserveSpaces is true\n          if (preserveSpaces){\n            result += ' ';\n            current_column++;\n          }\n          // fill the rest of the line with spaces if trailingSpaces option is true\n          else if(trailingSpaces){\n            while(current_column < width){\n              result += ' ';\n              current_column++;\n            }            \n          }\n          //start new line\n          result += seperator;\n          current_column = 0;\n        }\n      }\n  \n      // if not at the begining of the line, add a space in front of the word\n      if(current_column > 0){\n        result += ' ';\n        current_column++;\n      }\n  \n      // tack on the next word, update current column, a pop words array\n      result += words[0];\n      current_column += words[0].length;\n      words.shift();\n  \n    }\n  \n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if(trailingSpaces){\n      while(current_column < width){\n        result += ' ';\n        current_column++;\n      }            \n    }\n  \n    return result;\n  \n  }\n  \n  else {\n  \n    var index = 0;\n    result = '';\n  \n    // walk through each character and add seperators where appropriate\n    while(index < str.length){\n      if(index % width == 0 && index > 0){\n        result += seperator;\n      }\n      result += str.charAt(index);\n      index++;\n    }\n  \n    // fill the rest of the line with spaces if trailingSpaces option is true\n    if(trailingSpaces){\n      while(index % width > 0){\n        result += ' ';\n        index++;\n      }            \n    }\n    \n    return result;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}