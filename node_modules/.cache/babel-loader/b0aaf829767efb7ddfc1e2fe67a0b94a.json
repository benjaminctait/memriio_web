{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/cardcollection/cardcollection.js\";\nimport React from 'react';\nimport { BaseCard, ShortCard } from './card';\nimport MemoryModal from '../memorymodal/memorymodal';\nimport Masonry from 'react-masonry-component';\nimport './cardcollection.css';\n\nclass CardCollection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      memories: null,\n      activeUser: null,\n      showMemoryModal: false,\n      activeMemory: null\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      console.log('update called');\n\n      if (prevState.memories !== this.state.memories) {\n        this.setState({\n          memories: this.props.memories\n        });\n      }\n    };\n\n    this.onEditMemory = memory => {\n      this.props.onEditMemory(memory);\n    };\n\n    this.onShowModal = (memory, memfiles) => {\n      this.state.activeMemory = memory;\n      this.state.memfiles = memfiles;\n      this.setState({\n        showMemoryModal: !this.state.showMemoryModal\n      });\n    };\n\n    this.onDeleteMemory = memory => {\n      alert('delete memory called for memid : ' + memory.memid);\n      this.setState({\n        showMemoryModal: !this.state.showMemoryModal\n      });\n      this.masonry.items.map(card => {\n        console.log('-----------------------------------------------------');\n        console.log(card.id);\n      }); //this.masonry.remove()\n    };\n\n    this.onCardClick = memid => {\n      console.log(memid);\n      let newmem = [];\n      this.state.memories.map(mem => {\n        console.log('memid ' + mem.memid + ' !== ' + memid);\n        if (mem.memid !== memid) newmem.push(mem);\n      });\n      this.setState({\n        memories: newmem\n      });\n    };\n\n    this.state = {\n      memories: props.memories,\n      activeUser: props.userid,\n      layoutcount: 0\n    };\n  }\n\n  //-------------------------------------------------------------------------------\n  render() {\n    if (Array.isArray(this.state.memories)) {\n      console.log('CarCollection-render : memory count : ' + this.state.memories.length);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"bigContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: 'col-right-0',\n        id: \"col1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col\",\n        id: \"col2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Masonry, {\n        ref: function (c) {\n          this.masonry = this.masonry || c.masonry;\n        }.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }, this.state.memories.map(memory => {\n        let ukey = 'memcard' + memory.memid;\n\n        if (memory.cardtype == 0) {\n          return /*#__PURE__*/React.createElement(BaseCard, {\n            key: ukey,\n            memory: memory,\n            onEdit: this.onEditMemory,\n            onShowModal: this.onShowModal,\n            onCardClick: this.onCardClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 45\n            }\n          });\n        } else if (memory.cardtype == 1) {\n          return /*#__PURE__*/React.createElement(ShortCard, {\n            key: ukey,\n            memory: memory,\n            onEdit: this.onEditMemory,\n            onShowModal: this.onShowModal,\n            onCardClick: this.onCardClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 45\n            }\n          });\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-right-0\",\n        id: \"col3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(MemoryModal, {\n        key: 'memmodal' + 42,\n        memory: this.state.activeMemory,\n        memfiles: this.state.memfiles,\n        show: this.state.showMemoryModal,\n        onHideModal: this.onShowModal,\n        onDeleteMemory: this.onDeleteMemory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, \"No memories Found\");\n    }\n  }\n\n}\n\nexport default CardCollection;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/cardcollection/cardcollection.js"],"names":["React","BaseCard","ShortCard","MemoryModal","Masonry","CardCollection","Component","constructor","props","state","memories","activeUser","showMemoryModal","activeMemory","componentDidUpdate","prevProps","prevState","console","log","setState","onEditMemory","memory","onShowModal","memfiles","onDeleteMemory","alert","memid","masonry","items","map","card","id","onCardClick","newmem","mem","push","userid","layoutcount","render","Array","isArray","length","c","bind","ukey","cardtype"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {BaseCard,ShortCard} from './card'\nimport MemoryModal from '../memorymodal/memorymodal'\nimport Masonry from 'react-masonry-component';\n\nimport './cardcollection.css'\n\n\n\n\nclass CardCollection extends React.Component{\n\n    constructor(props){\n        super(props)        \n        this.state={\n            memories:props.memories,\n            activeUser:props.userid,\n            layoutcount:0\n        }\n    }\n    \n    state={\n        memories:null,\n        activeUser:null,\n        showMemoryModal:false,\n        activeMemory:null,       \n        \n    }\n\n\ncomponentDidUpdate = (prevProps,prevState) =>{\n    console.log('update called');\n    if(prevState.memories !== this.state.memories){\n        this.setState({memories:this.props.memories})\n    }\n}\n\n//-------------------------------------------------------------------------------\n\nonEditMemory = (memory) => {\n    this.props.onEditMemory(memory)    \n}\n\n//-------------------------------------------------------------------------------\n\nonShowModal = (memory,memfiles) => {\n        this.state.activeMemory = memory\n        this.state.memfiles = memfiles\n        this.setState({showMemoryModal:!this.state.showMemoryModal})\n        \n    }\n//-------------------------------------------------------------------------------\n\nonDeleteMemory = (memory) =>{\n    alert('delete memory called for memid : ' +  memory.memid)\n    this.setState({showMemoryModal:!this.state.showMemoryModal})\n    this.masonry.items.map(card => { \n        console.log('-----------------------------------------------------');\n        console.log(card.id);\n    })\n    //this.masonry.remove()\n}\n\n//-------------------------------------------------------------------------------\n\nonCardClick = (memid) =>{\nconsole.log(memid);\nlet newmem = []\nthis.state.memories.map( mem => {\n    console.log('memid ' + mem.memid + ' !== ' + memid);\n    if(mem.memid !== memid) newmem.push(mem)\n})\n\nthis.setState( { memories : newmem } )\n\n}\n\n//-------------------------------------------------------------------------------\n\n    \n    render(){\n        if(Array.isArray(this.state.memories)){\n            console.log('CarCollection-render : memory count : ' + this.state.memories.length);\n            \n            return (\n            <div className='bigContainer'>\n                <div id=\"container\" >\n                    <div class={'col-right-0'} id=\"col1\"></div>\n                        <div class=\"col\" id=\"col2\">\n                        \n                            <Masonry                                \n                                ref={function(c) {this.masonry = this.masonry || c.masonry;}.bind(this)} \n                                >                          \n                                {  this.state.memories.map(memory => {\n                                    let ukey = 'memcard' + memory.memid                                    \n                                    if(memory.cardtype == 0){\n                                        return (\n                                            <BaseCard\n                                                key={ukey} \n                                                memory={memory}\n                                                onEdit = {this.onEditMemory}\n                                                onShowModal = {this.onShowModal}\n                                                onCardClick = {this.onCardClick}\n                                                />)\n                                    }else if (memory.cardtype == 1){\n                                        return (\n                                            <ShortCard\n                                                key={ukey} \n                                                memory={memory}\n                                                onEdit = {this.onEditMemory}\n                                                onShowModal = {this.onShowModal}\n                                                onCardClick = {this.onCardClick}\n                                            />)\n                                    } \n                                    })                                   \n                                }                             \n                            </Masonry>       \n                               \n                    </div>\n                    <div class='col-right-0' id=\"col3\"></div>\n                </div>\n                <MemoryModal \n                    key         = { 'memmodal' + 42}\n                    memory      = { this.state.activeMemory}\n                    memfiles    = { this.state.memfiles}\n                    show        = { this.state.showMemoryModal}\n                    onHideModal = { this.onShowModal}\n                    onDeleteMemory = { this.onDeleteMemory } \n                > \n                </MemoryModal>           \n            </div>        \n                    \n                \n            )\n        }else{\n            return (\n                <div> \n                    No memories Found\n                </div>\n            )\n        }   \n    }\n\n\n}\n\n\nexport default CardCollection; \n\n  \n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}