{"ast":null,"code":"import React from 'react';\nimport Compressor from 'compressorjs';\nimport { unstable_batchedUpdates } from 'react-dom';\n\nfunction memriiolog(log, data) {\n  if (log) console.log(data);\n} //--Returns and array of of images and related meta data from the server-----------------------------------------------\n\n\nexport function getAllMemoryFiles(memoryid, callback) {\n  memriiolog(true, 'Memriio.getAllMemoryFiles : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'server response : ' + res.success);\n      memriiolog(false, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople(memoryid, callback) {\n  memriiolog(false, 'Memriio.getTaggedPeople : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'server response : ' + res.success);\n      memriiolog(false, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords(memoryid, callback) {\n  memriiolog(false, 'Memriio.getMemorySearchWords : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getMemorySearchWords server response : ' + res.success);\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords(memoryid, searchwords) {\n  memriiolog(false, 'Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length);\n  fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      searchwords: searchwords\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'setMemorySearchWords server response : ' + res.success);\n    } else {\n      memriiolog(false, 'setMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds(memoryid, callback) {\n  memriiolog(false, 'Memriio.getMemoryclouds : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getMemoryclouds server response : ' + res.success);\n      memriiolog(false, 'getMemoryclouds response data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getMemoryclouds server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople(clouds, callback) {\n  memriiolog(false, 'Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds));\n  fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      clouds: clouds\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getCloudPeople server response : ' + res.success);\n      memriiolog(false, 'getCloudPeople response data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getCloudPeople server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateHeroImage(memoryid, heroImageid) {\n  memriiolog(false, 'Memriio.getAllImages : memoryid ' + memoryid);\n} //------------------------------------------------------------\n\nexport function updateTitle(memoryid, newTitle) {\n  memriiolog(false, 'Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newTitle: newTitle\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateTitle : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateTitle : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateDescription(memoryid, newDescription) {\n  memriiolog(false, 'Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newDescription: newDescription\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateDescription : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateDescription : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function deleteMemory(memoryid) {\n  memriiolog(false, 'Memriio.deleteMemory : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteMemory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteMemory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateStory(memoryid, newStory) {\n  let len = 0;\n\n  if (newStory) {\n    len = newStory.length;\n  }\n\n  memriiolog(false, 'Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars');\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newStory: newStory\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateStory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateStory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateTaggedPeople(memoryid, taggedPeople) {} //------------------------------------------------------------\n\nexport function updateClouds(memoryid, clouds) {} //------------------------------------------------------------\n\nexport function updateMemword(searchword) {\n  memriiolog(false, 'Memriio.updateMemword :memword ' + JSON.stringify(searchword));\n  fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: searchword.id,\n      memid: searchword.memid,\n      keyword: searchword.keyword,\n      strength: searchword.strength,\n      included: searchword.included\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateMemword :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateMemword :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateCardType(memoryid, cardtype) {\n  memriiolog(false, 'Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      cardtype: cardtype\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateCardType :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateCardType :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateLocation(memoryid, newLocation) {\n  memriiolog(false, 'Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newLocation: newLocation\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateLocation :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateLocation :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedPerson(memoryid, userid) {\n  memriiolog(false, 'Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'addTaggedPerson :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'addTaggedPerson :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedCloud(memoryid, cloudid) {\n  memriiolog(false, 'Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid);\n  fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      groupid: cloudid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'addTaggedCloud :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'addTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function deleteTaggedPerson(memoryid, userid) {\n  memriiolog(false, 'Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteTaggedPerson :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage(memoryid, fileurl) {\n  memriiolog(false, 'Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteMemoryImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteMemoryImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage(memoryid, fileurl) {\n  memriiolog(false, 'Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'setHeroImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'setHeroImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud(memoryid, cloudid) {\n  memriiolog(false, 'Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid);\n  fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      cloudid: cloudid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteTaggedCloud :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getUser(userid, callback) {\n  memriiolog(false, 'Memriio.getUser : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname);\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getUser :server  : ' + res.status);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getUserClouds(userid, callback) {\n  memriiolog(false, 'Memriio.getUserClouds : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userID: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getUserClouds :server response : ' + res.success);\n      callback(res.data);\n      return true;\n    } else {\n      memriiolog(false, 'getUserClouds :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //-------------------------------------------------------------------------------\n\nexport async function getSignedurl(fileName) {\n  console.log('getsignedurl ' + fileName);\n  let ftype = getFileMime(fileName);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/putobject_signedurl', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName: fileName,\n        fileType: ftype\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        resolve({\n          success: true,\n          data: response.signedURL\n        });\n      } else {\n        console.log('get signedurl ' + stry(response));\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n// fname,compressedOriginal,tname,result.data\n\nexport function uploadFile(originalFileName, originalFileBuffer, thumbFileName, thumbFileBuffer) {\n  let originalSignedRequest = '';\n  let thumbSignedRequest = '';\n  let originalAWSurl = '';\n  let thumbAWSurl = '';\n  let origFileType = getFileMime(originalFileName);\n  let thumbFileType = getFileMime(thumbFileName);\n  return new Promise((resolve, reject) => {\n    getSignedurl(originalFileName).then(result => {\n      if (result.success) {\n        originalSignedRequest = result.signedURL;\n        originalAWSurl = result.url;\n        console.log('uploadFile original' + stry(result));\n        getSignedurl(thumbFileName).then(result => {\n          if (result.success) {\n            thumbSignedRequest = result.signedURL;\n            thumbAWSurl = result.url;\n            console.log('uploadFile thumb' + thumbSignedRequest); // uploadToS3(originalFileBuffer,originalSignedRequest,origFileType)\n            // .then(result => {\n            //     uploadToS3(thumbFileBuffer,thumbSignedRequest,thumbFileType)\n            //     .then(result =>{\n\n            resolve({\n              success: true,\n              data: {\n                originalURL: originalAWSurl,\n                thumbURL: thumbAWSurl\n              }\n            }); //     })\n            // })\n          } else {\n            reject({\n              success: false,\n              data: null,\n              err: result.err\n            });\n          }\n        });\n      } else {\n        reject({\n          success: false,\n          data: null,\n          err: result.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nfunction uploadToS3(file, signedRequest, fileType) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('PUT', signedRequest);\n    xhr.setRequestHeader('Content-Type', fileType);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          resolve(xhr.responseURL);\n        } else {\n          reject(false);\n        }\n      }\n    };\n\n    xhr.send(file);\n  });\n} //-------------------------------------------------------------------------------\n\n\nexport function getFileMime(fileNameAndExtension) {\n  let extension = fileNameAndExtension.split('.')[1];\n  let mime = '';\n\n  switch (extension) {\n    case 'mov':\n      mime = 'video/quicktime';\n      break;\n\n    case 'jpg':\n      mime = 'image/jpeg';\n      break;\n\n    case 'jpeg':\n      mime = 'image/jpeg';\n      break;\n\n    case 'mp4':\n      mime = 'video/mp4';\n      break;\n\n    case 'png':\n      mime = 'image/png';\n      break;\n  }\n\n  return mime;\n} //-------------------------------------------------------------------------------\n\nexport function addFileToMemory(fileUrlObj, ishero, memoryid) {\n  let sourceURL = fileUrlObj.originalURL;\n  let thumbURL = fileUrlObj.thumbURL;\n  let sourceext = getExtension(sourceURL);\n  let thumbext = getExtension(thumbURL);\n  console.log('addFileToMemory : sourceURL ' + getFilename(sourceURL));\n  console.log('addFileToMemory : thumbURL ' + getFilename(thumbURL));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/associateFile', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        fileurl: sourceURL,\n        fileext: sourceext,\n        thumburl: thumbURL,\n        thumbext: thumbext,\n        ishero: ishero\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        console.log('associate file : memid :' + memoryid + ' file : ' + sourceURL + ' hero shot = ' + ishero + ' ' + response.data.id);\n        resolve({\n          success: true,\n          data: response\n        });\n      } else {\n        reject({\n          success: false,\n          data: null\n        });\n      }\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function resizeImage(fileBuffer, targetWidth) {\n  return new Promise((resolve, reject) => {\n    new Compressor(fileBuffer, {\n      quality: 0.6,\n      convertSize: 0.3 * 1000000,\n      maxWidth: targetWidth,\n\n      success(result) {\n        console.log('resize success ' + result.size / 1000 + 'kb');\n        resolve({\n          success: true,\n          data: result\n        });\n      },\n\n      error(err) {\n        reject({\n          success: false,\n          data: null,\n          err: err\n        });\n      }\n\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function compressImage(fileBuffer, quality) {\n  return new Promise((resolve, reject) => {\n    new Compressor(fileBuffer, {\n      convertSize: 0.5 * 1000000,\n      quality: quality,\n\n      success(result) {\n        console.log('compress success ' + result.size / 1000 + 'kb');\n        resolve({\n          success: true,\n          data: result\n        });\n      },\n\n      error(err) {\n        console.log('compress fail ' + err);\n        reject({\n          success: false,\n          data: null,\n          err: err\n        });\n      }\n\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function canHandleDroppedFile(filename) {\n  let ext = getExtension(filename);\n  console.log(ext);\n  let filetypes = ['jpeg', 'JPEG', 'JPG', 'jpg', 'PNG', 'png'];\n  let found = filetypes.indexOf(ext);\n  return !(found === -1);\n}\nexport function getExtension(filepath) {\n  let fileParts = filepath.split('.');\n  let filetype = fileParts[fileParts.length - 1];\n  return filetype;\n}\nexport function getFilename(filepath) {\n  let parts = filepath.split('/');\n  let fname = parts[parts.length - 1];\n  return fname;\n}\nexport function stry(str) {\n  str = JSON.stringify(str);\n  if (str.charAt(0) === '\"') str = str.substr(1, str.length - 1);\n  if (str.charAt(str.length - 1) === '\"') str = str.substr(0, str.length - 1);\n  return str;\n}","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memriioserver.js"],"names":["React","Compressor","unstable_batchedUpdates","memriiolog","log","data","console","getAllMemoryFiles","memoryid","callback","fetch","method","headers","body","JSON","stringify","then","response","json","res","success","error","getTaggedPeople","getMemorySearchWords","memid","setMemorySearchWords","searchwords","length","getMemoryClouds","getCloudPeople","clouds","updateHeroImage","heroImageid","updateTitle","newTitle","updateDescription","newDescription","deleteMemory","updateStory","newStory","len","updateTaggedPeople","taggedPeople","updateClouds","updateMemword","searchword","id","keyword","strength","included","updateCardType","cardtype","updateLocation","newLocation","addTaggedPerson","userid","addTaggedCloud","cloudid","groupid","deleteTaggedPerson","deleteMemoryImage","fileurl","setHeroImage","deleteTaggedCloud","getUser","firstname","lastname","status","getUserClouds","userID","getSignedurl","fileName","ftype","getFileMime","Promise","resolve","reject","fileType","signedURL","stry","err","uploadFile","originalFileName","originalFileBuffer","thumbFileName","thumbFileBuffer","originalSignedRequest","thumbSignedRequest","originalAWSurl","thumbAWSurl","origFileType","thumbFileType","result","url","originalURL","thumbURL","uploadToS3","file","signedRequest","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","responseURL","send","fileNameAndExtension","extension","split","mime","addFileToMemory","fileUrlObj","ishero","sourceURL","sourceext","getExtension","thumbext","getFilename","fileext","thumburl","resizeImage","fileBuffer","targetWidth","quality","convertSize","maxWidth","size","compressImage","canHandleDroppedFile","filename","ext","filetypes","found","indexOf","filepath","fileParts","filetype","parts","fname","str","charAt","substr"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Compressor from 'compressorjs'\nimport { unstable_batchedUpdates } from 'react-dom';\n\nfunction memriiolog(log,data) {\n    if(log) console.log(data)       \n}\n\n\n\n//--Returns and array of of images and related meta data from the server-----------------------------------------------\n\nexport function getAllMemoryFiles  (memoryid,callback) {\n   \n    memriiolog(true,'Memriio.getAllMemoryFiles : memoryid ' + memoryid )\n\n    \n    fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('server response : ' + res.success))\n                        memriiolog(false,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople  (memoryid,callback) {\n    memriiolog(false,('Memriio.getTaggedPeople : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('server response : ' + res.success))\n                        memriiolog(false,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords  (memoryid,callback) {\n    memriiolog(false,('Memriio.getMemorySearchWords : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getMemorySearchWords server response : ' + res.success))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('getMemorySearchWords server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords  (memoryid,searchwords) {\n    memriiolog(false,('Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length))\n    \n    fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,searchwords:searchwords})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('setMemorySearchWords server response : ' + res.success))\n                    \n                    }else{\n                        memriiolog(false,('setMemorySearchWords server response : ' + res.success + ' with ' + res.error))\n                    }\n                })\n\n}\n\n\n//-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds  (memoryid,callback) {\n    memriiolog(false,('Memriio.getMemoryclouds : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getMemoryclouds server response : ' + res.success))\n                        memriiolog(false,('getMemoryclouds response data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('getMemoryclouds server response : ' + res.success + ' with ' + res.error))  \n                    }\n                })\n\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople  (clouds,callback) {\n    memriiolog(false,('Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds) ))\n    \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({clouds:clouds})})\n\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getCloudPeople server response : ' + res.success))\n                        memriiolog(false,('getCloudPeople response data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('getCloudPeople server response : ' + res.success + ' with ' + res.error))\n                    }\n                })\n\n}\n\n\n//------------------------------------------------------------\n\nexport function updateHeroImage (memoryid,heroImageid ){\n    memriiolog(false,('Memriio.getAllImages : memoryid ' + memoryid ))\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTitle (memoryid,newTitle){\n    memriiolog(false,('Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newTitle:newTitle})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateTitle : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateTitle : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function updateDescription (memoryid,newDescription){\n    memriiolog(false,('Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newDescription:newDescription})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateDescription : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateDescription : server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function deleteMemory (memoryid){\n    \n    memriiolog(false,('Memriio.deleteMemory : memoryid ' + memoryid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteMemory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteMemory : server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n\n}\n\n//------------------------------------------------------------\n\nexport function updateStory (memoryid,newStory){\n    let len = 0\n    if(newStory){len = newStory.length}\n    memriiolog(false,('Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars'))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newStory:newStory})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateStory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateStory : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTaggedPeople (memoryid,taggedPeople){\n   \n    \n}\n\n//------------------------------------------------------------\n\nexport function updateClouds (memoryid,clouds){\n    \n\n}\n\n//------------------------------------------------------------\n\nexport function updateMemword(searchword){\n\n    memriiolog(false,('Memriio.updateMemword :memword ' + JSON.stringify(searchword)))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({id:searchword.id,\n                                     memid:searchword.memid,\n                                     keyword:searchword.keyword,\n                                     strength:searchword.strength,\n                                     included:searchword.included})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateMemword :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateMemword :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })  \n   \n}\n\n//------------------------------------------------------------\n\nexport function updateCardType (memoryid,cardtype){\n\n    memriiolog(false,('Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,cardtype:cardtype})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateCardType :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateCardType :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function updateLocation (memoryid,newLocation){\n    memriiolog(false,('Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newLocation:newLocation})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateLocation :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateLocation :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedPerson (memoryid,userid){\n    memriiolog(false,('Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('addTaggedPerson :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('addTaggedPerson :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedCloud (memoryid,cloudid){\n    memriiolog(false,('Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,groupid:cloudid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('addTaggedCloud :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('addTaggedCloud :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n\n//------------------------------------------------------------\n\nexport function deleteTaggedPerson (memoryid,userid){\n    memriiolog(false,('Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteTaggedPerson :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage (memoryid,fileurl){\n    memriiolog(false,('Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteMemoryImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteMemoryImage :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage (memoryid,fileurl){\n    memriiolog(false,('Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('setHeroImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('setHeroImage :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud (memoryid,cloudid){\n    memriiolog(false,('Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,cloudid:cloudid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteTaggedCloud :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function getUser (userid,callback){\n    memriiolog(false,('Memriio.getUser : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success){\n                        memriiolog(false,('getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname))\n                        callback(res.data)                        \n                    }else{\n                        memriiolog(false,('getUser :server  : ' + res.status ))                         \n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function getUserClouds (userid,callback){\n    memriiolog(false,('Memriio.getUserClouds : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userID:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getUserClouds :server response : ' + res.success))\n                        callback(res.data)\n                        return true\n                    }else{\n                        memriiolog(false,('getUserClouds :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//-------------------------------------------------------------------------------\n\nexport async function getSignedurl (fileName) {\n    \n    console.log('getsignedurl ' + fileName);\n    let ftype = getFileMime(fileName)\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/putobject_signedurl', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({fileName: fileName,fileType : ftype})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            resolve({\n                                success:true,\n                                data:response.signedURL\n                            })                       \n                        }else{\n                            console.log('get signedurl ' + stry(response))\n                            \n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                                \n                                \n                            })\n                        }\n                    })\n            })\n \n}\n\n//-------------------------------------------------------------------------------\n\n// fname,compressedOriginal,tname,result.data\n\nexport function uploadFile(originalFileName,originalFileBuffer,thumbFileName,thumbFileBuffer ){\n    let originalSignedRequest = ''\n    let thumbSignedRequest = ''\n    let originalAWSurl = ''\n    let thumbAWSurl = ''\n    let origFileType = getFileMime(originalFileName)\n    let thumbFileType = getFileMime(thumbFileName)\n\n    return new Promise((resolve,reject)=>{\n        getSignedurl(originalFileName)\n        .then(result =>{\n            if(result.success){\n\n                originalSignedRequest = result.signedURL\n                originalAWSurl = result.url\n                console.log('uploadFile original' +  stry(result));\n                \n                getSignedurl(thumbFileName)\n                .then(result => {\n                    if(result.success){\n                        thumbSignedRequest = result.signedURL\n                        thumbAWSurl = result.url\n                        \n                        console.log('uploadFile thumb' +  thumbSignedRequest);\n\n                        // uploadToS3(originalFileBuffer,originalSignedRequest,origFileType)\n                        // .then(result => {\n                        //     uploadToS3(thumbFileBuffer,thumbSignedRequest,thumbFileType)\n                        //     .then(result =>{\n                                resolve({\n                                    success : true,\n                                    data : {\n                                        originalURL: originalAWSurl,\n                                        thumbURL : thumbAWSurl\n                                    }\n                                })\n                        //     })\n                        // })\n                        \n                    }else{\n                        reject({\n                            success:false,\n                            data: null,\n                            err:result.err\n                        })\n                    }\n                })               \n            }else{\n                reject( {\n                    success:false,\n                    data: null,\n                    err:result.err\n                })\n            }\n           \n        })\n    })\n\n}\n\n//-------------------------------------------------------------------------------\n\nfunction uploadToS3  (file, signedRequest,fileType)  {\n    return new Promise((resolve,reject) => {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('PUT', signedRequest);\n        xhr.setRequestHeader('Content-Type', fileType) \n        xhr.onreadystatechange = () => {\n        if(xhr.readyState === 4){\n            if(xhr.status === 200){\n                resolve(xhr.responseURL)\n            }\n            else{\n                reject(false)\n            }\n        }\n        };\n        xhr.send(file);\n  })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getFileMime  (fileNameAndExtension)  {\n    let extension = fileNameAndExtension.split('.')[1]\n    \n    let mime =''\n    switch (extension) {\n        case 'mov': mime = 'video/quicktime' \n        break;\n        case 'jpg': mime = 'image/jpeg' \n        break;\n        case 'jpeg': mime = 'image/jpeg' \n        break;\n        case 'mp4': mime = 'video/mp4' \n        break;\n        case 'png': mime = 'image/png' \n        break;\n    }\n    return mime\n}\n\n//-------------------------------------------------------------------------------\n\n\nexport function addFileToMemory  (fileUrlObj,ishero,memoryid)  {\n    \n    \n    let sourceURL  = fileUrlObj.originalURL\n    let thumbURL   = fileUrlObj.thumbURL\n    \n    let sourceext   = getExtension( sourceURL )\n    let thumbext    = getExtension( thumbURL  )\n    \n    console.log('addFileToMemory : sourceURL ' + getFilename(sourceURL))\n    console.log('addFileToMemory : thumbURL ' + getFilename(thumbURL))\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/associateFile', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({\n                        memid: memoryid,\n                        fileurl: sourceURL,\n                        fileext: sourceext,\n                        thumburl: thumbURL,\n                        thumbext: thumbext,\n                        ishero: ishero\n                        })\n                    })\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            console.log('associate file : memid :'  + memoryid + ' file : ' +  sourceURL + ' hero shot = ' + ishero + ' ' + response.data.id);\n                            resolve({\n                                success:true,\n                                data:response\n                            })\n                        }else{\n                            reject({\n                                success:false,\n                                data:null\n                            })\n                        }\n                    })\n    })\n}\n// ----------------------------------------------------------------------------\n\nexport function resizeImage( fileBuffer,targetWidth ){\n\n    return new Promise((resolve,reject) => {\n        new Compressor(fileBuffer, \n            {\n                quality: 0.6,\n                convertSize: (0.3 * 1000000),\n                maxWidth:targetWidth,\n                success(result) {\n                    console.log('resize success ' + result.size/1000 + 'kb');\n                    resolve({success:true,data:result})},\n                error(err){reject({success:false,data:null,err:err})}\n            })\n     })\n}\n\n// ----------------------------------------------------------------------------\n\nexport function compressImage( fileBuffer,quality ){\n\n    return new Promise((resolve,reject) => {\n        new Compressor(fileBuffer, \n            {\n                convertSize: (0.5 * 1000000),\n                quality: quality,\n                success(result) {\n                    console.log('compress success ' + result.size/1000 + 'kb');\n                    \n                    resolve({success:true,data:result})\n                },\n                error(err){\n                    console.log('compress fail ' + err);\n                    \n                    reject({success:false,data:null,err:err})}\n            })\n     })\n}\n\n// ----------------------------------------------------------------------------\n\nexport function canHandleDroppedFile(filename){\n    let ext = getExtension(filename)\n    console.log(ext);\n    let filetypes = ['jpeg','JPEG','JPG','jpg','PNG','png']\n    let found = filetypes.indexOf(ext)\n    return !(found === -1) \n}\n\n\nexport function getExtension (filepath) {\n    let fileParts = filepath.split('.');\n    let filetype = fileParts[fileParts.length-1];\n    return filetype\n}\n\nexport function getFilename (filepath) {\n    let parts = filepath.split('/')\n    let fname = parts[parts.length-1]\n    return fname\n}\n\nexport function stry (str)  {\n    str = JSON.stringify(str)\n    if (str.charAt(0) === '\"') str = str.substr(1,str.length-1)    \n    if (str.charAt(str.length -1) === '\"') str = str.substr(0,str.length-1)\n    return str\n}"]},"metadata":{},"sourceType":"module"}