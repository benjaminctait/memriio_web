{"ast":null,"code":"import React from 'react';\n\nfunction memriiolog(log, data) {\n  if (log) console.log(data);\n} //--Returns and array of of images and related meta data from the server-----------------------------------------------\n\n\nexport function getAllMemoryFiles(memoryid, callback) {\n  memriiolog(true, (true, 'Memriio.getAllMemoryFiles : memoryid ' + memoryid));\n  fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'server response : ' + res.success);\n      memriiolog(true, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(true, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople(memoryid, callback) {\n  memriiolog(true, 'Memriio.getTaggedPeople : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'server response : ' + res.success);\n      memriiolog(true, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(true, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords(memoryid, callback) {\n  memriiolog(true, 'Memriio.getMemorySearchWords : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'getMemorySearchWords server response : ' + res.success);\n      callback(res.data);\n    } else {\n      memriiolog(true, 'getMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords(memoryid, searchwords) {\n  memriiolog(true, 'Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length);\n  fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      searchwords: searchwords\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'setMemorySearchWords server response : ' + res.success);\n    } else {\n      memriiolog(true, 'setMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds(memoryid, callback) {\n  memriiolog(true, 'Memriio.getMemoryclouds : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'getMemoryclouds server response : ' + res.success);\n      memriiolog(true, 'getMemoryclouds response data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(true, 'getMemoryclouds server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople(clouds, callback) {\n  memriiolog(true, 'Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds));\n  fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      clouds: clouds\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'getCloudPeople server response : ' + res.success);\n      memriiolog(true, 'getCloudPeople response data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(true, 'getCloudPeople server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateHeroImage(memoryid, heroImageid) {\n  memriiolog(true, 'Memriio.getAllImages : memoryid ' + memoryid);\n} //------------------------------------------------------------\n\nexport function updateTitle(memoryid, newTitle) {\n  memriiolog(true, 'Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newTitle: newTitle\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'updateTitle : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'updateTitle : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateDescription(memoryid, newDescription) {\n  memriiolog(true, 'Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newDescription: newDescription\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'updateDescription : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'updateDescription : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function deleteMemory(memoryid) {\n  memriiolog(true, 'Memriio.deleteMemory : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'deleteMemory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'deleteMemory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateStory(memoryid, newStory) {\n  let len = 0;\n\n  if (newStory) {\n    len = newStory.length;\n  }\n\n  memriiolog(true, 'Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars');\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newStory: newStory\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'updateStory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'updateStory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateTaggedPeople(memoryid, taggedPeople) {} //------------------------------------------------------------\n\nexport function updateClouds(memoryid, clouds) {} //------------------------------------------------------------\n\nexport function updateMemword(searchword) {\n  memriiolog(true, 'Memriio.updateMemword :memword ' + JSON.stringify(searchword));\n  fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: searchword.id,\n      memid: searchword.memid,\n      keyword: searchword.keyword,\n      strength: searchword.strength,\n      included: searchword.included\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'updateMemword :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'updateMemword :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateCardType(memoryid, cardtype) {\n  memriiolog(true, 'Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      cardtype: cardtype\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'updateCardType :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'updateCardType :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateLocation(memoryid, newLocation) {\n  memriiolog(true, 'Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newLocation: newLocation\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'updateLocation :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'updateLocation :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedPerson(memoryid, userid) {\n  memriiolog(true, 'Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'addTaggedPerson :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'addTaggedPerson :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedCloud(memoryid, cloudid) {\n  memriiolog(true, 'Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid);\n  fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      groupid: cloudid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'addTaggedCloud :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'addTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function deleteTaggedPerson(memoryid, userid) {\n  memriiolog(true, 'Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'deleteTaggedPerson :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage(memoryid, fileurl) {\n  memriiolog(true, 'Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'deleteMemoryImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'deleteMemoryImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage(memoryid, fileurl) {\n  memriiolog(true, 'Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'setHeroImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'setHeroImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud(memoryid, cloudid) {\n  memriiolog(true, 'Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid);\n  fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      cloudid: cloudid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'deleteTaggedCloud :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getUser(userid, callback) {\n  memriiolog(true, 'Memriio.getUser : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname);\n      callback(res.data);\n    } else {\n      memriiolog(true, 'getUser :server  : ' + res.status);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getUserClouds(userid, callback) {\n  memriiolog(true, 'Memriio.getUserClouds : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userID: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'getUserClouds :server response : ' + res.success);\n      callback(res.data);\n      return true;\n    } else {\n      memriiolog(true, 'getUserClouds :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //-------------------------------------------------------------------------------\n\nexport async function getObjectSignedurl(fileName) {\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/getObject_signedurl', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName: fileName\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        resolve(response.signedURL);\n      } else {\n        reject(response.error);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memriioserver.js"],"names":["React","memriiolog","log","data","console","getAllMemoryFiles","memoryid","callback","fetch","method","headers","body","JSON","stringify","then","response","json","res","success","error","getTaggedPeople","getMemorySearchWords","memid","setMemorySearchWords","searchwords","length","getMemoryClouds","getCloudPeople","clouds","updateHeroImage","heroImageid","updateTitle","newTitle","updateDescription","newDescription","deleteMemory","updateStory","newStory","len","updateTaggedPeople","taggedPeople","updateClouds","updateMemword","searchword","id","keyword","strength","included","updateCardType","cardtype","updateLocation","newLocation","addTaggedPerson","userid","addTaggedCloud","cloudid","groupid","deleteTaggedPerson","deleteMemoryImage","fileurl","setHeroImage","deleteTaggedCloud","getUser","firstname","lastname","status","getUserClouds","userID","getObjectSignedurl","fileName","Promise","resolve","reject","signedURL"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nfunction memriiolog(log,data) {\n    if(log) console.log(data)       \n}\n\n\n\n//--Returns and array of of images and related meta data from the server-----------------------------------------------\n\nexport function getAllMemoryFiles  (memoryid,callback) {\n   \n    memriiolog(true,(true,'Memriio.getAllMemoryFiles : memoryid ' + memoryid ))\n\n    \n    fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('server response : ' + res.success))\n                        memriiolog(true,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(true,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople  (memoryid,callback) {\n    memriiolog(true,('Memriio.getTaggedPeople : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('server response : ' + res.success))\n                        memriiolog(true,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(true,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords  (memoryid,callback) {\n    memriiolog(true,('Memriio.getMemorySearchWords : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('getMemorySearchWords server response : ' + res.success))\n                        callback(res.data)\n                    }else{\n                        memriiolog(true,('getMemorySearchWords server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords  (memoryid,searchwords) {\n    memriiolog(true,('Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length))\n    \n    fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,searchwords:searchwords})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('setMemorySearchWords server response : ' + res.success))\n                    \n                    }else{\n                        memriiolog(true,('setMemorySearchWords server response : ' + res.success + ' with ' + res.error))\n                    }\n                })\n\n}\n\n\n//-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds  (memoryid,callback) {\n    memriiolog(true,('Memriio.getMemoryclouds : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('getMemoryclouds server response : ' + res.success))\n                        memriiolog(true,('getMemoryclouds response data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(true,('getMemoryclouds server response : ' + res.success + ' with ' + res.error))  \n                    }\n                })\n\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople  (clouds,callback) {\n    memriiolog(true,('Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds) ))\n    \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({clouds:clouds})})\n\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('getCloudPeople server response : ' + res.success))\n                        memriiolog(true,('getCloudPeople response data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(true,('getCloudPeople server response : ' + res.success + ' with ' + res.error))\n                    }\n                })\n\n}\n\n\n//------------------------------------------------------------\n\nexport function updateHeroImage (memoryid,heroImageid ){\n    memriiolog(true,('Memriio.getAllImages : memoryid ' + memoryid ))\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTitle (memoryid,newTitle){\n    memriiolog(true,('Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newTitle:newTitle})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('updateTitle : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('updateTitle : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function updateDescription (memoryid,newDescription){\n    memriiolog(true,('Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newDescription:newDescription})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('updateDescription : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('updateDescription : server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function deleteMemory (memoryid){\n    \n    memriiolog(true,('Memriio.deleteMemory : memoryid ' + memoryid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('deleteMemory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('deleteMemory : server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n\n}\n\n//------------------------------------------------------------\n\nexport function updateStory (memoryid,newStory){\n    let len = 0\n    if(newStory){len = newStory.length}\n    memriiolog(true,('Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars'))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newStory:newStory})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('updateStory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('updateStory : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTaggedPeople (memoryid,taggedPeople){\n   \n    \n}\n\n//------------------------------------------------------------\n\nexport function updateClouds (memoryid,clouds){\n    \n\n}\n\n//------------------------------------------------------------\n\nexport function updateMemword(searchword){\n\n    memriiolog(true,('Memriio.updateMemword :memword ' + JSON.stringify(searchword)))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({id:searchword.id,\n                                     memid:searchword.memid,\n                                     keyword:searchword.keyword,\n                                     strength:searchword.strength,\n                                     included:searchword.included})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('updateMemword :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('updateMemword :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })  \n   \n}\n\n//------------------------------------------------------------\n\nexport function updateCardType (memoryid,cardtype){\n\n    memriiolog(true,('Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,cardtype:cardtype})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('updateCardType :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('updateCardType :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function updateLocation (memoryid,newLocation){\n    memriiolog(true,('Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newLocation:newLocation})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('updateLocation :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('updateLocation :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedPerson (memoryid,userid){\n    memriiolog(true,('Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('addTaggedPerson :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('addTaggedPerson :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedCloud (memoryid,cloudid){\n    memriiolog(true,('Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,groupid:cloudid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('addTaggedCloud :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('addTaggedCloud :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n\n//------------------------------------------------------------\n\nexport function deleteTaggedPerson (memoryid,userid){\n    memriiolog(true,('Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('deleteTaggedPerson :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage (memoryid,fileurl){\n    memriiolog(true,('Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('deleteMemoryImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('deleteMemoryImage :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage (memoryid,fileurl){\n    memriiolog(true,('Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('setHeroImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('setHeroImage :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud (memoryid,cloudid){\n    memriiolog(true,('Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,cloudid:cloudid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('deleteTaggedCloud :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function getUser (userid,callback){\n    memriiolog(true,('Memriio.getUser : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success){\n                        memriiolog(true,('getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname))\n                        callback(res.data)                        \n                    }else{\n                        memriiolog(true,('getUser :server  : ' + res.status ))                         \n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function getUserClouds (userid,callback){\n    memriiolog(true,('Memriio.getUserClouds : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userID:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('getUserClouds :server response : ' + res.success))\n                        callback(res.data)\n                        return true\n                    }else{\n                        memriiolog(true,('getUserClouds :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//-------------------------------------------------------------------------------\n\nexport async function getObjectSignedurl (fileName) {\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/getObject_signedurl', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({fileName: fileName})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            resolve(response.signedURL)                       \n                        }else{\n                            reject( response.error)\n                        }\n                    })\n            })\n \n}\n\n//-------------------------------------------------------------------------------\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}