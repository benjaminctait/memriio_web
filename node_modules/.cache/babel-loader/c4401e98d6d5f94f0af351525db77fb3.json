{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/newmemorymodal.js\";\nimport React from 'react';\nimport greycross from '../images/x-grey.png';\nimport tick from '../images/tick.png';\nimport tag from '../images/tag.png';\nimport globe from '../images/outline-globe.png';\nimport calendar from '../images/calendar.png';\nimport key from '../images/key.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport edit from '../images/edit.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport trash from '../images/trash.png';\nimport hero from '../images/hero-full.png';\nimport heroOutline from '../images/hero-outline-grey.png';\nimport cloudIMG from '../images/cloud.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport * as mem from '../memriioserver';\nimport * as DropSearch from '../dropsearch/dropsearch';\nimport WordExctractor from 'keyword-extractor';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport './memorymodal.css';\nimport { CheckBox, SubTag, ImageLabel } from '../buttons/buttons';\n\nclass NewMemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null,\n      author: null,\n      memfileIndex: 0\n    };\n\n    this.onHide = () => {\n      alert('implement file upload');\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          mem.getUser(this.props.memory.userid, author => {\n            this.setState({\n              author: author\n            });\n          });\n          mem.getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          mem.getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          mem.getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n          mem.getUserClouds(this.props.memory.userid, clouds => {\n            this.setState({\n              userClouds: clouds\n            });\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      this.state.memfileIndex = 0;\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map((memfile, index) => {\n        if (memfile.ishero) {\n          this.state.memfileIndex = index;\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      mem.getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.toggleEditMode = () => {\n      this.setState({\n        editMode: !this.state.editMode\n      });\n    };\n\n    this.userIsAuthorisedToEdit = () => {\n      return true;\n    };\n\n    this.deleteFileFromMemory = () => {\n      console.log('delte file from memroy');\n    };\n\n    this.makeHeroFile = () => {\n      console.log('make hero file');\n    };\n\n    this.handleAddTaggedPerson = Person => {\n      let tp = this.state.taggedPeople;\n\n      if (!tp.find(dude => dude.userid === Person.userid)) {\n        tp.push(Person);\n        tp.reverse();\n        this.setState({\n          taggedPeople: tp\n        }); //mem.addTaggedPerson(this.props.memory.memid,Person.userid)\n      }\n    };\n\n    this.handleRemoveFromCloud = Cloud => {\n      let cl = [];\n      this.state.memoryClouds.map(cloud => {\n        if (cloud.id !== Cloud.id) cl.push(cloud);\n      }) //mem.deleteTaggedCloud(this.props.memory.memid,Cloud.id)\n      .then(result => {\n        this.populateCloudInfo(cl);\n      });\n    };\n\n    this.handleDeleteTaggedPerson = Person => {\n      let tp = [];\n      this.state.taggedPeople.map(p => {\n        if (p.userid !== Person.userid) tp.push(p);\n      });\n      this.setState({\n        taggedPeople: tp\n      }); //mem.deleteTaggedPerson(this.props.memory.memid,Person.userid)\n    };\n\n    this.handleAddCloud = clouds => {\n      let cloud = clouds[0];\n      let cl = this.state.memoryClouds;\n      console.log('memorymodal.handleaAddCloud newCloud : ' + mem.stry(cloud));\n      let newCloudID = parseInt(cloud.value);\n\n      if (!cl.find(newcl => newcl.id === newCloudID)) {\n        cl.push({\n          id: newCloudID,\n          name: cloud.label\n        });\n        cl.reverse();\n        this.setState({\n          memoryClouds: cl\n        }) // mem.addTaggedCloud(this.props.memory.memid,newCloudID)\n        .then(result => {\n          this.populateCloudInfo(cl);\n        });\n      }\n    };\n\n    this.activeFileisHero = () => {\n      var afile = this.state.activefile;\n\n      if (afile) {\n        if (afile.ishero) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    this.renderMemoryContent = () => {\n      const imageZone = this.renderImageZone();\n      const storyZone = this.renderStoryZone();\n      const detailsZone = this.renderDetailsZone();\n\n      if (this.state.activefile) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalrow\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 9\n          }\n        }, imageZone, storyZone, detailsZone);\n      } else {\n        return null;\n      }\n    };\n\n    this.handleSearchWordClick = (itemKey, upState) => {\n      const ind = this.state.searchWords.findIndex(item => {\n        return item.id === itemKey;\n      });\n      this.state.searchWords[ind].included = upState;\n      console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind])); //mem.updateMemword(this.state.searchWords[ind])\n\n      this.setState({\n        searchWords: this.state.searchWords\n      });\n    };\n\n    this.renderKeyWords = () => {\n      return /*#__PURE__*/React.createElement(Container, {\n        onDrop: e => this.setState({\n          searchWords: this.applyDrag(this.state.searchWords, e)\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 5\n        }\n      }, this.state.searchWords.map((wordItem, idx) => {\n        return /*#__PURE__*/React.createElement(Draggable, {\n          className: \"wordListItem\",\n          key: 'k' + idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(CheckBox, {\n          itemKey: wordItem.id,\n          onClick: this.handleSearchWordClick,\n          upState: wordItem.included,\n          downImg: greycross,\n          upImg: tick,\n          label: wordItem.keyword,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }\n        }));\n      }));\n    };\n\n    this.applyDrag = (arr, dragResult) => {\n      const {\n        removedIndex,\n        addedIndex,\n        payload\n      } = dragResult;\n      if (removedIndex === null && addedIndex === null) return arr;\n      const result = [...arr];\n      let itemToAdd = payload;\n      if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n      if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n      return result;\n    };\n\n    this.renderTaggedPeople = () => {\n      const people = this.state.taggedPeople.map(p => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'p' + p.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          data: p,\n          leftImg: tag,\n          badge: x,\n          onBadgeClick: this.handleDeleteTaggedPerson,\n          label: p.firstname + ' ' + p.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }\n        }));\n      });\n\n      if (this.state.author) {\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'a' + this.state.author.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: author,\n          label: this.state.author.firstname + ' ' + this.state.author.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      people.reverse();\n      people.push( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 20\n        }\n      }, \" \", DropSearch.peopleDropSearch(this.state.cloudPeople, this.handleAddTaggedPerson), \" \"));\n      return people;\n    };\n\n    this.renderDetails = () => {\n      if (this.props.memory) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'location',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: globe,\n          label: this.props.memory.location,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 28\n          }\n        })), /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'sss',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: calendar,\n          label: mem.getShortDate(this.props.memory.createdon),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 23\n          }\n        })));\n      }\n    };\n\n    this.renderClouds = () => {\n      const clouds = this.state.memoryClouds.map(cloud => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'cloud' + cloud.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          data: cloud,\n          badge: x,\n          onBadgeClick: this.handleRemoveFromCloud,\n          leftImg: cloudIMG,\n          label: cloud.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 38\n          }\n        }));\n      });\n      clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 20\n        }\n      }, \" \", DropSearch.cloudDropSearch(this.state.userClouds, null, true, true, this.handleAddCloud, this.props.memory.userid), \" \"));\n      return clouds;\n    };\n\n    this.renderImageZone = () => {\n      let editControls = null;\n      var heroImg = this.activeFileisHero() ? hero : heroOutline;\n      editControls = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imageEditConrols\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: trash,\n        onClick: this.deleteFileFromMemory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 5\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: heroImg,\n        onClick: this.makeHeroFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 5\n        }\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imgcolumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n        memfile: this.state.activefile,\n        thumbStyleClass: 'memoryModalImage',\n        fileStyleClass: 'memoryModalImage',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 7\n        }\n      }), editControls);\n    };\n\n    this.onTitleBlur = e => {\n      const newTitle = e.target.value;\n\n      if (newTitle !== this.props.memory.title) {\n        this.props.memory.title = newTitle; //mem.updateTitle(this.props.memory.memid,newTitle)\n      }\n    };\n\n    this.onDescriptionBlur = e => {\n      const newDescription = e.target.value;\n\n      if (newDescription !== this.props.memory.description) {\n        this.props.memory.description = newDescription; //mem.updateDescription(this.props.memory.memid,newDescription)\n      }\n    };\n\n    this.onStoryBlur = e => {\n      const newStory = e.target.value;\n\n      if (newStory !== this.props.memory.story) {\n        console.log('updated story ');\n        this.props.memory.story = newStory; //mem.updateStory(this.props.memory.memid,newStory)    \n        //mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n      }\n    };\n\n    this.handleStoryChange = event => {\n      let addarray = this.state.searchWords;\n      let addarray2 = [];\n      let story = event.target.value;\n      let words = WordExctractor.extract(story, {\n        language: \"english\",\n        remove_digits: true,\n        return_changed_case: true,\n        remove_duplicates: true\n      }); // add any new words that exist in the story\n\n      words.map(word => {\n        if (!this.searchWordExists(word)) {\n          addarray.push({\n            included: true,\n            keyword: word,\n            strength: 0\n          });\n        }\n      }); // remove any search words that now longer exist in the story\n\n      addarray.map(w => {\n        if (words.find(word => w.keyword === word) !== undefined) {\n          addarray2.push({\n            included: w.included,\n            keyword: w.keyword,\n            strength: w.strength\n          });\n        }\n      });\n      this.setState({\n        searchWords: addarray2,\n        story: story\n      });\n    };\n\n    this.searchWordExists = word => {\n      return this.state.searchWords.find(wordItem => word === wordItem.keyword);\n    };\n\n    this.renderStoryZone = () => {\n      const mem = this.state.memory;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infoColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        onBlur: this.onTitleBlur,\n        className: \"input-reset titleEdit\",\n        type: \"text\",\n        defaultValue: mem.title,\n        placeholder: \"Title\",\n        id: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        onBlur: this.onDescriptionBlur,\n        className: \"input-reset descriptionEdit\",\n        type: \"text\",\n        defaultValue: mem.description,\n        placeholder: \"Description\",\n        id: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"textarea\", {\n        onBlur: this.onStoryBlur,\n        className: \"input-reset storyEdit\",\n        onChange: this.handleStoryChange,\n        type: \"text\",\n        defaultValue: mem.story,\n        placeholder: \"Description\",\n        id: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.renderCornerControls = () => {\n      let editBtn = null;\n\n      if (this.userIsAuthorisedToEdit()) {\n        editBtn = /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: edit,\n          onClick: this.toggleEditMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 7\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: x,\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 7\n        }\n      }), editBtn);\n    };\n\n    this.renderDetailsZone = () => {\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n      const clouds = this.renderClouds();\n      const cornerCtrls = this.renderCornerControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detailsColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 9\n        }\n      }, \"Tags \"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"keyWordList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 9\n        }\n      }, \"  \", keywords, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z25\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 9\n        }\n      }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"peopleList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 9\n        }\n      }, \"   \", people, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 9\n        }\n      }, \"Clouds\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"cloudList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 9\n        }\n      }, \"    \", clouds, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 9\n        }\n      }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"detailsList \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 9\n        }\n      }, \"        \", details, \" \")), cornerCtrls);\n    };\n\n    this.handleDropfiles = async acceptedFiles => {\n      const reader = new FileReader();\n      acceptedFiles.forEach(file => {\n        reader.onload = () => {\n          console.log('onload ' + file.name);\n\n          if (mem.canHandleDroppedFile(file.name)) {\n            alert('hold forf file upload ' + file.name); //this.prepAndUploadFile(file)\n          } else {\n            alert('File type ' + mem.getExtension(file.name) + ' not yet implemented');\n          }\n        };\n\n        reader.readAsArrayBuffer(file);\n      });\n    };\n\n    this.prepAndUploadFile = file => {\n      let commonfileName = this.state.author.userid + '-' + Date.now();\n      let ext = mem.getExtension(file.name);\n      let fname = commonfileName + '-original' + '.' + ext;\n      let tname = commonfileName + '-thumb' + '.' + ext;\n      let filebuffer = null;\n      let newMemfiles = this.state.memfiles;\n      let memfile = {\n        id: 0,\n        memid: this.props.memory.memid,\n        fileurl: '',\n        ishero: false,\n        fileext: ext,\n        thumburl: '',\n        thumbext: ext\n      };\n      mem.compressImage(file, 0.9).then(result => {\n        if (result.success) {\n          filebuffer = result.data;\n          mem.resizeImage(filebuffer, 1500).then(result => {\n            if (result.success) {\n              mem.uploadFile(tname, result.data).then(result => {\n                if (result.success) {\n                  memfile.thumburl = result.awsurl;\n                  newMemfiles.push(memfile);\n                  this.setState({\n                    memfiles: newMemfiles\n                  });\n                  mem.uploadFile(fname, filebuffer).then(result => {\n                    if (result.success) {\n                      let last = this.state.memfiles.length - 1;\n                      this.state.memfiles[last].fileurl = result.awsurl;\n                      mem.addFileToMemory({\n                        originalURL: this.state.memfiles[last].fileurl,\n                        thumbURL: this.state.memfiles[last].thumburl\n                      }, false, this.props.memory.memid).then(result => {\n                        if (result.success) {\n                          console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.renderCarouselControls = () => {\n      const mem = this.state.memory;\n      const mfiles = this.state.memfiles;\n      let thumbs = null;\n\n      if (mfiles) {\n        thumbs = mfiles.map((mfile, index) => {\n          return /*#__PURE__*/React.createElement(\"img\", {\n            key: 'thumb' + index,\n            className: \"thumb\",\n            src: mfile,\n            onClick: index => {},\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 14\n            }\n          });\n        });\n      }\n\n      if (mfiles) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controlbox\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: left,\n          onClick: this.goBack,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"thumbArray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 11\n          }\n        }, thumbs), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: right,\n          onClick: this.goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return null;\n      }\n    };\n\n    this.goBack = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === 0) {\n          this.state.memfileIndex = ubound;\n        } else {\n          this.state.memfileIndex--;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.goForward = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === ubound) {\n          this.state.memfileIndex = 0;\n        } else {\n          this.state.memfileIndex++;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      if (this.state.activefile) {\n        let memoryContent = this.renderMemoryContent();\n        let carouselControls = this.renderCarouselControls();\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"backdropStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }\n        }, memoryContent, carouselControls));\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  } //------------------------------------------------------------------------\n\n\n}\n\n;\nexport default NewMemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/newmemorymodal.js"],"names":["React","greycross","tick","tag","globe","calendar","key","author","x","edit","left","right","trash","hero","heroOutline","cloudIMG","MemoryFileViewer","mem","DropSearch","WordExctractor","Container","Draggable","Dropzone","useDropzone","CheckBox","SubTag","ImageLabel","NewMemoryModal","Component","state","memory","taggedPeople","memoryClouds","searchWords","memfiles","cloudPeople","userClouds","activefile","memfileIndex","onHide","alert","props","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","getUser","userid","setState","getTaggedPeople","people","getMemoryClouds","clouds","populateCloudInfo","getMemorySearchWords","words","populateSearchWords","getUserClouds","getHeroFile","map","memfile","index","ishero","getCloudPeople","toggleEditMode","editMode","userIsAuthorisedToEdit","deleteFileFromMemory","console","log","makeHeroFile","handleAddTaggedPerson","Person","tp","find","dude","push","reverse","handleRemoveFromCloud","Cloud","cl","cloud","id","then","result","handleDeleteTaggedPerson","p","handleAddCloud","stry","newCloudID","parseInt","value","newcl","name","label","activeFileisHero","afile","renderMemoryContent","imageZone","renderImageZone","storyZone","renderStoryZone","detailsZone","renderDetailsZone","handleSearchWordClick","itemKey","upState","ind","findIndex","item","included","JSON","stringify","renderKeyWords","e","applyDrag","wordItem","idx","keyword","arr","dragResult","removedIndex","addedIndex","payload","itemToAdd","splice","renderTaggedPeople","firstname","lastname","peopleDropSearch","renderDetails","location","getShortDate","createdon","renderClouds","cloudDropSearch","editControls","heroImg","onTitleBlur","newTitle","target","title","onDescriptionBlur","newDescription","description","onStoryBlur","newStory","story","handleStoryChange","event","addarray","addarray2","extract","language","remove_digits","return_changed_case","remove_duplicates","word","searchWordExists","strength","w","undefined","renderCornerControls","editBtn","keywords","details","cornerCtrls","handleDropfiles","acceptedFiles","reader","FileReader","forEach","file","onload","canHandleDroppedFile","getExtension","readAsArrayBuffer","prepAndUploadFile","commonfileName","Date","now","ext","fname","tname","filebuffer","newMemfiles","fileurl","fileext","thumburl","thumbext","compressImage","success","data","resizeImage","uploadFile","awsurl","last","length","addFileToMemory","originalURL","thumbURL","renderCarouselControls","mfiles","thumbs","mfile","goBack","goForward","ubound","render","show","memoryContent","carouselControls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport greycross from '../images/x-grey.png'\nimport tick from '../images/tick.png'\nimport tag from '../images/tag.png'\nimport globe from '../images/outline-globe.png'\nimport calendar from '../images/calendar.png'\nimport key from '../images/key.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport edit from '../images/edit.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport trash from '../images/trash.png'\nimport hero from '../images/hero-full.png'\nimport heroOutline from '../images/hero-outline-grey.png'\nimport cloudIMG from '../images/cloud.png'\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport * as mem from '../memriioserver'\nimport * as DropSearch from '../dropsearch/dropsearch'\n\nimport WordExctractor from 'keyword-extractor'\nimport { Container, Draggable} from 'react-smooth-dnd'\nimport Dropzone,{useDropzone} from 'react-dropzone'\n\nimport './memorymodal.css'\n\nimport {CheckBox,SubTag,ImageLabel} from '../buttons/buttons'\n\nclass NewMemoryModal extends React.Component{\n\n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[],         \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null,\n        author:null,\n        memfileIndex:0,\n        \n    }\n   \n\n  onHide = () =>{    \n    alert('implement file upload')\n    this.props.onHideModal(this.props.memory)\n  }\n\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n        \n        this.populateMemoryFiles(this.props.memfiles)\n        mem.getUser              (this.props.memory.userid,(author => { this.setState({author:author})}))\n        mem.getTaggedPeople      ( this.props.memory.memid,(people => { this.setState({taggedPeople:people})}))\n        mem.getMemoryClouds      ( this.props.memory.memid,(clouds => { this.populateCloudInfo(clouds)}))\n        mem.getMemorySearchWords ( this.props.memory.memid,(words  => { this.populateSearchWords(words)}))\n        mem.getUserClouds        ( this.props.memory.userid,(clouds => { this.setState({userClouds:clouds})}))\n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    this.state.memfileIndex=0\n    let hero = this.state.memfiles[0]\n\n    this.state.memfiles.map((memfile,index)=> {\n\n        if(memfile.ishero){         \n            this.state.memfileIndex = index            \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n    this.setState({memoryClouds:clouds})\n    mem.getCloudPeople (clouds,((people)=>{\n      this.setState({cloudPeople:people})\n    }))   \n  }\n\n//------------------------------------------------------------------------\n\n  toggleEditMode =() =>{\n    this.setState({editMode:!this.state.editMode})\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  userIsAuthorisedToEdit = () =>{\n    return true\n  }\n\n  //------------------------------------------------------------------------\n\n  deleteFileFromMemory =() =>{\n    console.log('delte file from memroy');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n\n  makeHeroFile = () =>{\n    console.log('make hero file');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  handleAddTaggedPerson = (Person) =>{\n    \n    let tp = this.state.taggedPeople\n    if(!tp.find(dude => dude.userid === Person.userid)){\n      tp.push(Person)\n      tp.reverse()\n      this.setState({taggedPeople:tp})\n      //mem.addTaggedPerson(this.props.memory.memid,Person.userid)\n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  handleRemoveFromCloud = ( Cloud ) =>{\n    let cl = []\n    this.state.memoryClouds.map(cloud =>{if(cloud.id !== Cloud.id) cl.push(cloud)})\n    //mem.deleteTaggedCloud(this.props.memory.memid,Cloud.id)\n    .then(result =>{\n      this.populateCloudInfo(cl)\n    })\n\n  }\n\n  //------------------------------------------------------------------------\n\n  handleDeleteTaggedPerson = (Person) =>{\n    let tp = []\n    this.state.taggedPeople.map( p =>{if(p.userid !== Person.userid)tp.push(p)})\n    this.setState({taggedPeople:tp})\n    //mem.deleteTaggedPerson(this.props.memory.memid,Person.userid)\n  }\n\n  //------------------------------------------------------------------------\n\n  handleAddCloud = (clouds) =>{\n    let cloud = clouds[0]\n    let cl = this.state.memoryClouds\n    console.log('memorymodal.handleaAddCloud newCloud : ' + mem.stry(cloud))\n    let newCloudID = parseInt(cloud.value)\n    if(!cl.find(newcl => newcl.id === newCloudID)){\n\n      cl.push({\n        id:newCloudID,\n        name:cloud.label\n      })\n      cl.reverse()\n      this.setState({memoryClouds:cl})\n     // mem.addTaggedCloud(this.props.memory.memid,newCloudID)\n      .then(result => {\n        this.populateCloudInfo(cl)\n      })\n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  activeFileisHero =() =>{\n    var afile = this.state.activefile\n    \n    if(afile){\n      if(afile.ishero){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  render(){\n   \n    if(this.props.show){\n     \n      if(this.state.activefile) {\n        let memoryContent     = this.renderMemoryContent()\n        let carouselControls  = this.renderCarouselControls()\n        return(\n          <div className= 'backdropStyle'>\n            <div className='modalStyle'>\n              {memoryContent}   \n              {carouselControls}\n            </div>\n          </div>\n        )\n    }else{\n      return null\n    }    \n  }else{\n    return null\n  }    \n}\n\n//------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    \n  const imageZone   = this.renderImageZone()\n  const storyZone   = this.renderStoryZone()\n  const detailsZone = this.renderDetailsZone()\n  \n  if(this.state.activefile ){\n    return (\n        <div className='modalrow'>\n          {imageZone}\n          {storyZone}\n          {detailsZone}\n        </div>\n    )\n  } else {\n    return null\n  }\n}\n  \n//------------------------------------------------------------------------\n\nhandleSearchWordClick = (itemKey,upState) =>{\n  \n  const ind = this.state.searchWords.findIndex(item =>{return item.id === itemKey})\n  this.state.searchWords[ind].included = upState\n  console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]))\n  //mem.updateMemword(this.state.searchWords[ind])\n  this.setState({searchWords:this.state.searchWords})\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n\n  return (\n    <Container  onDrop={e => this.setState({searchWords:this.applyDrag(this.state.searchWords,e)})}>\n    \n      {\n        this.state.searchWords.map((wordItem, idx) => {\n          return (\n            <Draggable className='wordListItem' key={'k'+idx}>\n              <CheckBox \n                itemKey = {wordItem.id}\n                onClick = {this.handleSearchWordClick}\n                upState = {wordItem.included} \n                downImg = {greycross} \n                upImg   = {tick} \n                label   = {wordItem.keyword}\n              />\n            </Draggable> \n          )\n        })\n      }\n    </Container>\n  )\n  \n}\n\n//------------------------------------------------------------------------\n\napplyDrag = (arr, dragResult) => {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n  if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n  if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n  return result;\n};\n\n//------------------------------------------------------------------------\n\nrenderTaggedPeople =() =>{\n\n  const people  = this.state.taggedPeople.map(\n    p => {\n        return (\n          <li \n            className='wordListItem'\n            key={'p' + p.userid}>\n              <ImageLabel \n                data          = { p   }\n                leftImg       = { tag } \n                badge         = { x   } \n                onBadgeClick  = { this.handleDeleteTaggedPerson  }\n                label         = { p.firstname + ' ' + p.lastname }/>                                                        \n          </li>\n        )\n      })\n      if(this.state.author){\n        people.push(      \n          <li \n            className='wordListItem'\n            key={'a' + this.state.author.userid}>\n            <ImageLabel \n              leftImg = { author}\n              label =   { this.state.author.firstname + ' ' + this.state.author.lastname}/>\n          </li>\n        ) \n      }\n      people.reverse()   \n      people.push( <li > { DropSearch.peopleDropSearch(this.state.cloudPeople,this.handleAddTaggedPerson) } </li>)\n      \n      return people\n \n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  \n  if(this.props.memory){    \n   return (\n      <div>\n        <li \n          className='wordListItem'\n          key={'location'}><ImageLabel leftImg = {globe} label = {this.props.memory.location}/>\n        </li>\n        <li \n          className='wordListItem'\n          key={'sss'}><ImageLabel leftImg = {calendar} label = {mem.getShortDate(this.props.memory.createdon) }/>\n        </li>\n      </div>\n   )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderClouds =() => {\n\n  const clouds  = this.state.memoryClouds.map(\n    cloud => {\n        return (\n          <li \n            className='wordListItem'\n            key={'cloud' + cloud.id}><ImageLabel \n              data          = { cloud }\n              badge         = { x   } \n              onBadgeClick  = { this.handleRemoveFromCloud  }\n              leftImg = {cloudIMG} \n              label = {cloud.name}/>                            \n          </li>\n        )\n      })\n      \n      clouds.push( <li > { DropSearch.cloudDropSearch(this.state.userClouds,null,true,true ,this.handleAddCloud,this.props.memory.userid) } </li>)\n      return clouds\n\n}\n\n//------------------------------------------------------------------------\n\nrenderImageZone =()=>{\n\n  let editControls=null\n  \n  var heroImg = this.activeFileisHero() ? hero : heroOutline;\n\n  editControls = \n  <div className = 'imageEditConrols' >\n    <img  \n      className='closeBtn'\n      src = {trash}\n      onClick={this.deleteFileFromMemory} \n      />\n    <img  \n      className='closeBtn'\n      src = {heroImg}\n      onClick = {this.makeHeroFile}\n      />\n  </div>\n\n  return (\n    <div className='imgcolumn'>\n      <MemoryFileViewer \n        memfile={this.state.activefile}\n        thumbStyleClass={'memoryModalImage'}\n        fileStyleClass={'memoryModalImage'}\n      />\n      {editControls}\n    </div>\n  )\n}\n\nonTitleBlur = (e) => {\n  const newTitle = e.target.value\n  if(newTitle !== this.props.memory.title){\n    this.props.memory.title = newTitle\n    //mem.updateTitle(this.props.memory.memid,newTitle)\n\n  }  \n}\n//------------------------------------------------------------------------\n\nonDescriptionBlur = (e) => {\n  const newDescription = e.target.value\n  if(newDescription !== this.props.memory.description){\n    this.props.memory.description = newDescription\n    //mem.updateDescription(this.props.memory.memid,newDescription)\n  }  \n}\n//------------------------------------------------------------------------\n\nonStoryBlur = (e) => {\n  const newStory = e.target.value\n  if(newStory !== this.props.memory.story){\n    console.log('updated story ');    \n    this.props.memory.story = newStory\n    //mem.updateStory(this.props.memory.memid,newStory)    \n    //mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n  }  \n}\n\n//------------------------------------------------------------------------\n\nhandleStoryChange = (event) =>{\n  let addarray = this.state.searchWords\n  let addarray2 = []\n  let story = event.target.value\n  let words = WordExctractor.extract(story,\n                                      {\n                                          language:\"english\",\n                                          remove_digits: true,\n                                          return_changed_case:true,\n                                          remove_duplicates: true\n                                      });\n    \n  // add any new words that exist in the story\n  words.map(word =>{\n      if(!this.searchWordExists(word)){\n        addarray.push({included:true,keyword:word,strength:0})       \n      }      \n  })\n\n  // remove any search words that now longer exist in the story\n  addarray.map(w =>{    \n    if(words.find(word => w.keyword === word) !== undefined){      \n      addarray2.push({included:w.included,keyword:w.keyword,strength:w.strength})\n    }   \n})\n  this.setState({searchWords:addarray2,story:story})  \n}\n\n//------------------------------------------------------------------------\n\nsearchWordExists = (word) => {\n  return this.state.searchWords.find(wordItem => word === wordItem.keyword)    \n}\n\n//------------------------------------------------------------------------\n\nrenderStoryZone = () =>{\n  const mem = this.state.memory\n \n    return (\n      <div className = 'infoColumn'>\n        <input \n            onBlur = { this.onTitleBlur } className='input-reset titleEdit' \n            type=\"text\"  defaultValue = { mem.title } placeholder='Title' id=\"title\" />\n        <input \n            onBlur = {this.onDescriptionBlur} className='input-reset descriptionEdit' \n            type=\"text\"  defaultValue = { mem.description } placeholder='Description' id=\"description\" />\n        <textarea\n            onBlur   = { this.onStoryBlur } className='input-reset storyEdit' onChange = { this.handleStoryChange } \n            type=\"text\"  defaultValue = { mem.story } placeholder='Description' id=\"description\" /> \n      </div> \n    )\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderCornerControls =() =>{\n  let editBtn = null\n  if(this.userIsAuthorisedToEdit()){\n    editBtn=\n      <img  \n      className='closeBtn'                   \n      src = {edit}\n      onClick={this.toggleEditMode} />\n  }\n  return (\n    <div className='footer'>                        \n      <img  \n        className='closeBtn'                   \n        src = {x}\n        onClick={this.onHide} />\n        {editBtn}\n\n    </div>\n\n  )\n}\n//------------------------------------------------------------------------\n\n\n\nrenderDetailsZone = () => {\n\n  const keywords     = this.renderKeyWords()\n  const people       = this.renderTaggedPeople()\n  const details      = this.renderDetails()\n  const clouds       = this.renderClouds()\n  const cornerCtrls  = this.renderCornerControls()\n  \n\n  return (\n    <div className = 'detailsColumn'>\n      <div className = 'z40'> \n        <h4>Tags </h4>\n        <ul className='keyWordList scroll' >  { keywords } </ul>\n      </div>\n      <div className = 'z25'>\n        <h4>People</h4>\n        <ul className='peopleList scroll' >   { people   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Clouds</h4>\n        <ul className='cloudList scroll' >    { clouds   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Details</h4>\n        <ul className='detailsList ' >        { details  } </ul>\n      </div>\n      {cornerCtrls}              \n    </div>  \n  )\n}\n\n//------------------------------------------------------------------------\n\nhandleDropfiles = async (acceptedFiles) =>{\n  \n  const reader = new FileReader()\n  acceptedFiles.forEach((file) => {\n    \n    reader.onload = () => {\n      console.log('onload ' + file.name);\n      if(mem.canHandleDroppedFile(file.name)){\n        alert('hold forf file upload ' + file.name)\n        //this.prepAndUploadFile(file)\n      }else{\n        alert('File type ' + mem.getExtension(file.name) + ' not yet implemented' )\n      }\n    }\n\n  reader.readAsArrayBuffer(file) \n\n  })\n}\n      \n\n//------------------------------------------------------------------------\n\nprepAndUploadFile = (file)=>{\n\n  let commonfileName = this.state.author.userid + '-' + Date.now()\n  let ext = mem.getExtension(file.name)\n  let fname = commonfileName + '-original'  + '.' + ext\n  let tname = commonfileName + '-thumb'     + '.' + ext\n  let filebuffer = null\n  let newMemfiles = this.state.memfiles\n  let memfile = {\n    id:0,\n    memid:this.props.memory.memid,\n    fileurl:'',\n    ishero:false,\n    fileext:ext,\n    thumburl:'',\n    thumbext:ext,\n  }\n  \n  mem.compressImage(file,0.9)\n      .then(result =>{\n        if(result.success){\n          filebuffer = result.data\n          mem.resizeImage(filebuffer,1500)\n          .then(result =>{\n            if(result.success){ \n            mem.uploadFile(tname,result.data)\n            .then(result =>{\n              if(result.success){\n                memfile.thumburl = result.awsurl\n                newMemfiles.push(memfile)\n                this.setState({memfiles:newMemfiles})\n                mem.uploadFile(fname,filebuffer)\n                .then(result =>{\n                  if(result.success){\n                    let last = this.state.memfiles.length-1\n                    this.state.memfiles[last].fileurl=result.awsurl\n                    mem.addFileToMemory({\n                        originalURL:this.state.memfiles[last].fileurl,\n                        thumbURL:this.state.memfiles[last].thumburl\n                    },false,this.props.memory.memid)\n                    .then(result => {\n                      if(result.success){\n                        console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n\n                      }\n                    })\n                  }\n                })\n              }\n            })\n            }\n          })\n        }\n        }) \n}\n\n//------------------------------------------------------------------------\n\nrenderCarouselControls = () => {\n\n  const mem = this.state.memory\n  const mfiles = this.state.memfiles\n  let thumbs = null\n\n  if(mfiles){\n    thumbs = mfiles.map((mfile,index) =>{\n      return(<img key={'thumb'+index} className='thumb' src = {mfile} onClick={(index) =>{}}/>)})\n  }\n\n  if(mfiles){\n      return (\n        <div className='controlbox'>\n          <img className='closeBtn' src = {left} onClick={this.goBack} /> \n          <div className='thumbArray'>\n              {thumbs}\n          </div> \n          <img className='closeBtn' src = {right} onClick={this.goForward} /> \n        </div>\n      )\n  }else{\n    return null\n  }  \n}\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === 0){\n      this.state.memfileIndex = ubound \n    }else{\n      this.state.memfileIndex--\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }\n}\n\ngoForward = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }    \n}\n\n};  \n\nexport default NewMemoryModal;\n"]},"metadata":{},"sourceType":"module"}