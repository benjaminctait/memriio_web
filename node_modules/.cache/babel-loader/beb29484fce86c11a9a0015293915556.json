{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/newmemorymodal.js\";\nimport React from 'react';\nimport greycross from '../images/x-grey.png';\nimport tick from '../images/tick.png';\nimport tag from '../images/tag.png';\nimport globe from '../images/outline-globe.png';\nimport calendar from '../images/calendar.png';\nimport key from '../images/key.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport trash from '../images/trash.png';\nimport hero from '../images/hero-full.png';\nimport heroOutline from '../images/hero-outline-grey.png';\nimport cloudIMG from '../images/cloud.png';\nimport cloudupload from '../images/cloudupload.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport * as mem from '../memriioserver';\nimport * as DropSearch from '../dropsearch/dropsearch';\nimport WordExctractor from 'keyword-extractor';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport './memorymodal.css';\nimport { CheckBox, ImageLabel } from '../buttons/buttons';\n\nclass NewMemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memid: 0,\n      createdon: '',\n      user: null,\n      title: '',\n      description: '',\n      location: '',\n      story: '',\n      cardtype: 0,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      memfiles: [],\n      cloudPeople: [],\n      activefile: null,\n      userClouds: [],\n      memfileIndex: 0\n    };\n\n    this.onHide = () => {\n      alert('implement file upload');\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.thisNeverGetsCalled = () => {\n      this.populateMemoryFiles(this.props.memfiles);\n      mem.getTaggedPeople(this.props.memory.memid, people => {\n        this.setState({\n          taggedPeople: people\n        });\n      });\n      mem.getMemoryClouds(this.props.memory.memid, clouds => {\n        this.populateCloudInfo(clouds);\n      });\n      mem.getMemorySearchWords(this.props.memory.memid, words => {\n        this.populateSearchWords(words);\n      });\n      mem.getUserClouds(this.props.memory.userid, clouds => {\n        this.setState({\n          userClouds: clouds\n        });\n      }); //mem.addTaggedPerson(this.props.memory.memid,Person.userid)\n      //mem.deleteTaggedCloud(this.props.memory.memid,Cloud.id)\n      //mem.deleteTaggedPerson(this.props.memory.memid,Person.userid)\n      // mem.addTaggedCloud(this.props.memory.memid,newCloudID)\n      //mem.updateMemword(this.state.searchWords[ind])\n      //mem.updateStory(this.props.memory.memid,newStory)    \n      //mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n      //mem.updateDescription(this.props.memory.memid,newDescription)\n      //mem.updateTitle(this.props.memory.memid,newTitle)\n      //this.prepAndUploadFile(file)\n    };\n\n    this.componentDidMount = () => {\n      console.log('comp did mount newMemoryModal');\n      mem.getUser(this.props.userid, user => {\n        this.setState({\n          user: user,\n          userClouds: this.props.userClouds\n        });\n        console.log('newMemoryMount ' + this.props.userClouds);\n      });\n    };\n\n    this.getHeroFile = () => {\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map((memfile, index) => {\n        if (memfile.ishero) {\n          this.state.memfileIndex = index;\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      mem.getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.userIsAuthorisedToEdit = () => {\n      return true;\n    };\n\n    this.deleteFileFromMemory = () => {\n      console.log('delte file from memroy');\n    };\n\n    this.makeHeroFile = () => {\n      console.log('make hero file');\n    };\n\n    this.handleAddTaggedPerson = Person => {\n      let tp = this.state.taggedPeople;\n\n      if (!tp.find(dude => dude.userid === Person.userid)) {\n        tp.push(Person);\n        tp.reverse();\n        this.setState({\n          taggedPeople: tp\n        });\n      }\n    };\n\n    this.handleRemoveFromCloud = Cloud => {\n      let cl = [];\n      this.state.memoryClouds.map(cloud => {\n        if (cloud.id !== Cloud.id) cl.push(cloud);\n      });\n      this.populateCloudInfo(cl);\n    };\n\n    this.handleDeleteTaggedPerson = Person => {\n      let tp = [];\n      this.state.taggedPeople.map(p => {\n        if (p.userid !== Person.userid) tp.push(p);\n      });\n      this.setState({\n        taggedPeople: tp\n      });\n    };\n\n    this.handleUploadMemory = () => {\n      alert('SAVE MEMORY');\n    };\n\n    this.handleAddCloud = clouds => {\n      let cloud = clouds[0];\n      let cl = this.state.memoryClouds;\n      let newCloudID = parseInt(cloud.value);\n\n      if (!cl.find(newcl => newcl.id === newCloudID)) {\n        cl.push({\n          id: newCloudID,\n          name: cloud.label\n        });\n        cl.reverse();\n        this.setState({\n          memoryClouds: cl\n        });\n        this.populateCloudInfo(cl);\n      }\n    };\n\n    this.activeFileisHero = () => {\n      var afile = this.state.activefile;\n\n      if (afile) {\n        if (afile.ishero) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    this.render = () => {\n      if (this.props.show) {\n        let memoryContent = this.renderMemoryContent();\n        let carouselControls = this.renderCarouselControls();\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"backdropStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalStyle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 9\n          }\n        }, memoryContent, carouselControls));\n      } else {\n        return null;\n      }\n    };\n\n    this.renderMemoryContent = () => {\n      const imageZone = this.renderImageZone();\n      const storyZone = this.renderStoryZone();\n      const detailsZone = this.renderDetailsZone();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 7\n        }\n      }, imageZone, storyZone, detailsZone);\n    };\n\n    this.handleSearchWordClick = (itemKey, upState) => {\n      const ind = this.state.searchWords.findIndex(item => {\n        return item.id === itemKey;\n      });\n      this.state.searchWords[ind].included = upState;\n      this.setState({\n        searchWords: this.state.searchWords\n      });\n    };\n\n    this.renderKeyWords = () => {\n      return /*#__PURE__*/React.createElement(Container, {\n        onDrop: e => this.setState({\n          searchWords: this.applyDrag(this.state.searchWords, e)\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 5\n        }\n      }, this.state.searchWords.map((wordItem, idx) => {\n        return /*#__PURE__*/React.createElement(Draggable, {\n          className: \"wordListItem\",\n          key: 'k' + idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(CheckBox, {\n          itemKey: wordItem.id,\n          onClick: this.handleSearchWordClick,\n          upState: wordItem.included,\n          downImg: greycross,\n          upImg: tick,\n          label: wordItem.keyword,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }\n        }));\n      }));\n    };\n\n    this.applyDrag = (arr, dragResult) => {\n      const {\n        removedIndex,\n        addedIndex,\n        payload\n      } = dragResult;\n      if (removedIndex === null && addedIndex === null) return arr;\n      const result = [...arr];\n      let itemToAdd = payload;\n      if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n      if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n      return result;\n    };\n\n    this.renderTaggedPeople = () => {\n      const people = this.state.taggedPeople.map(p => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'p' + p.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          data: p,\n          leftImg: tag,\n          badge: x,\n          onBadgeClick: this.handleDeleteTaggedPerson,\n          label: p.firstname + ' ' + p.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }\n        }));\n      });\n\n      if (this.state.author) {\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'a' + this.state.user.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: author,\n          label: this.state.user.firstname + ' ' + this.state.user.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      people.reverse();\n      people.push( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 20\n        }\n      }, \" \", DropSearch.peopleDropSearch(this.state.cloudPeople, this.handleAddTaggedPerson), \" \"));\n      return people;\n    };\n\n    this.renderDetails = () => {\n      if (this.props.memory) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'location',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: globe,\n          label: 'IMPLEMENT',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 28\n          }\n        })), /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'sss',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: calendar,\n          label: mem.getShortDate(this.props.memory.createdon),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 23\n          }\n        })));\n      }\n    };\n\n    this.renderClouds = () => {\n      const clouds = this.state.memoryClouds.map(cloud => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'cloud' + cloud.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          data: cloud,\n          badge: x,\n          onBadgeClick: this.handleRemoveFromCloud,\n          leftImg: cloudIMG,\n          label: cloud.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 38\n          }\n        }));\n      });\n      clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 20\n        }\n      }, \" \", DropSearch.cloudDropSearch(this.state.userClouds, null, true, true, this.handleAddCloud, this.state.userid)));\n      return clouds;\n    };\n\n    this.renderImageZone = () => {\n      let editControls = null;\n      let af = this.state.activefile;\n      let tempFile = null;\n      var heroImg = this.activeFileisHero() ? hero : heroOutline;\n      editControls = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imageEditConrols\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: trash,\n        onClick: this.deleteFileFromMemory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 5\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: heroImg,\n        onClick: this.makeHeroFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 5\n        }\n      }));\n\n      if (af) {\n        tempFile = {\n          fileurl: af.localurl,\n          ishero: af.ishero,\n          fileext: mem.getExtension(af.file.name),\n          thumburl: af.localurl,\n          thumbext: mem.getExtension(af.file.name)\n        };\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imgcolumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n        memfile: tempFile,\n        thumbStyleClass: 'memoryModalImage',\n        fileStyleClass: 'memoryModalImage',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 9\n        }\n      }), editControls);\n    };\n\n    this.onTitleBlur = e => {\n      const newTitle = e.target.value;\n      if (newTitle !== this.state.title) this.state.title = newTitle;\n    };\n\n    this.onDescriptionBlur = e => {\n      const newDescription = e.target.value;\n      if (newDescription !== this.state.description) this.state.description = newDescription;\n    };\n\n    this.onStoryBlur = e => {\n      const newStory = e.target.value;\n      if (newStory !== this.state.story) this.state.story = newStory;\n    };\n\n    this.handleStoryChange = event => {\n      let addarray = this.state.searchWords;\n      let addarray2 = [];\n      let story = event.target.value;\n      let words = WordExctractor.extract(story, {\n        language: \"english\",\n        remove_digits: true,\n        return_changed_case: true,\n        remove_duplicates: true\n      }); // add any new words that exist in the story\n\n      words.map(word => {\n        if (!this.searchWordExists(word)) {\n          addarray.push({\n            included: true,\n            keyword: word,\n            strength: 0\n          });\n        }\n      }); // remove any search words that now longer exist in the story\n\n      addarray.map(w => {\n        if (words.find(word => w.keyword === word) !== undefined) {\n          addarray2.push({\n            included: w.included,\n            keyword: w.keyword,\n            strength: w.strength\n          });\n        }\n      });\n      this.setState({\n        searchWords: addarray2,\n        story: story\n      });\n    };\n\n    this.searchWordExists = word => {\n      return this.state.searchWords.find(wordItem => word === wordItem.keyword);\n    };\n\n    this.renderStoryZone = () => {\n      const mem = this.state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infoColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        onBlur: this.onTitleBlur,\n        className: \"input-reset titleEdit\",\n        type: \"text\",\n        defaultValue: mem.title,\n        placeholder: \"Title\",\n        id: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        onBlur: this.onDescriptionBlur,\n        className: \"input-reset descriptionEdit\",\n        type: \"text\",\n        defaultValue: mem.description,\n        placeholder: \"Description\",\n        id: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"textarea\", {\n        onBlur: this.onStoryBlur,\n        className: \"input-reset storyEdit\",\n        onChange: this.handleStoryChange,\n        type: \"text\",\n        defaultValue: mem.story,\n        placeholder: \"Description\",\n        id: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.renderCornerControls = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: x,\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: cloudupload,\n        onClick: this.handleUploadMemory,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.renderDetailsZone = () => {\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n      const clouds = this.renderClouds();\n      const cornerCtrls = this.renderCornerControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detailsColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 9\n        }\n      }, \"Tags \"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"keyWordList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 9\n        }\n      }, \"  \", keywords, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z25\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 9\n        }\n      }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"peopleList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 9\n        }\n      }, \"   \", people, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 9\n        }\n      }, \"Clouds\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"cloudList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 9\n        }\n      }, \"    \", clouds, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 9\n        }\n      }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"detailsList \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 9\n        }\n      }, \"        \", details, \" \")), cornerCtrls);\n    };\n\n    this.handleDropfiles = async acceptedFiles => {\n      const reader = new FileReader();\n      acceptedFiles.forEach(file => {\n        reader.onload = () => {\n          console.log('onload ' + file.name);\n\n          if (mem.canHandleDroppedFile(file.name)) {\n            console.log('can handle dropped file ' + file.name);\n            let mfs = this.state.memfiles;\n            let newfile = {\n              file: file,\n              localurl: reader.result,\n              isHero: false\n            };\n            mfs.push(newfile);\n\n            if (!this.state.activefile) {\n              newfile.ishero = true;\n              this.state.activefile = newfile;\n            }\n\n            this.setState({\n              memfiles: mfs\n            });\n          } else {\n            alert('File type ' + mem.getExtension(file.name) + ' not yet implemented');\n          }\n        };\n\n        reader.readAsDataURL(file);\n      });\n    };\n\n    this.prepAndUploadFile = file => {\n      let commonfileName = this.state.author.userid + '-' + Date.now();\n      let ext = mem.getExtension(file.name);\n      let fname = commonfileName + '-original' + '.' + ext;\n      let tname = commonfileName + '-thumb' + '.' + ext;\n      let filebuffer = null;\n      let newMemfiles = this.state.memfiles;\n      let memfile = {\n        id: 0,\n        memid: this.props.memory.memid,\n        fileurl: '',\n        ishero: false,\n        fileext: ext,\n        thumburl: '',\n        thumbext: ext\n      };\n      mem.compressImage(file, 0.9).then(result => {\n        if (result.success) {\n          filebuffer = result.data;\n          mem.resizeImage(filebuffer, 1500).then(result => {\n            if (result.success) {\n              mem.uploadFile(tname, result.data).then(result => {\n                if (result.success) {\n                  memfile.thumburl = result.awsurl;\n                  newMemfiles.push(memfile);\n                  this.setState({\n                    memfiles: newMemfiles\n                  });\n                  mem.uploadFile(fname, filebuffer).then(result => {\n                    if (result.success) {\n                      let last = this.state.memfiles.length - 1;\n                      this.state.memfiles[last].fileurl = result.awsurl;\n                      mem.addFileToMemory({\n                        originalURL: this.state.memfiles[last].fileurl,\n                        thumbURL: this.state.memfiles[last].thumburl\n                      }, false, this.props.memory.memid).then(result => {\n                        if (result.success) {\n                          console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.renderCarouselControls = () => {\n      const mem = this.state;\n      const mfiles = mem.memfiles;\n      let thumbs = mfiles.map((mfile, index) => {\n        return /*#__PURE__*/React.createElement(\"img\", {\n          key: 'thumb' + index,\n          className: \"thumb\",\n          src: mfile.localurl,\n          onClick: index => {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 14\n          }\n        });\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"controlbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: left,\n        onClick: this.goBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Dropzone, {\n        onDrop: acceptedFiles => this.handleDropfiles(acceptedFiles),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 7\n        }\n      }, ({\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        className: \"thumbArrayEdit\"\n      }, getRootProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 13\n        }\n      }), thumbs)), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: right,\n        onClick: this.goForward,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.goBack = e => {\n      let ubound = this.state.memfiles.length - 1;\n\n      if (this.state.memfileIndex === 0) {\n        this.state.memfileIndex = ubound;\n      } else {\n        this.state.memfileIndex--;\n      }\n\n      this.setState({\n        activefile: this.state.memfiles[this.state.memfileIndex]\n      });\n    };\n\n    this.goForward = e => {\n      let ubound = this.state.memfiles.length - 1;\n\n      if (this.state.memfileIndex === ubound) {\n        this.state.memfileIndex = 0;\n      } else {\n        this.state.memfileIndex++;\n      }\n\n      this.setState({\n        activefile: this.state.memfiles[this.state.memfileIndex]\n      });\n    };\n  }\n\n}\n\n;\nexport default NewMemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/newmemorymodal.js"],"names":["React","greycross","tick","tag","globe","calendar","key","author","x","left","right","trash","hero","heroOutline","cloudIMG","cloudupload","MemoryFileViewer","mem","DropSearch","WordExctractor","Container","Draggable","Dropzone","useDropzone","CheckBox","ImageLabel","NewMemoryModal","Component","state","memid","createdon","user","title","description","location","story","cardtype","taggedPeople","memoryClouds","searchWords","memfiles","cloudPeople","activefile","userClouds","memfileIndex","onHide","alert","props","onHideModal","memory","thisNeverGetsCalled","populateMemoryFiles","getTaggedPeople","people","setState","getMemoryClouds","clouds","populateCloudInfo","getMemorySearchWords","words","populateSearchWords","getUserClouds","userid","componentDidMount","console","log","getUser","getHeroFile","map","memfile","index","ishero","getCloudPeople","userIsAuthorisedToEdit","deleteFileFromMemory","makeHeroFile","handleAddTaggedPerson","Person","tp","find","dude","push","reverse","handleRemoveFromCloud","Cloud","cl","cloud","id","handleDeleteTaggedPerson","p","handleUploadMemory","handleAddCloud","newCloudID","parseInt","value","newcl","name","label","activeFileisHero","afile","render","show","memoryContent","renderMemoryContent","carouselControls","renderCarouselControls","imageZone","renderImageZone","storyZone","renderStoryZone","detailsZone","renderDetailsZone","handleSearchWordClick","itemKey","upState","ind","findIndex","item","included","renderKeyWords","e","applyDrag","wordItem","idx","keyword","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","renderTaggedPeople","firstname","lastname","peopleDropSearch","renderDetails","getShortDate","renderClouds","cloudDropSearch","editControls","af","tempFile","heroImg","fileurl","localurl","fileext","getExtension","file","thumburl","thumbext","onTitleBlur","newTitle","target","onDescriptionBlur","newDescription","onStoryBlur","newStory","handleStoryChange","event","addarray","addarray2","extract","language","remove_digits","return_changed_case","remove_duplicates","word","searchWordExists","strength","w","undefined","renderCornerControls","keywords","details","cornerCtrls","handleDropfiles","acceptedFiles","reader","FileReader","forEach","onload","canHandleDroppedFile","mfs","newfile","isHero","readAsDataURL","prepAndUploadFile","commonfileName","Date","now","ext","fname","tname","filebuffer","newMemfiles","compressImage","then","success","data","resizeImage","uploadFile","awsurl","last","length","addFileToMemory","originalURL","thumbURL","JSON","stringify","mfiles","thumbs","mfile","goBack","getRootProps","getInputProps","goForward","ubound"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport greycross from '../images/x-grey.png'\nimport tick from '../images/tick.png'\nimport tag from '../images/tag.png'\nimport globe from '../images/outline-globe.png'\nimport calendar from '../images/calendar.png'\nimport key from '../images/key.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport trash from '../images/trash.png'\nimport hero from '../images/hero-full.png'\nimport heroOutline from '../images/hero-outline-grey.png'\nimport cloudIMG from '../images/cloud.png'\nimport cloudupload from '../images/cloudupload.png'\n\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport * as mem from '../memriioserver'\nimport * as DropSearch from '../dropsearch/dropsearch'\n\nimport WordExctractor from 'keyword-extractor'\nimport { Container, Draggable} from 'react-smooth-dnd'\nimport Dropzone,{useDropzone} from 'react-dropzone'\n\nimport './memorymodal.css'\n\nimport {CheckBox,ImageLabel} from '../buttons/buttons'\n\nclass NewMemoryModal extends React.Component{\n\n    state ={\n       \n          memid:0,\n          createdon:'',\n          user:null,\n          title:'',\n          description:'',\n          location:'',\n          story:'',\n          cardtype:0,\n          taggedPeople:[],\n          memoryClouds:[],\n          searchWords:[],         \n          memfiles:[],\n          cloudPeople:[],\n     \n        activefile:null,\n        userClouds:[],\n        memfileIndex:0,\n    }\n   \n\nonHide = () =>{    \n  alert('implement file upload')\n  this.props.onHideModal(this.props.memory)\n}\n//---------------------------------------------------------------------------------\n// DELETE DELETE DELETE DELETE -----------\n// DELETE DELETE DELETE DELETE -----------\n// DELETE DELETE DELETE DELETE -----------\n\nthisNeverGetsCalled =() =>{\n  \n    \n        this.populateMemoryFiles(this.props.memfiles)\n        \n        mem.getTaggedPeople      ( this.props.memory.memid,(people => { this.setState({taggedPeople:people})}))\n        mem.getMemoryClouds      ( this.props.memory.memid,(clouds => { this.populateCloudInfo(clouds)}))\n        mem.getMemorySearchWords ( this.props.memory.memid,(words  => { this.populateSearchWords(words)}))\n        mem.getUserClouds        ( this.props.memory.userid,(clouds => { this.setState({userClouds:clouds})}))\n\n        //mem.addTaggedPerson(this.props.memory.memid,Person.userid)\n        //mem.deleteTaggedCloud(this.props.memory.memid,Cloud.id)\n        //mem.deleteTaggedPerson(this.props.memory.memid,Person.userid)\n        // mem.addTaggedCloud(this.props.memory.memid,newCloudID)\n        //mem.updateMemword(this.state.searchWords[ind])\n        //mem.updateStory(this.props.memory.memid,newStory)    \n    //mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n    //mem.updateDescription(this.props.memory.memid,newDescription)\n    //mem.updateTitle(this.props.memory.memid,newTitle)\n    //this.prepAndUploadFile(file)\n        \n     \n}\n\n//---------------------------------------------------------------------------------\n\ncomponentDidMount = () =>{\nconsole.log('comp did mount newMemoryModal');\n  mem.getUser(this.props.userid,(user => {\n    this.setState({user:user,userClouds:this.props.userClouds})\n    console.log('newMemoryMount ' + this.props.userClouds);\n  }))\n  \n\n}\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    \n    let hero = this.state.memfiles[0]\n\n    this.state.memfiles.map((memfile,index)=> {\n\n        if(memfile.ishero){         \n            this.state.memfileIndex = index            \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({activefile:this.getHeroFile()})\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n    this.setState({memoryClouds:clouds})\n    mem.getCloudPeople (clouds,((people)=>{\n      this.setState({cloudPeople:people})\n    }))   \n  }\n\n//------------------------------------------------------------------------\n\n  userIsAuthorisedToEdit = () =>{\n    return true\n  }\n\n  //------------------------------------------------------------------------\n\n  deleteFileFromMemory =() =>{\n    console.log('delte file from memroy');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n\n  makeHeroFile = () =>{\n    console.log('make hero file');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  handleAddTaggedPerson = (Person) =>{\n    \n    let tp = this.state.taggedPeople\n    if(!tp.find(dude => dude.userid === Person.userid)){\n      tp.push(Person)\n      tp.reverse()\n      this.setState({taggedPeople:tp})\n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  handleRemoveFromCloud = ( Cloud ) =>{\n    let cl = []\n    this.state.memoryClouds.map(cloud =>{if(cloud.id !== Cloud.id) cl.push(cloud)})\n    this.populateCloudInfo(cl)\n\n  }\n\n  //------------------------------------------------------------------------\n\n  handleDeleteTaggedPerson = (Person) =>{\n    let tp = []\n    this.state.taggedPeople.map( p =>{if(p.userid !== Person.userid)tp.push(p)})\n    this.setState({taggedPeople:tp})\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  handleUploadMemory = () =>{\n    alert('SAVE MEMORY')\n  }\n\n  //------------------------------------------------------------------------\n  \n  \n  handleAddCloud = (clouds) =>{\n    let cloud = clouds[0]\n    let cl = this.state.memoryClouds\n    \n    let newCloudID = parseInt(cloud.value)\n    if(!cl.find(newcl => newcl.id === newCloudID)){\n\n      cl.push({\n        id:newCloudID,\n        name:cloud.label\n      })\n      cl.reverse()\n      this.setState({memoryClouds:cl})\n      this.populateCloudInfo(cl)\n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  activeFileisHero =() =>{\n    var afile = this.state.activefile\n    \n    if(afile){\n      if(afile.ishero){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  render = () => {\n   \n  if(this.props.show){\n\n    let memoryContent     = this.renderMemoryContent()\n    let carouselControls  = this.renderCarouselControls()\n    return(\n      <div className= 'backdropStyle'>\n        <div className='modalStyle'>\n          {memoryContent}   \n          {carouselControls}\n        </div>\n      </div>\n    )    \n  }else{\n    return null\n  }    \n}\n\n//------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    \n  const imageZone   = this.renderImageZone()\n  const storyZone   = this.renderStoryZone()\n  const detailsZone = this.renderDetailsZone()\n  \n  \n  return (\n      <div className='modalrow'>\n        {imageZone}\n        {storyZone}\n        {detailsZone}\n      </div>\n  )\n  \n}\n  \n//------------------------------------------------------------------------\n\nhandleSearchWordClick = (itemKey,upState) =>{\n  \n  const ind = this.state.searchWords.findIndex(item =>{return item.id === itemKey})\n  this.state.searchWords[ind].included = upState\n  this.setState({searchWords:this.state.searchWords})\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n\n  return (\n    <Container  onDrop={e => this.setState({searchWords:this.applyDrag(this.state.searchWords,e)})}>\n    \n      {\n        this.state.searchWords.map((wordItem, idx) => {\n          return (\n            <Draggable className='wordListItem' key={'k'+idx}>\n              <CheckBox \n                itemKey = {wordItem.id}\n                onClick = {this.handleSearchWordClick}\n                upState = {wordItem.included} \n                downImg = {greycross} \n                upImg   = {tick} \n                label   = {wordItem.keyword}\n              />\n            </Draggable> \n          )\n        })\n      }\n    </Container>\n  )\n  \n}\n\n//------------------------------------------------------------------------\n\napplyDrag = (arr, dragResult) => {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n  if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n  if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n  return result;\n};\n\n//------------------------------------------------------------------------\n\nrenderTaggedPeople =() =>{\n\n  const people  = this.state.taggedPeople.map(\n    p => {\n        return (\n          <li \n            className='wordListItem'\n            key={'p' + p.userid}>\n              <ImageLabel \n                data          = { p   }\n                leftImg       = { tag } \n                badge         = { x   } \n                onBadgeClick  = { this.handleDeleteTaggedPerson  }\n                label         = { p.firstname + ' ' + p.lastname }/>                                                        \n          </li>\n        )\n      })\n      if(this.state.author){\n        people.push(      \n          <li \n            className='wordListItem'\n            key={'a' + this.state.user.userid}>\n            <ImageLabel \n              leftImg = { author}\n              label =   { this.state.user.firstname + ' ' + this.state.user.lastname}/>\n          </li>\n        ) \n      }\n      people.reverse()   \n      people.push( <li > { DropSearch.peopleDropSearch(this.state.cloudPeople,this.handleAddTaggedPerson) } </li>)\n      \n      return people\n \n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  \n  if(this.props.memory){    \n   return (\n      <div>\n        <li \n          className='wordListItem'\n          key={'location'}><ImageLabel leftImg = {globe} label = {'IMPLEMENT'}/>\n        </li>\n        <li \n          className='wordListItem'\n          key={'sss'}><ImageLabel leftImg = {calendar} label = {mem.getShortDate(this.props.memory.createdon) }/>\n        </li>\n      </div>\n   )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderClouds =() => {\n\n  const clouds  = this.state.memoryClouds.map(\n    cloud => {\n        return (\n          <li \n            className='wordListItem'\n            key={'cloud' + cloud.id}><ImageLabel \n              data          = { cloud }\n              badge         = { x   } \n              onBadgeClick  = { this.handleRemoveFromCloud  }\n              leftImg = {cloudIMG} \n              label = {cloud.name}/>                            \n          </li>\n        )\n      })\n      \n      clouds.push( <li > { DropSearch.cloudDropSearch(this.state.userClouds,\n                                                      null,true,true ,\n                                                      this.handleAddCloud,\n                                                      this.state.userid) } \n                                                      </li>)\n      return clouds\n\n}\n\n//------------------------------------------------------------------------\n\nrenderImageZone =()=>{\n\n  let editControls=null\n  let af = this.state.activefile\n  let tempFile = null\n  \n  var heroImg = this.activeFileisHero() ? hero : heroOutline;\n\n  editControls = \n  <div className = 'imageEditConrols' >\n    <img  \n      className='closeBtn'\n      src = {trash}\n      onClick={this.deleteFileFromMemory} \n      />\n    <img  \n      className='closeBtn'\n      src = {heroImg}\n      onClick = {this.makeHeroFile}\n      />\n  </div>\n\n  if(af)\n  {\n    tempFile = \n    {\n      fileurl:af.localurl,\n      ishero:af.ishero,\n      fileext:mem.getExtension(af.file.name),\n      thumburl:af.localurl,\n      thumbext:mem.getExtension(af.file.name)\n    }\n  }\n\n    return (\n      <div className='imgcolumn'>\n        <MemoryFileViewer \n          memfile={tempFile}\n          thumbStyleClass={'memoryModalImage'}\n          fileStyleClass={'memoryModalImage'}\n        />\n        {editControls}\n      </div>\n    )\n\n  \n  \n}\n\nonTitleBlur = (e) => {\n  const newTitle = e.target.value\n  if(newTitle !== this.state.title) this.state.title = newTitle\n}\n//------------------------------------------------------------------------\n\nonDescriptionBlur = (e) => {\n  const newDescription = e.target.value\n  if(newDescription !== this.state.description) this.state.description = newDescription\n\n}\n//------------------------------------------------------------------------\n\nonStoryBlur = (e) => {\n  const newStory = e.target.value\n  if(newStory !== this.state.story) this.state.story = newStory\n}\n\n//------------------------------------------------------------------------\n\nhandleStoryChange = (event) =>{\n  let addarray = this.state.searchWords\n  let addarray2 = []\n  let story = event.target.value\n  let words = WordExctractor.extract(story,\n                                      {\n                                          language:\"english\",\n                                          remove_digits: true,\n                                          return_changed_case:true,\n                                          remove_duplicates: true\n                                      })\n    \n  // add any new words that exist in the story\n  words.map(word =>{\n      if(!this.searchWordExists(word)){\n        addarray.push({included:true,keyword:word,strength:0})       \n      }      \n  })\n\n  // remove any search words that now longer exist in the story\n  addarray.map(w =>{    \n    if(words.find(word => w.keyword === word) !== undefined){      \n      addarray2.push({included:w.included,keyword:w.keyword,strength:w.strength})\n    }   \n  })\n\n  this.setState({searchWords:addarray2,story:story})  \n}\n\n//------------------------------------------------------------------------\n\nsearchWordExists = (word) => {\n  return this.state.searchWords.find(wordItem => word === wordItem.keyword)    \n}\n\n//------------------------------------------------------------------------\n\nrenderStoryZone = () =>{\n  const mem = this.state\n \n    return (\n      <div className = 'infoColumn'>\n        <input \n            onBlur = { this.onTitleBlur } className='input-reset titleEdit' \n            type=\"text\"  defaultValue = { mem.title } placeholder='Title' id=\"title\" />\n        <input \n            onBlur = {this.onDescriptionBlur} className='input-reset descriptionEdit' \n            type=\"text\"  defaultValue = { mem.description } placeholder='Description' id=\"description\" />\n        <textarea\n            onBlur   = { this.onStoryBlur } className='input-reset storyEdit' onChange = { this.handleStoryChange } \n            type=\"text\"  defaultValue = { mem.story } placeholder='Description' id=\"description\" /> \n      </div> \n    )\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderCornerControls =() =>{\n  \n  return (\n    <div className='footer'>                        \n      <img  \n        className='closeBtn'                   \n        src = {x}\n        onClick={this.onHide} />\n      <img  \n        className='closeBtn'                   \n        src = {cloudupload}\n        onClick={this.handleUploadMemory} />\n    </div>\n  )\n}\n//------------------------------------------------------------------------\n\n\n\nrenderDetailsZone = () => {\n\n  const keywords     = this.renderKeyWords()\n  const people       = this.renderTaggedPeople()\n  const details      = this.renderDetails()\n  const clouds       = this.renderClouds()\n  const cornerCtrls  = this.renderCornerControls()\n  \n\n  return (\n    <div className = 'detailsColumn'>\n      <div className = 'z40'> \n        <h4>Tags </h4>\n        <ul className='keyWordList scroll' >  { keywords } </ul>\n      </div>\n      <div className = 'z25'>\n        <h4>People</h4>\n        <ul className='peopleList scroll' >   { people   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Clouds</h4>\n        <ul className='cloudList scroll' >    { clouds   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Details</h4>\n        <ul className='detailsList ' >        { details  } </ul>\n      </div>\n      {cornerCtrls}              \n    </div>  \n  )\n}\n\n//------------------------------------------------------------------------\n\nhandleDropfiles = async (acceptedFiles) =>{\n  \n  const reader = new FileReader()\n  acceptedFiles.forEach((file) => {\n    \n    reader.onload = () => {\n      console.log('onload ' + file.name);\n      if(mem.canHandleDroppedFile(file.name)){\n        \n        console.log('can handle dropped file ' + file.name);\n        let mfs = this.state.memfiles\n        let newfile = {file:file,localurl:reader.result,isHero:false}\n        mfs.push(newfile)\n        if(!this.state.activefile) {\n          newfile.ishero = true\n          this.state.activefile = newfile\n        }\n        this.setState({memfiles:mfs})\n\n      }else{\n        alert('File type ' + mem.getExtension(file.name) + ' not yet implemented' )\n      }\n    }\n  reader.readAsDataURL(file)\n\n  })\n}\n\n//------------------------------------------------------------------------\n\nprepAndUploadFile = (file)=>{\n\n  let commonfileName = this.state.author.userid + '-' + Date.now()\n  let ext = mem.getExtension(file.name)\n  let fname = commonfileName + '-original'  + '.' + ext\n  let tname = commonfileName + '-thumb'     + '.' + ext\n  let filebuffer = null\n  let newMemfiles = this.state.memfiles\n  let memfile = {\n    id:0,\n    memid:this.props.memory.memid,\n    fileurl:'',\n    ishero:false,\n    fileext:ext,\n    thumburl:'',\n    thumbext:ext,\n  }\n  \n  mem.compressImage(file,0.9)\n      .then(result =>{\n        if(result.success){\n          filebuffer = result.data\n          mem.resizeImage(filebuffer,1500)\n          .then(result =>{\n            if(result.success){ \n            mem.uploadFile(tname,result.data)\n            .then(result =>{\n              if(result.success){\n                memfile.thumburl = result.awsurl\n                newMemfiles.push(memfile)\n                this.setState({memfiles:newMemfiles})\n                mem.uploadFile(fname,filebuffer)\n                .then(result =>{\n                  if(result.success){\n                    let last = this.state.memfiles.length-1\n                    this.state.memfiles[last].fileurl=result.awsurl\n                    mem.addFileToMemory({\n                        originalURL:this.state.memfiles[last].fileurl,\n                        thumbURL:this.state.memfiles[last].thumburl\n                    },false,this.props.memory.memid)\n                    .then(result => {\n                      if(result.success){\n                        console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n\n                      }\n                    })\n                  }\n                })\n              }\n            })\n            }\n          })\n        }\n        }) \n}\n\n//------------------------------------------------------------------------\n\nrenderCarouselControls = () => {\n\n  const mem = this.state\n  const mfiles = mem.memfiles\n\n  let thumbs = mfiles.map((mfile,index) =>{\n      return(<img key={'thumb'+index} className='thumb' src = {mfile.localurl} onClick={(index) =>{}}/>)})\n  \n  return (\n    <div className='controlbox'>\n      <img className='closeBtn' src = {left} onClick={this.goBack} /> \n      <Dropzone onDrop={acceptedFiles => this.handleDropfiles(acceptedFiles)}>\n        {\n          ({getRootProps, getInputProps}) => (              \n            <div className='thumbArrayEdit' {...getRootProps()}>\n              {thumbs}\n            </div>              \n          )\n        }\n      </Dropzone>\n      <img className='closeBtn' src = {right} onClick={this.goForward} /> \n    </div>\n  )  \n}\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  \n  let ubound = this.state.memfiles.length-1\n  if(this.state.memfileIndex === 0){\n    this.state.memfileIndex = ubound \n  }else{\n    this.state.memfileIndex--\n  }\n  this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})  \n}\n\ngoForward = (e) => {\n  \n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  \n}\n\n};  \n\nexport default NewMemoryModal;\n"]},"metadata":{},"sourceType":"module"}