{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport greycross from '../images/x-grey.png';\nimport tick from '../images/tick.png';\nimport tag from '../images/tag.png';\nimport globe from '../images/outline-globe.png';\nimport calendar from '../images/calendar.png';\nimport key from '../images/key.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport edit from '../images/edit.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport trash from '../images/trash.png';\nimport hero from '../images/hero-full.png';\nimport heroOutline from '../images/hero-outline-grey.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport { format } from \"date-fns\";\nimport * as Memriio from '../memriioserver';\nimport WordExctractor from 'keyword-extractor';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport * as Utils from './utils';\nimport './memorymodal.css';\nimport { CheckBox, SubTag, ImageLabel } from '../buttons/buttons';\n\nclass MemoryModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null,\n      author: null,\n      memfileIndex: 0,\n      editMode: false\n    };\n\n    this.onHide = () => {\n      this.state.editMode = false;\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          Memriio.getUser(this.props.memory.userid, author => {\n            this.setState({\n              author: author\n            });\n            console.log('Author + ' + JSON.stringify(author));\n          });\n          Memriio.getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          Memriio.getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          Memriio.getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      this.state.memfileIndex = 0;\n      let hero = this.state.memfiles[0];\n      this.state.memfiles.map((memfile, index) => {\n        if (memfile.ishero) {\n          this.state.memfileIndex = index;\n          hero = memfile;\n        }\n      });\n      return hero;\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      Memriio.getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.toggleEditMode = () => {\n      this.setState({\n        editMode: !this.state.editMode\n      });\n    };\n\n    this.userIsAuthorisedToEdit = () => {\n      return true;\n    };\n\n    this.deleteFileFromMemory = () => {\n      console.log('delte file from memroy');\n    };\n\n    this.makeHeroFile = () => {\n      console.log('make hero file');\n    };\n\n    this.activeFileisHero = () => {\n      var afile = this.state.activefile;\n\n      if (afile) {\n        if (afile.ishero) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    this.renderMemoryContent = () => {\n      const imageZone = this.renderImageZone();\n      const storyZone = this.renderStoryZone();\n      const detailsZone = this.renderDetailsZone();\n\n      if (this.state.activefile) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"modalrow\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 9\n          }\n        }, imageZone, storyZone, detailsZone);\n      } else {\n        return null;\n      }\n    };\n\n    this.handleSearchWordClick = (itemKey, upState) => {\n      const ind = this.state.searchWords.findIndex(item => {\n        return item.id === itemKey;\n      });\n      this.state.searchWords[ind].included = upState;\n      console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]));\n      Memriio.updateMemword(this.state.searchWords[ind]);\n      this.setState({\n        searchWords: this.state.searchWords\n      });\n    };\n\n    this.renderKeyWords = () => {\n      if (this.state.editMode) {\n        this.state.searchWords.map(item => {\n          console.log(item.included + ':\"' + item.keyword);\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"wordList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Container, {\n          onDrop: e => this.setState({\n            searchWords: this.applyDrag(this.state.searchWords, e)\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 11\n          }\n        }, this.state.searchWords.map((wordItem, idx) => {\n          return /*#__PURE__*/React.createElement(Draggable, {\n            className: \"wordListItem\",\n            key: 'k' + idx,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(CheckBox, {\n            itemKey: wordItem.id,\n            onClick: this.handleSearchWordClick,\n            upState: wordItem.included,\n            downImg: greycross,\n            upImg: tick,\n            label: wordItem.keyword,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }\n          }));\n        })));\n      } else {\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"wordList\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 7\n          }\n        }, \" \", this.state.searchWords.map((wordItem, idx) => {\n          if (wordItem.included) {\n            return /*#__PURE__*/React.createElement(\"li\", {\n              className: \"wordListItem\",\n              key: 'k' + idx,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 15\n              }\n            }, /*#__PURE__*/React.createElement(ImageLabel, {\n              img: key,\n              label: wordItem.keyword,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 17\n              }\n            }));\n          }\n        }));\n      }\n    };\n\n    this.applyDrag = (arr, dragResult) => {\n      const {\n        removedIndex,\n        addedIndex,\n        payload\n      } = dragResult;\n      if (removedIndex === null && addedIndex === null) return arr;\n      const result = [...arr];\n      let itemToAdd = payload;\n      if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n      if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n      return result;\n    };\n\n    this.renderTaggedPeople = () => {\n      const people = this.state.taggedPeople.map(p => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 't' + p.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          img: tag,\n          label: p.firstname + ' ' + p.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 34\n          }\n        }));\n      });\n\n      if (this.state.author) {\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          key: 'a' + this.state.author.userid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          img: author,\n          label: this.state.author.firstname + ' ' + this.state.author.lastname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      people.reverse();\n      return people;\n    };\n\n    this.renderDetails = () => {\n      var fdate = new Date(this.props.memory.createdon);\n      var formattedDate = format(fdate, 'dd.MMM.yyyy');\n      const details = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'location',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        img: globe,\n        label: this.props.memory.location,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 26\n        }\n      })), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"wordListItem\",\n        key: 'sss',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ImageLabel, {\n        img: calendar,\n        label: formattedDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 21\n        }\n      })));\n      return details;\n    };\n\n    this.renderImageZone = () => {\n      let editControls = null;\n\n      if (this.state.editMode) {\n        var heroImg = this.activeFileisHero() ? hero : heroOutline;\n        editControls = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imageEditConrols\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: trash,\n          onClick: this.deleteFileFromMemory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: heroImg,\n          onClick: this.makeHeroFile,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 7\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"imgcolumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n        memfile: this.state.activefile,\n        thumbStyleClass: 'memoryModalImage',\n        fileStyleClass: 'memoryModalImage',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 7\n        }\n      }), editControls);\n    };\n\n    this.onTitleBlur = e => {\n      const newTitle = e.target.value;\n\n      if (newTitle !== this.props.memory.title) {\n        this.props.memory.title = newTitle;\n        Memriio.updateTitle(this.props.memory.memid, newTitle);\n      }\n    };\n\n    this.onDescriptionBlur = e => {\n      const newDescription = e.target.value;\n\n      if (newDescription !== this.props.memory.description) {\n        this.props.memory.description = newDescription;\n        Memriio.updateDescription(this.props.memory.memid, newDescription);\n      }\n    };\n\n    this.onStoryBlur = e => {\n      const newStory = e.target.value;\n\n      if (newStory !== this.props.memory.story) {\n        console.log('updated story ');\n        this.props.memory.story = newStory;\n        Memriio.updateStory(this.props.memory.memid, newStory);\n        Memriio.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n      }\n    };\n\n    this.handleStoryChange = event => {\n      let addarray = this.state.searchWords;\n      let addarray2 = [];\n      let story = event.target.value;\n      let words = WordExctractor.extract(story, {\n        language: \"english\",\n        remove_digits: true,\n        return_changed_case: true,\n        remove_duplicates: true\n      }); // add any new words that exist in the story\n\n      words.map(word => {\n        if (!this.searchWordExists(word)) {\n          addarray.push({\n            included: true,\n            keyword: word,\n            strength: 0\n          });\n        }\n      }); // remove any search words that now longer exist in the story\n\n      addarray.map(w => {\n        if (words.find(word => w.keyword === word) !== undefined) {\n          addarray2.push({\n            included: w.included,\n            keyword: w.keyword,\n            strength: w.strength\n          });\n        }\n      });\n      this.setState({\n        searchWords: addarray2,\n        story: story\n      });\n    };\n\n    this.searchWordExists = word => {\n      return this.state.searchWords.find(wordItem => word === wordItem.keyword);\n    };\n\n    this.renderStoryZone = () => {\n      const mem = this.props.memory;\n\n      if (this.state.editMode) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onTitleBlur,\n          className: \"input-reset titleEdit\",\n          type: \"text\",\n          defaultValue: mem.title,\n          placeholder: \"Title\",\n          id: \"title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onDescriptionBlur,\n          className: \"input-reset descriptionEdit\",\n          type: \"text\",\n          defaultValue: mem.description,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"textarea\", {\n          onBlur: this.onStoryBlur,\n          className: \"input-reset storyEdit\",\n          onChange: this.handleStoryChange,\n          type: \"text\",\n          defaultValue: mem.story,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 9\n          }\n        }, mem.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy i measure mt2 mid-gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 9\n          }\n        }, mem.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy measure mt2 black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 9\n          }\n        }, \" \", mem.story, \" \"));\n      }\n    };\n\n    this.renderCornerControls = () => {\n      let editBtn = null;\n\n      if (this.userIsAuthorisedToEdit()) {\n        editBtn = /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: edit,\n          onClick: this.toggleEditMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 7\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: x,\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 7\n        }\n      }), editBtn);\n    };\n\n    this.renderDetailsZone = () => {\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n      const cornderCtrls = this.renderCornerControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detailsColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 7\n        }\n      }, \"Tags \"), keywords, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 7\n        }\n      }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"wordList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 7\n        }\n      }, \" \", people, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 7\n        }\n      }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"wordList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 7\n        }\n      }, \" \", details, \" \"), cornderCtrls);\n    };\n\n    this.handleDropfiles = async acceptedFiles => {\n      const reader = new FileReader();\n      acceptedFiles.forEach(file => {\n        console.log(file.name);\n\n        reader.onload = () => {// let fname = this.state.author.userid + '-' + Date.now()\n          // let ftype = Memriio.getFileMime(file.)\n          // Memriio.getObjectSignedurl(fname).then(surl => Memriio.uploadFile(reader.result,surl))\n        };\n\n        reader.readAsBinaryString(file);\n      });\n    };\n\n    this.renderCarouselControls = () => {\n      const mem = this.props.memory;\n      const mfiles = this.state.memfiles;\n      let thumbs = null;\n\n      if (mfiles) {\n        thumbs = mfiles.map((mfile, index) => {\n          return /*#__PURE__*/React.createElement(\"img\", {\n            key: 'thumb' + index,\n            className: \"thumb\",\n            src: mfile.thumburl,\n            onClick: index => {},\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 14\n            }\n          });\n        });\n      }\n\n      if (!this.state.editMode && mfiles) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controlbox\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: left,\n          onClick: this.goBack,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"thumbArray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 11\n          }\n        }, thumbs), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: right,\n          onClick: this.goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 11\n          }\n        }));\n      } else if (this.state.editMode && mfiles) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"controlbox\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: left,\n          onClick: this.goBack,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(Dropzone, {\n          onDrop: acceptedFiles => this.handleDropfiles(acceptedFiles),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 11\n          }\n        }, ({\n          getRootProps,\n          getInputProps\n        }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          className: \"thumbArrayEdit\"\n        }, getRootProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 17\n          }\n        }), thumbs)), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: right,\n          onClick: this.goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return null;\n      }\n    };\n\n    this.goBack = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === 0) {\n          this.state.memfileIndex = ubound;\n        } else {\n          this.state.memfileIndex--;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.goForward = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === ubound) {\n          this.state.memfileIndex = 0;\n        } else {\n          this.state.memfileIndex++;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      let memoryContent = this.renderMemoryContent();\n      let carouselControls = this.renderCarouselControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }\n      }, memoryContent, carouselControls));\n    } else {\n      return null;\n    }\n  } //------------------------------------------------------------------------\n\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","greycross","tick","tag","globe","calendar","key","author","x","edit","left","right","trash","hero","heroOutline","MemoryFileViewer","format","Memriio","WordExctractor","Container","Draggable","Dropzone","useDropzone","Utils","CheckBox","SubTag","ImageLabel","MemoryModal","Component","state","memory","taggedPeople","memoryClouds","searchWords","memfiles","cloudPeople","userClouds","activefile","memfileIndex","editMode","onHide","props","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","getUser","userid","setState","console","log","JSON","stringify","getTaggedPeople","people","getMemoryClouds","clouds","populateCloudInfo","getMemorySearchWords","words","populateSearchWords","getHeroFile","map","memfile","index","ishero","getCloudPeople","toggleEditMode","userIsAuthorisedToEdit","deleteFileFromMemory","makeHeroFile","activeFileisHero","afile","renderMemoryContent","imageZone","renderImageZone","storyZone","renderStoryZone","detailsZone","renderDetailsZone","handleSearchWordClick","itemKey","upState","ind","findIndex","item","id","included","updateMemword","renderKeyWords","keyword","e","applyDrag","wordItem","idx","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","renderTaggedPeople","p","firstname","lastname","push","reverse","renderDetails","fdate","Date","createdon","formattedDate","details","location","editControls","heroImg","onTitleBlur","newTitle","target","value","title","updateTitle","onDescriptionBlur","newDescription","description","updateDescription","onStoryBlur","newStory","story","updateStory","setMemorySearchWords","handleStoryChange","event","addarray","addarray2","extract","language","remove_digits","return_changed_case","remove_duplicates","word","searchWordExists","strength","w","find","undefined","mem","renderCornerControls","editBtn","keywords","cornderCtrls","handleDropfiles","acceptedFiles","reader","FileReader","forEach","file","name","onload","readAsBinaryString","renderCarouselControls","mfiles","thumbs","mfile","thumburl","goBack","goForward","getRootProps","getInputProps","ubound","length","render","show","memoryContent","carouselControls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport greycross from '../images/x-grey.png'\nimport tick from '../images/tick.png'\nimport tag from '../images/tag.png'\nimport globe from '../images/outline-globe.png'\nimport calendar from '../images/calendar.png'\nimport key from '../images/key.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport edit from '../images/edit.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport trash from '../images/trash.png'\nimport hero from '../images/hero-full.png'\nimport heroOutline from '../images/hero-outline-grey.png'\n\n\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport { format } from \"date-fns\";\nimport * as Memriio from '../memriioserver'\nimport WordExctractor from 'keyword-extractor'\nimport { Container, Draggable } from 'react-smooth-dnd'\nimport Dropzone,{useDropzone} from 'react-dropzone'\nimport * as Utils from './utils'\nimport './memorymodal.css'\n\nimport {CheckBox,SubTag,ImageLabel} from '../buttons/buttons'\n\n\n\nclass MemoryModal extends React.Component{\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[],         \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null,\n        author:null,\n        memfileIndex:0,\n        editMode:false,\n    }\n   \n\n  onHide = () =>{\n    this.state.editMode = false\n    this.props.onHideModal(this.props.memory)\n  }\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n        \n        this.populateMemoryFiles(this.props.memfiles)\n        Memriio.getUser              (this.props.memory.userid,(author => {\n                                                              this.setState({author:author})\n                                                              console.log('Author + ' + JSON.stringify(author))\n                                                          }))\n        Memriio.getTaggedPeople      (this.props.memory.memid,((people)=>{this.setState({taggedPeople:people})}))\n        Memriio.getMemoryClouds      (this.props.memory.memid,((clouds)=>{this.populateCloudInfo(clouds)}))\n        Memriio.getMemorySearchWords (this.props.memory.memid,((words =>{this.populateSearchWords(words)})))\n        \n        \n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    this.state.memfileIndex=0\n    let hero = this.state.memfiles[0]\n\n    this.state.memfiles.map((memfile,index)=> {\n\n        if(memfile.ishero){         \n            this.state.memfileIndex = index            \n            hero = memfile\n        }\n    })\n    return hero\n  }\n//---------------------------------------------------------------------------------\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n//---------------------------------------------------------------------------------\n  populateSearchWords = (words) =>{\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n    this.setState({memoryClouds:clouds})\n    Memriio.getCloudPeople (clouds,((people)=>{this.setState({cloudPeople:people})}))   \n  }\n\n//------------------------------------------------------------------------\n\n  toggleEditMode =() =>{\n    this.setState({editMode:!this.state.editMode})\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  userIsAuthorisedToEdit = () =>{\n    return true\n  }\n\n  //------------------------------------------------------------------------\n\n  deleteFileFromMemory =() =>{\n    console.log('delte file from memroy');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  makeHeroFile = () =>{\n    console.log('make hero file');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  activeFileisHero =() =>{\n    var afile = this.state.activefile\n    \n    if(afile){\n      if(afile.ishero){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  render(){\n      \n    if(this.props.show){\n      let memoryContent = this.renderMemoryContent()\n      let carouselControls = this.renderCarouselControls()\n      return(\n        <div className= 'backdropStyle'>\n          <div className='modalStyle'>\n            {memoryContent}              \n            {carouselControls}\n          </div>\n        </div>\n      )\n    }else{\n      return null\n    }        \n}\n\n//------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    \n  const imageZone   = this.renderImageZone()\n  const storyZone   = this.renderStoryZone()\n  const detailsZone = this.renderDetailsZone()\n\n  if(this.state.activefile){\n    return (\n        <div className='modalrow'>\n          \n          {imageZone}\n          {storyZone}\n          {detailsZone}\n\n        </div>\n    )\n  } else {\n    return null\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nhandleSearchWordClick = (itemKey,upState) =>{\n  \n  const ind = this.state.searchWords.findIndex(item =>{return item.id === itemKey})\n  this.state.searchWords[ind].included = upState\n  console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]))\n  Memriio.updateMemword(this.state.searchWords[ind])\n  this.setState({searchWords:this.state.searchWords})\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n \n  if(this.state.editMode)\n  {\n    this.state.searchWords.map(item =>{ console.log(item.included + ':\"' + item.keyword);\n    }) \n    return (\n        <div className='wordList'>\n          <Container  onDrop={e => this.setState({searchWords:this.applyDrag(this.state.searchWords,e)})}>\n          \n            {this.state.searchWords.map((wordItem, idx) => {\n            return (\n              <Draggable className='wordListItem' key={'k'+idx}>\n                <CheckBox \n                  itemKey = {wordItem.id}\n                  onClick = {this.handleSearchWordClick}\n                  upState = {wordItem.included} \n                  downImg = {greycross} \n                  upImg = {tick} \n                  label = {wordItem.keyword}/>\n              </Draggable> \n            )})}\n          </Container>\n        </div>\n    )\n  }else{\n    return (\n      <ul className='wordList' > {\n        this.state.searchWords.map((wordItem, idx) => {\n          if(wordItem.included)\n          { \n            return (\n              <li className='wordListItem' key={'k'+idx}>\n                <ImageLabel img = {key} label = {wordItem.keyword}/>\n              </li> \n            )\n          }\n        })\n      }\n      </ul>\n    )\n  }\n}\n\n//------------------------------------------------------------------------\n\napplyDrag = (arr, dragResult) => {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n  if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n  if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n  return result;\n};\n\n//------------------------------------------------------------------------\n\nrenderTaggedPeople =() =>{\n  const people  = this.state.taggedPeople.map(\n    p => {\n        return (\n          <li \n            className='wordListItem'\n            key={'t' + p.userid}><ImageLabel img = {tag} label = {p.firstname+' '+p.lastname}/>                                                        \n          </li>\n        )\n      })\n      if(this.state.author){\n        people.push(      \n          <li key={'a' + this.state.author.userid}>\n            <ImageLabel \n              img = {author}\n              label = {this.state.author.firstname + ' ' + this.state.author.lastname}/>\n          </li>\n        ) \n      }\n      people.reverse()   \n  return people\n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  var fdate = new Date(this.props.memory.createdon)\n  var formattedDate = format(fdate,'dd.MMM.yyyy')\n  \n  \n\n  const details = \n    <div>\n      <li \n        className='wordListItem'\n        key={'location'}><ImageLabel img = {globe} label = {this.props.memory.location}/>\n      </li>\n      <li \n        className='wordListItem'\n        key={'sss'}><ImageLabel img = {calendar} label = {formattedDate}/>\n      </li>\n    </div>\n  return details\n}\n\n//------------------------------------------------------------------------\n\nrenderImageZone =()=>{\n  let editControls=null\n\n  if(this.state.editMode){\n    var heroImg = this.activeFileisHero() ? hero : heroOutline;\n\n    editControls = \n    <div className = 'imageEditConrols' >\n      <img  \n        className='closeBtn'\n        src = {trash}\n        onClick={this.deleteFileFromMemory} \n        />\n      <img  \n        className='closeBtn'\n        src = {heroImg}\n        onClick = {this.makeHeroFile}\n       />\n    </div>\n  }\n\n  return (\n    <div className='imgcolumn'>\n      <MemoryFileViewer \n        memfile={this.state.activefile}\n        thumbStyleClass={'memoryModalImage'}\n        fileStyleClass={'memoryModalImage'}\n      />\n      {editControls}\n    </div>\n  )\n}\n\nonTitleBlur = (e) => {\n  const newTitle = e.target.value\n  if(newTitle !== this.props.memory.title){\n    this.props.memory.title = newTitle\n    Memriio.updateTitle(this.props.memory.memid,newTitle)\n\n  }  \n}\n//------------------------------------------------------------------------\n\nonDescriptionBlur = (e) => {\n  const newDescription = e.target.value\n  if(newDescription !== this.props.memory.description){\n    this.props.memory.description = newDescription\n    Memriio.updateDescription(this.props.memory.memid,newDescription)\n  }  \n}\n//------------------------------------------------------------------------\n\nonStoryBlur = (e) => {\n  const newStory = e.target.value\n  if(newStory !== this.props.memory.story){\n    console.log('updated story ');    \n    this.props.memory.story = newStory\n    Memriio.updateStory(this.props.memory.memid,newStory)    \n    Memriio.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n  }  \n}\n\n//------------------------------------------------------------------------\n\nhandleStoryChange = (event) =>{\n  let addarray = this.state.searchWords\n  let addarray2 = []\n  let story = event.target.value\n  let words = WordExctractor.extract(story,\n                                      {\n                                          language:\"english\",\n                                          remove_digits: true,\n                                          return_changed_case:true,\n                                          remove_duplicates: true\n                                      });\n    \n  // add any new words that exist in the story\n  words.map(word =>{\n      if(!this.searchWordExists(word)){\n        addarray.push({included:true,keyword:word,strength:0})       \n      }      \n  })\n\n  // remove any search words that now longer exist in the story\n  addarray.map(w =>{    \n    if(words.find(word => w.keyword === word) !== undefined){      \n      addarray2.push({included:w.included,keyword:w.keyword,strength:w.strength})\n    }   \n})\n  this.setState({searchWords:addarray2,story:story})  \n}\n\n//------------------------------------------------------------------------\n\nsearchWordExists = (word) => {\n  return this.state.searchWords.find(wordItem => word === wordItem.keyword)    \n}\n\n//------------------------------------------------------------------------\n\nrenderStoryZone = () =>{\n  const mem = this.props.memory\n  if(this.state.editMode)\n  {\n    return (\n      <div className = 'infoColumn'>\n        <input \n            onBlur = {this.onTitleBlur} className='input-reset titleEdit' \n            type=\"text\"  defaultValue = {mem.title} placeholder='Title' id=\"title\" />\n        <input \n            onBlur = {this.onDescriptionBlur} className='input-reset descriptionEdit' \n            type=\"text\"  defaultValue = {mem.description} placeholder='Description' id=\"description\" />\n        <textarea\n            onBlur   = {this.onStoryBlur} className='input-reset storyEdit' onChange = {this.handleStoryChange} \n            type=\"text\"  defaultValue = {mem.story} placeholder='Description' id=\"description\" /> \n      </div>  \n    )\n  }else{\n    return (\n      <div className = 'infoColumn'>\n        <h4>{mem.title} </h4>\n        <p className=\"f6 lh-copy i measure mt2 mid-gray\">{mem.description}</p>\n        <p className=\"f6 lh-copy measure mt2 black\"> { mem.story } </p>\n      </div>  \n    )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderCornerControls =() =>{\n  let editBtn = null\n  if(this.userIsAuthorisedToEdit()){\n    editBtn=\n      <img  \n      className='closeBtn'                   \n      src = {edit}\n      onClick={this.toggleEditMode} />\n  }\n  return (\n    <div className='footer'>                        \n      <img  \n        className='closeBtn'                   \n        src = {x}\n        onClick={this.onHide} />\n        {editBtn}\n\n    </div>\n\n  )\n}\n\n//------------------------------------------------------------------------\n\nrenderDetailsZone = () => {\n  const keywords     = this.renderKeyWords()\n  const people       = this.renderTaggedPeople()\n  const details      = this.renderDetails()\n  const cornderCtrls = this.renderCornerControls()\n\n  return (\n    <div className = 'detailsColumn'>\n      <h4>Tags </h4>\n      {keywords}\n      <h4>People</h4>\n      <ul className='wordList' > { people   } </ul>\n      <h4>Details</h4>\n      <ul className='wordList' > { details   } </ul>\n      {cornderCtrls}              \n    </div>  \n  )\n}\n\n//------------------------------------------------------------------------\n\nhandleDropfiles = async (acceptedFiles) =>{\n  \n  const reader = new FileReader()\n  acceptedFiles.forEach((file) => {\n    console.log(file.name);\n    reader.onload = () =>{\n      // let fname = this.state.author.userid + '-' + Date.now()\n      // let ftype = Memriio.getFileMime(file.)\n      // Memriio.getObjectSignedurl(fname).then(surl => Memriio.uploadFile(reader.result,surl))\n    }\n    reader.readAsBinaryString(file)\n    }\n  )\n}\n\n//------------------------------------------------------------------------\n\nrenderCarouselControls = () => {\n\n  const mem = this.props.memory\n  const mfiles = this.state.memfiles\n  let thumbs = null\n  if(mfiles){\n    thumbs = mfiles.map((mfile,index) =>{\n      return(<img key={'thumb'+index} className='thumb' src = {mfile.thumburl} onClick={(index) =>{}}/>)})\n  }\n\n  if(!this.state.editMode && mfiles){\n      return (\n        <div className='controlbox'>\n          <img className='closeBtn' src = {left} onClick={this.goBack} /> \n          <div className='thumbArray'>\n              {thumbs}\n          </div> \n          <img className='closeBtn' src = {right} onClick={this.goForward} /> \n        </div>\n      )\n\n  }else if (this.state.editMode && mfiles) {      \n      return (\n        <div className='controlbox'>\n          <img className='closeBtn' src = {left} onClick={this.goBack} /> \n          <Dropzone onDrop={acceptedFiles => this.handleDropfiles(acceptedFiles)}>\n            {\n              ({getRootProps, getInputProps}) => (              \n                <div className='thumbArrayEdit' {...getRootProps()}>\n                  {thumbs}\n                </div>              \n              )\n            }\n          </Dropzone>\n          <img className='closeBtn' src = {right} onClick={this.goForward} /> \n        </div>\n      )\n    }else{\n      return null\n    }  \n}\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === 0){\n      this.state.memfileIndex = ubound \n    }else{\n      this.state.memfileIndex--\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }\n}\n\ngoForward = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }    \n}\n\n  \n\n};  \n\n\nexport default MemoryModal;\n\n\n"]},"metadata":{},"sourceType":"module"}