{"ast":null,"code":"var _jsxFileName = \"/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js\";\nimport React from 'react';\nimport greycross from '../images/x-grey.png';\nimport tick from '../images/tick.png';\nimport tag from '../images/tag.png';\nimport globe from '../images/outline-globe.png';\nimport calendar from '../images/calendar.png';\nimport key from '../images/key.png';\nimport author from '../images/author.png';\nimport x from '../images/x-symbol.png';\nimport edit from '../images/edit.png';\nimport left from '../images/chevron-left.png';\nimport right from '../images/chevron-right.png';\nimport trash from '../images/trash.png';\nimport hero from '../images/hero-full.png';\nimport heroOutline from '../images/hero-outline-grey.png';\nimport cloudIMG from '../images/cloud.png';\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer';\nimport * as mem from '../memriioserver';\nimport * as DropSearch from '../dropsearch/dropsearch';\nimport WordExctractor from 'keyword-extractor';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport './memorymodal.css';\nimport { CheckBox, SubTag, ImageLabel } from '../buttons/buttons';\n\nclass MemoryModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      memory: null,\n      taggedPeople: [],\n      memoryClouds: [],\n      searchWords: [],\n      memfiles: null,\n      cloudPeople: [],\n      userClouds: [],\n      activefile: null,\n      author: null,\n      memfileIndex: 0,\n      editMode: false,\n      showSelectPeople: false,\n      showSelectClouds: false,\n      addPeopleRef: null,\n      addPeopleRect: null,\n      addCloudRef: null,\n      addCloudRect: null\n    };\n\n    this.onHide = () => {\n      this.state.editMode = false;\n      this.props.onHideModal(this.props.memory);\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.memory) {\n        if (!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid) {\n          this.populateMemoryFiles(this.props.memfiles);\n          mem.getUser(this.props.memory.userid, author => {\n            this.setState({\n              author: author\n            });\n          });\n          mem.getTaggedPeople(this.props.memory.memid, people => {\n            this.setState({\n              taggedPeople: people\n            });\n          });\n          mem.getMemoryClouds(this.props.memory.memid, clouds => {\n            this.populateCloudInfo(clouds);\n          });\n          mem.getMemorySearchWords(this.props.memory.memid, words => {\n            this.populateSearchWords(words);\n          });\n          mem.getUserClouds(this.props.memory.userid, clouds => {\n            this.setState({\n              userClouds: clouds\n            });\n          });\n        }\n      }\n    };\n\n    this.getHeroFile = () => {\n      this.state.memfileIndex = 0;\n\n      if (this.state.memfiles) {\n        let hero = this.state.memfiles[0];\n        this.state.memfiles.map((memfile, index) => {\n          if (memfile.ishero) {\n            this.state.memfileIndex = index;\n            hero = memfile;\n          }\n        });\n        return hero;\n      } else {\n        return null;\n      }\n    };\n\n    this.populateMemoryFiles = memfiles => {\n      this.state.memfiles = memfiles;\n      this.setState({\n        activefile: this.getHeroFile()\n      });\n    };\n\n    this.populateSearchWords = words => {\n      this.setState({\n        searchWords: words\n      });\n    };\n\n    this.populateCloudInfo = clouds => {\n      this.setState({\n        memoryClouds: clouds\n      });\n      mem.getCloudPeople(clouds, people => {\n        this.setState({\n          cloudPeople: people\n        });\n      });\n    };\n\n    this.toggleEditMode = () => {\n      this.setState({\n        editMode: !this.state.editMode\n      });\n    };\n\n    this.userIsAuthorisedToEdit = () => {\n      return true;\n    };\n\n    this.deleteFileFromMemory = () => {\n      console.log('delte file from memroy');\n    };\n\n    this.makeHeroFile = () => {\n      console.log('make hero file');\n    };\n\n    this.handleAddTaggedPerson = Person => {\n      let tp = this.state.taggedPeople;\n\n      if (!tp.find(dude => dude.userid === Person.userid)) {\n        tp.push(Person);\n        tp.reverse();\n        this.setState({\n          taggedPeople: tp\n        });\n        mem.addTaggedPerson(this.props.memory.memid, Person.userid);\n      }\n    };\n\n    this.handleRemoveFromCloud = Cloud => {\n      let cl = [];\n      this.state.memoryClouds.map(cloud => {\n        if (cloud.id !== Cloud.id) cl.push(cloud);\n      });\n      mem.deleteTaggedCloud(this.props.memory.memid, Cloud.id).then(result => {\n        this.populateCloudInfo(cl);\n      });\n    };\n\n    this.handleDeleteTaggedPerson = Person => {\n      let tp = [];\n      this.state.taggedPeople.map(p => {\n        if (p.userid !== Person.userid) tp.push(p);\n      });\n      this.setState({\n        taggedPeople: tp\n      });\n      mem.deleteTaggedPerson(this.props.memory.memid, Person.userid);\n    };\n\n    this.handleAddCloud = clouds => {\n      let cloud = clouds[0];\n      let cl = this.state.memoryClouds;\n      console.log('memorymodal.handleaAddCloud newCloud : ' + mem.stry(cloud));\n      let newCloudID = parseInt(cloud.value);\n      this.toggleAddCloud();\n\n      if (!cl.find(newcl => newcl.id === newCloudID)) {\n        cl.push({\n          id: newCloudID,\n          name: cloud.label\n        });\n        cl.reverse();\n        this.setState({\n          memoryClouds: cl\n        });\n        mem.addTaggedCloud(this.props.memory.memid, newCloudID).then(result => {\n          this.populateCloudInfo(cl);\n        });\n      }\n    };\n\n    this.toggleAddPeople = (evnt, item) => {\n      this.setState({\n        showSelectPeople: !this.state.showSelectPeople,\n        addPeopleRect: this.addPeopleRef.current.getBoundingClientRect()\n      });\n    };\n\n    this.toggleAddCloud = (evnt, item) => {\n      console.log('add cloud toggle ' + JSON.stringify(evnt.target) + ' : ' + item);\n\n      if (evnt) {\n        evnt.stopPropagation();\n      }\n\n      this.setState(prevState => ({\n        showSelectClouds: !prevState.showSelectClouds,\n        addCloudRect: this.addCloudRef.current.getBoundingClientRect()\n      }), () => {\n        if (this.state.showSelectClouds) {\n          // document.addEventListener('click', this.globalClickListener)\n          window.addEventListener('click', this.globalClickListener);\n        }\n      });\n    };\n\n    this.activeFileisHero = () => {\n      var afile = this.state.activefile;\n\n      if (afile) {\n        if (afile.ishero) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n\n    this.renderMemoryContent = () => {\n      const imageZone = this.renderImageZone();\n      const storyZone = this.renderStoryZone();\n      const detailsZone = this.renderDetailsZone();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 9\n        }\n      }, imageZone, storyZone, detailsZone);\n    };\n\n    this.handleSearchWordClick = (itemKey, upState) => {\n      const ind = this.state.searchWords.findIndex(item => {\n        return item.id === itemKey;\n      });\n      this.state.searchWords[ind].included = upState;\n      console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]));\n      mem.updateMemword(this.state.searchWords[ind]);\n      this.setState({\n        searchWords: this.state.searchWords\n      });\n    };\n\n    this.renderKeyWords = () => {\n      if (this.state.editMode) {\n        return /*#__PURE__*/React.createElement(Container, {\n          onDrop: e => this.setState({\n            searchWords: this.applyDrag(this.state.searchWords, e)\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 7\n          }\n        }, this.state.searchWords.map((wordItem, idx) => {\n          return /*#__PURE__*/React.createElement(Draggable, {\n            className: \"wordListItem\",\n            key: 'k' + idx,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(CheckBox, {\n            itemKey: wordItem.id,\n            onClick: this.handleSearchWordClick,\n            upState: wordItem.included,\n            downImg: greycross,\n            upImg: tick,\n            label: wordItem.keyword,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }\n          }));\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 9\n          }\n        }, this.state.searchWords.map((wordItem, idx) => {\n          if (wordItem.included) {\n            return /*#__PURE__*/React.createElement(\"li\", {\n              className: \"wordListItem\",\n              key: 'k' + idx,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 17\n              }\n            }, /*#__PURE__*/React.createElement(ImageLabel, {\n              leftImg: key,\n              label: wordItem.keyword,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }\n            }));\n          }\n        }));\n      }\n    };\n\n    this.applyDrag = (arr, dragResult) => {\n      const {\n        removedIndex,\n        addedIndex,\n        payload\n      } = dragResult;\n      if (removedIndex === null && addedIndex === null) return arr;\n      const result = [...arr];\n      let itemToAdd = payload;\n      if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n      if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n      return result;\n    };\n\n    this.renderTaggedPeople = () => {\n      let plus = null;\n\n      if (this.state.editMode) {\n        const people = this.state.taggedPeople.map(p => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'p' + p.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            data: p,\n            leftImg: tag,\n            badge: x,\n            onBadgeClick: this.handleDeleteTaggedPerson,\n            label: p.firstname + ' ' + p.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }\n          }));\n        });\n\n        if (this.state.author) {\n          people.push( /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'a' + this.state.author.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: author,\n            label: this.state.author.firstname + ' ' + this.state.author.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }\n          })));\n        }\n\n        people.reverse();\n        people.push( /*#__PURE__*/React.createElement(\"li\", {\n          ref: this.addPeopleRef,\n          className: \"wordListItem\",\n          key: 'addPerson',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          onClick: this.toggleAddPeople,\n          label: '+ add',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }\n        })));\n        return people;\n      } else {\n        const people = this.state.taggedPeople.map(p => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 't' + p.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: tag,\n            label: p.firstname + ' ' + p.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 36\n            }\n          }));\n        });\n\n        if (this.state.author) {\n          people.push( /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'a' + this.state.author.userid,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: author,\n            label: this.state.author.firstname + ' ' + this.state.author.lastname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 15\n            }\n          })));\n        }\n\n        people.reverse();\n        return people;\n      }\n    };\n\n    this.renderDetails = () => {\n      if (this.props.memory) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'location',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: globe,\n          label: this.props.memory.location,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 28\n          }\n        })), /*#__PURE__*/React.createElement(\"li\", {\n          className: \"wordListItem\",\n          key: 'sss',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          leftImg: calendar,\n          label: mem.getShortDate(this.props.memory.createdon),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 23\n          }\n        })));\n      }\n    };\n\n    this.renderClouds = () => {\n      if (this.state.editMode) {\n        const clouds = this.state.memoryClouds.map(cloud => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'cloud' + cloud.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            data: cloud,\n            badge: x,\n            onBadgeClick: this.handleRemoveFromCloud,\n            leftImg: cloudIMG,\n            label: cloud.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 40\n            }\n          }));\n        });\n        clouds.push( /*#__PURE__*/React.createElement(\"li\", {\n          ref: this.addCloudRef,\n          className: \"wordListItem\",\n          key: 'addCloud',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(ImageLabel, {\n          onClick: this.toggleAddCloud,\n          label: '+ add',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }\n        })));\n        return clouds;\n      } else {\n        const clouds = this.state.memoryClouds.map(cloud => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: \"wordListItem\",\n            key: 'cloud' + cloud.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ImageLabel, {\n            leftImg: cloudIMG,\n            label: cloud.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 40\n            }\n          }));\n        });\n        return clouds;\n      }\n    };\n\n    this.renderImageZone = () => {\n      let editControls = null;\n      let imagezone = null;\n\n      if (this.state.editMode) {\n        var heroImg = this.activeFileisHero() ? hero : heroOutline;\n        editControls = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imageEditConrols\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: trash,\n          onClick: this.deleteFileFromMemory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: heroImg,\n          onClick: this.makeHeroFile,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 7\n          }\n        }));\n        return /*#__PURE__*/React.createElement(Dropzone, {\n          onDrop: acceptedFiles => this.handleDropfiles(acceptedFiles),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 7\n          }\n        }, ({\n          getRootProps,\n          getInputProps\n        }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          className: \"imgcolumn\"\n        }, getRootProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(MemoryFileViewer, {\n          memfile: this.state.activefile,\n          thumbStyleClass: 'memoryModalImage',\n          fileStyleClass: 'memoryModalImage',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }\n        }), editControls));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"imgcolumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(MemoryFileViewer, {\n          memfile: this.state.activefile,\n          thumbStyleClass: 'memoryModalImage',\n          fileStyleClass: 'memoryModalImage',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 9\n          }\n        }));\n      }\n    };\n\n    this.onTitleBlur = e => {\n      const newTitle = e.target.value;\n      this.props.memory.title = newTitle;\n      mem.updateTitle(this.props.memory.memid, newTitle);\n      mem.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n    };\n\n    this.onDescriptionBlur = e => {\n      const newDescription = e.target.value;\n      this.props.memory.description = newDescription;\n      mem.updateDescription(this.props.memory.memid, newDescription);\n      mem.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n    };\n\n    this.onStoryBlur = e => {\n      const newStory = e.target.value;\n      this.props.memory.story = newStory;\n      mem.updateStory(this.props.memory.memid, newStory);\n      mem.setMemorySearchWords(this.props.memory.memid, this.state.searchWords);\n    };\n\n    this.handleDescriptionChange = event => {\n      let fulltext = this.props.memory.title + ' ' + this.props.memory.story + ' ' + event.target.value;\n      this.addToSearchWords(fulltext);\n      this.props.memory.description = event.target.value;\n    };\n\n    this.handleTitleChange = event => {\n      let fulltext = this.props.memory.description + ' ' + this.props.memory.story + ' ' + event.target.value;\n      this.addToSearchWords(fulltext);\n      this.props.memory.title = event.target.value;\n    };\n\n    this.handleStoryChange = event => {\n      let fulltext = this.props.memory.description + ' ' + this.props.memory.title + ' ' + event.target.value;\n      this.addToSearchWords(fulltext);\n      this.props.memory.story = event.target.value;\n    };\n\n    this.addToSearchWords = textContent => {\n      let addarray = this.state.searchWords;\n      let addarray2 = [];\n      let words = WordExctractor.extract(textContent, {\n        language: \"english\",\n        remove_digits: true,\n        return_changed_case: true,\n        remove_duplicates: true\n      }); // add any new words that exist in the story\n\n      words.map(word => {\n        if (!this.searchWordExists(word)) {\n          addarray.push({\n            included: true,\n            keyword: word,\n            strength: 0\n          });\n        }\n      }); // remove any search words that now longer exist in the story\n\n      addarray.map(w => {\n        if (words.find(word => w.keyword === word) !== undefined) {\n          addarray2.push({\n            included: w.included,\n            keyword: w.keyword,\n            strength: w.strength\n          });\n        }\n      });\n      this.setState({\n        searchWords: addarray2\n      });\n    };\n\n    this.searchWordExists = word => {\n      return this.state.searchWords.find(wordItem => word === wordItem.keyword);\n    };\n\n    this.renderStoryZone = () => {\n      const mem = this.props.memory;\n\n      if (this.state.editMode) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onTitleBlur,\n          className: \"input-reset titleEdit\",\n          onChange: this.handleTitleChange,\n          type: \"text\",\n          defaultValue: mem.title,\n          placeholder: \"Title\",\n          id: \"title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          onBlur: this.onDescriptionBlur,\n          className: \"input-reset descriptionEdit\",\n          onChange: this.handleDescriptionChange,\n          type: \"text\",\n          defaultValue: mem.description,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 9\n          }\n        }), /*#__PURE__*/React.createElement(\"textarea\", {\n          onBlur: this.onStoryBlur,\n          className: \"input-reset storyEdit\",\n          onChange: this.handleStoryChange,\n          type: \"text\",\n          defaultValue: mem.story,\n          placeholder: \"Description\",\n          id: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"infoColumn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 9\n          }\n        }, mem.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy i measure mt2 mid-gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 9\n          }\n        }, mem.description), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"f6 lh-copy measure mt2 black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 9\n          }\n        }, \" \", mem.story, \" \"));\n      }\n    };\n\n    this.renderCornerControls = () => {\n      let editBtn = null;\n      let deleteBtn = null;\n\n      if (this.userIsAuthorisedToEdit()) {\n        editBtn = /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: edit,\n          onClick: this.toggleEditMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 7\n          }\n        });\n        deleteBtn = /*#__PURE__*/React.createElement(\"img\", {\n          className: \"closeBtn\",\n          src: trash,\n          onClick: this.handleDeleteMemory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 5\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 5\n        }\n      }, deleteBtn, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: x,\n        onClick: this.onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 7\n        }\n      }), editBtn);\n    };\n\n    this.renderPeopleDropdown = () => {\n      return null;\n    };\n\n    this.renderCloudDropdown = () => {\n      if (this.state.showSelectClouds) {\n        console.log('rendercloud dropdown ' + mem.stry(this.state.addCloudRect));\n        return (// cRect,clouds, selected,showmulti,keepInList,callBack,userid,hideCallback\n          DropSearch.cloudDropSearch(this.state.addCloudRect, this.state.userClouds, null, true, true, this.handleAddCloud, this.state.userid, this.toggleAddCloud)\n        );\n      } else {\n        return null;\n      }\n    };\n\n    this.renderDetailsZone = () => {\n      const keywords = this.renderKeyWords();\n      const people = this.renderTaggedPeople();\n      const details = this.renderDetails();\n      const clouds = this.renderClouds();\n      const cornerCtrls = this.renderCornerControls();\n      const cloudDropdown = this.renderCloudDropdown();\n      const peopleDropdown = this.renderPeopleDropdown();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detailsColumn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 9\n        }\n      }, \"Tags \"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"keyWordList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 9\n        }\n      }, \"  \", keywords, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z25\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 9\n        }\n      }, \"People\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"peopleList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 9\n        }\n      }, \"   \", people, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 9\n        }\n      }, \"Clouds\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"cloudList scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 9\n        }\n      }, \"    \", clouds, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"z15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 9\n        }\n      }, \"Details\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"detailsList \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 9\n        }\n      }, \"        \", details, \" \")), cloudDropdown, cornerCtrls);\n    };\n\n    this.handleDropfiles = async acceptedFiles => {\n      const reader = new FileReader();\n      acceptedFiles.forEach(file => {\n        reader.onload = () => {\n          console.log('onload ' + file.name);\n\n          if (mem.canHandleDroppedFile(file.name)) {\n            this.prepAndUploadFile(file);\n          } else {\n            alert('File type ' + mem.getExtension(file.name) + ' not yet implemented');\n          }\n        };\n\n        reader.readAsArrayBuffer(file);\n      });\n    };\n\n    this.handleDeleteMemory = () => {\n      this.props.onDeleteMemory(this.props.memory);\n    };\n\n    this.prepAndUploadFile = file => {\n      let commonfileName = this.state.author.userid + '-' + this.props.memory.memid + '-' + Date.now();\n      let ext = mem.getExtension(file.name);\n      let fname = commonfileName + '-original' + '.' + ext;\n      let tname = commonfileName + '-thumb' + '.' + ext;\n      let filebuffer = null;\n      let newMemfiles = this.state.memfiles;\n      let memfile = {\n        id: 0,\n        memid: this.props.memory.memid,\n        fileurl: '',\n        ishero: false,\n        fileext: ext,\n        thumburl: '',\n        thumbext: ext\n      };\n      mem.compressImage(file, 0.9).then(result => {\n        if (result.success) {\n          filebuffer = result.data;\n          mem.resizeImage(filebuffer, 1500).then(result => {\n            if (result.success) {\n              mem.uploadFile(tname, result.data).then(result => {\n                if (result.success) {\n                  memfile.thumburl = result.awsurl;\n                  newMemfiles.push(memfile);\n                  this.setState({\n                    memfiles: newMemfiles\n                  });\n                  mem.uploadFile(fname, filebuffer).then(result => {\n                    if (result.success) {\n                      let last = this.state.memfiles.length - 1;\n                      this.state.memfiles[last].fileurl = result.awsurl;\n                      mem.addFileToMemory({\n                        originalURL: this.state.memfiles[last].fileurl,\n                        thumbURL: this.state.memfiles[last].thumburl\n                      }, false, this.props.memory.memid).then(result => {\n                        if (result.success) {\n                          console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.renderCarouselControls = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"controlbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: left,\n        onClick: this.goBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"closeBtn\",\n        src: right,\n        onClick: this.goForward,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.goBack = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === 0) {\n          this.state.memfileIndex = ubound;\n        } else {\n          this.state.memfileIndex--;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.goForward = e => {\n      if (this.state.memfiles) {\n        let ubound = this.state.memfiles.length - 1;\n\n        if (this.state.memfileIndex === ubound) {\n          this.state.memfileIndex = 0;\n        } else {\n          this.state.memfileIndex++;\n        }\n\n        this.setState({\n          activefile: this.state.memfiles[this.state.memfileIndex]\n        });\n      }\n    };\n\n    this.addPeopleRef = React.createRef();\n    this.addCloudRef = React.createRef();\n  }\n\n  //------------------------------------------------------------------------\n  render() {\n    if (this.props.show) {\n      let memoryContent = this.renderMemoryContent();\n      let carouselControls = this.renderCarouselControls();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"backdropStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modalStyle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }\n      }, memoryContent, carouselControls));\n    } else {\n      return null;\n    }\n  } //------------------------------------------------------------------------\n\n\n}\n\n;\nexport default MemoryModal;","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memorymodal/memorymodal.js"],"names":["React","greycross","tick","tag","globe","calendar","key","author","x","edit","left","right","trash","hero","heroOutline","cloudIMG","MemoryFileViewer","mem","DropSearch","WordExctractor","Container","Draggable","Dropzone","useDropzone","CheckBox","SubTag","ImageLabel","MemoryModal","Component","constructor","props","state","memory","taggedPeople","memoryClouds","searchWords","memfiles","cloudPeople","userClouds","activefile","memfileIndex","editMode","showSelectPeople","showSelectClouds","addPeopleRef","addPeopleRect","addCloudRef","addCloudRect","onHide","onHideModal","componentDidUpdate","prevProps","prevState","memid","populateMemoryFiles","getUser","userid","setState","getTaggedPeople","people","getMemoryClouds","clouds","populateCloudInfo","getMemorySearchWords","words","populateSearchWords","getUserClouds","getHeroFile","map","memfile","index","ishero","getCloudPeople","toggleEditMode","userIsAuthorisedToEdit","deleteFileFromMemory","console","log","makeHeroFile","handleAddTaggedPerson","Person","tp","find","dude","push","reverse","addTaggedPerson","handleRemoveFromCloud","Cloud","cl","cloud","id","deleteTaggedCloud","then","result","handleDeleteTaggedPerson","p","deleteTaggedPerson","handleAddCloud","stry","newCloudID","parseInt","value","toggleAddCloud","newcl","name","label","addTaggedCloud","toggleAddPeople","evnt","item","current","getBoundingClientRect","JSON","stringify","target","stopPropagation","window","addEventListener","globalClickListener","activeFileisHero","afile","renderMemoryContent","imageZone","renderImageZone","storyZone","renderStoryZone","detailsZone","renderDetailsZone","handleSearchWordClick","itemKey","upState","ind","findIndex","included","updateMemword","renderKeyWords","e","applyDrag","wordItem","idx","keyword","arr","dragResult","removedIndex","addedIndex","payload","itemToAdd","splice","renderTaggedPeople","plus","firstname","lastname","renderDetails","location","getShortDate","createdon","renderClouds","editControls","imagezone","heroImg","acceptedFiles","handleDropfiles","getRootProps","getInputProps","onTitleBlur","newTitle","title","updateTitle","setMemorySearchWords","onDescriptionBlur","newDescription","description","updateDescription","onStoryBlur","newStory","story","updateStory","handleDescriptionChange","event","fulltext","addToSearchWords","handleTitleChange","handleStoryChange","textContent","addarray","addarray2","extract","language","remove_digits","return_changed_case","remove_duplicates","word","searchWordExists","strength","w","undefined","renderCornerControls","editBtn","deleteBtn","handleDeleteMemory","renderPeopleDropdown","renderCloudDropdown","cloudDropSearch","keywords","details","cornerCtrls","cloudDropdown","peopleDropdown","reader","FileReader","forEach","file","onload","canHandleDroppedFile","prepAndUploadFile","alert","getExtension","readAsArrayBuffer","onDeleteMemory","commonfileName","Date","now","ext","fname","tname","filebuffer","newMemfiles","fileurl","fileext","thumburl","thumbext","compressImage","success","data","resizeImage","uploadFile","awsurl","last","length","addFileToMemory","originalURL","thumbURL","renderCarouselControls","goBack","goForward","ubound","createRef","render","show","memoryContent","carouselControls"],"mappings":"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","sourcesContent":["import React from 'react';\nimport greycross from '../images/x-grey.png'\nimport tick from '../images/tick.png'\nimport tag from '../images/tag.png'\nimport globe from '../images/outline-globe.png'\nimport calendar from '../images/calendar.png'\nimport key from '../images/key.png'\nimport author from '../images/author.png'\nimport x from '../images/x-symbol.png'\nimport edit from '../images/edit.png'\nimport left from '../images/chevron-left.png'\nimport right from '../images/chevron-right.png'\nimport trash from '../images/trash.png'\nimport hero from '../images/hero-full.png'\nimport heroOutline from '../images/hero-outline-grey.png'\nimport cloudIMG from '../images/cloud.png'\nimport MemoryFileViewer from '../memoryviewer/memoryImageViewer'\nimport * as mem from '../memriioserver'\nimport * as DropSearch from '../dropsearch/dropsearch'\n\nimport WordExctractor from 'keyword-extractor'\nimport { Container, Draggable} from 'react-smooth-dnd'\nimport Dropzone,{useDropzone} from 'react-dropzone'\n\nimport './memorymodal.css'\n\nimport {CheckBox,SubTag,ImageLabel} from '../buttons/buttons'\n\nclass MemoryModal extends React.Component{\n  constructor(props) {\n    super(props);\n    this.addPeopleRef = React.createRef();\n    this.addCloudRef = React.createRef();\n  }\n\n    \n    state ={\n        memory:null,\n        taggedPeople:[],\n        memoryClouds:[],\n        searchWords:[],         \n        memfiles:null,\n        cloudPeople:[],\n        userClouds:[],\n        activefile:null,\n        author:null,\n        memfileIndex:0,\n        editMode:false,\n\n        showSelectPeople:false,\n        showSelectClouds:false,\n\n        addPeopleRef:null,\n        addPeopleRect:null,\n\n        addCloudRef:null,\n        addCloudRect:null,\n        \n    }\n   \n\n  onHide = () =>{\n    this.state.editMode = false\n    this.props.onHideModal(this.props.memory)\n  }\n\n//---------------------------------------------------------------------------------\n\n  componentDidUpdate = (prevProps,prevState) =>{\n    \n    if(this.props.memory)\n    {\n      if(!prevProps.memory || this.props.memory.memid !== prevProps.memory.memid){\n\n        \n\n        this.populateMemoryFiles ( this.props.memfiles )\n        mem.getUser              ( this.props.memory.userid,(author => { this.setState({author:author})}))\n        mem.getTaggedPeople      ( this.props.memory.memid,(people => { this.setState({taggedPeople:people})}))\n        mem.getMemoryClouds      ( this.props.memory.memid,(clouds => { this.populateCloudInfo(clouds)}))\n        mem.getMemorySearchWords ( this.props.memory.memid,(words  => { this.populateSearchWords(words)}))\n        mem.getUserClouds        ( this.props.memory.userid,(clouds => { this.setState({userClouds:clouds})}))\n        \n      }      \n    }\n  }\n\n//---------------------------------------------------------------------------------\n\n  getHeroFile = () => {\n    this.state.memfileIndex=0\n    if(this.state.memfiles){\n      let hero = this.state.memfiles[0]\n      this.state.memfiles.map((memfile,index)=> {\n  \n          if(memfile.ishero){         \n              this.state.memfileIndex = index            \n              hero = memfile\n          }\n      })\n      return hero\n    }else{\n      return null\n    }\n   \n  }\n//---------------------------------------------------------------------------------\n\n  populateMemoryFiles = (memfiles) => {\n\n    this.state.memfiles = memfiles\n    this.setState({\n        activefile:this.getHeroFile()\n    })\n  }\n\n//---------------------------------------------------------------------------------\n\n  populateSearchWords = (words) =>{\n    this.setState({searchWords:words})\n  }\n\n//------------------------------------------------------------------------\n\n  populateCloudInfo = (clouds) =>{\n    this.setState({memoryClouds:clouds})\n    mem.getCloudPeople (clouds,((people)=>{\n      this.setState({cloudPeople:people})\n    }))   \n  }\n\n//------------------------------------------------------------------------\n\n  toggleEditMode =() =>{\n    this.setState({editMode:!this.state.editMode})\n    \n  }\n\n  //------------------------------------------------------------------------\n\n  userIsAuthorisedToEdit = () =>{\n    return true\n  }\n\n  //------------------------------------------------------------------------\n\n  deleteFileFromMemory =() =>{\n    console.log('delte file from memroy');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n\n  makeHeroFile = () =>{\n    console.log('make hero file');\n    \n  }\n  \n  //------------------------------------------------------------------------\n\n  handleAddTaggedPerson = (Person) =>{\n    \n    let tp = this.state.taggedPeople\n    if(!tp.find(dude => dude.userid === Person.userid)){\n      tp.push(Person)\n      tp.reverse()\n      this.setState({taggedPeople:tp})\n      mem.addTaggedPerson(this.props.memory.memid,Person.userid)\n    }\n  }\n\n  //------------------------------------------------------------------------\n\n  handleRemoveFromCloud = ( Cloud ) =>{\n    let cl = []\n    this.state.memoryClouds.map(cloud =>{if(cloud.id !== Cloud.id) cl.push(cloud)})\n    mem.deleteTaggedCloud(this.props.memory.memid,Cloud.id)\n    .then(result =>{\n      this.populateCloudInfo(cl)\n    })\n\n  }\n\n  //------------------------------------------------------------------------\n\n  handleDeleteTaggedPerson = (Person) =>{\n    let tp = []\n    this.state.taggedPeople.map( p =>{if(p.userid !== Person.userid)tp.push(p)})\n    this.setState({taggedPeople:tp})\n    mem.deleteTaggedPerson(this.props.memory.memid,Person.userid)\n  }\n\n  //------------------------------------------------------------------------\n\n  handleAddCloud = (clouds) =>{\n    let cloud = clouds[0]\n    let cl = this.state.memoryClouds\n    console.log('memorymodal.handleaAddCloud newCloud : ' + mem.stry(cloud))\n    let newCloudID = parseInt(cloud.value)\n    this.toggleAddCloud()\n    if(!cl.find(newcl => newcl.id === newCloudID)){\n\n      cl.push({\n        id:newCloudID,\n        name:cloud.label\n      })\n      cl.reverse()\n      this.setState({memoryClouds:cl})\n      mem.addTaggedCloud(this.props.memory.memid,newCloudID)\n      .then(result => {\n        this.populateCloudInfo(cl)\n        \n      })\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  toggleAddPeople = (evnt,item) =>{ \n    this.setState({showSelectPeople:!this.state.showSelectPeople,addPeopleRect:this.addPeopleRef.current.getBoundingClientRect()}) \n  }\n\n  //------------------------------------------------------------------------\n  \n  toggleAddCloud = (evnt,item) =>{ \n    console.log('add cloud toggle ' + JSON.stringify(evnt.target) + ' : ' + item)\n    if ( evnt ) { evnt.stopPropagation() }\n\n    this.setState(prevState => ({showSelectClouds:!prevState.showSelectClouds,addCloudRect:this.addCloudRef.current.getBoundingClientRect()}),\n    () => {\n      if (this.state.showSelectClouds) {\n        // document.addEventListener('click', this.globalClickListener)\n        window.addEventListener('click', this.globalClickListener)\n      }})\n  }\n  \n  //------------------------------------------------------------------------\n  activeFileisHero =() =>{\n    var afile = this.state.activefile\n    \n    if(afile){\n      if(afile.ishero){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }\n  \n  //------------------------------------------------------------------------\n\n  render(){\n    \n   \n    if(this.props.show){\n      \n        let memoryContent = this.renderMemoryContent()\n        let carouselControls = this.renderCarouselControls()\n        return(\n          <div className= 'backdropStyle'>\n            <div className='modalStyle'>\n              {memoryContent}   \n              {carouselControls}\n            </div>\n          </div>\n        )\n    \n  }else{\n    return null\n  }    \n}\n\n//------------------------------------------------------------------------\n\nrenderMemoryContent = () => {\n    \n  const imageZone   = this.renderImageZone()\n  const storyZone   = this.renderStoryZone()\n  const detailsZone = this.renderDetailsZone()\n    return (\n        <div className='modalrow'>\n          {imageZone}\n          {storyZone}\n          {detailsZone}\n        </div>\n    )\n}\n  \n//------------------------------------------------------------------------\n\nhandleSearchWordClick = (itemKey,upState) =>{\n  \n  const ind = this.state.searchWords.findIndex(item =>{return item.id === itemKey})\n  this.state.searchWords[ind].included = upState\n  console.log('heandlesearchwordClick ' + JSON.stringify(this.state.searchWords[ind]))\n  mem.updateMemword(this.state.searchWords[ind])\n  this.setState({searchWords:this.state.searchWords})\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderKeyWords =() =>{\n \n  if(this.state.editMode)\n  {\n    return (\n      <Container  onDrop={e => this.setState({searchWords:this.applyDrag(this.state.searchWords,e)})}>\n      \n        {\n          this.state.searchWords.map((wordItem, idx) => {\n            return (\n              <Draggable className='wordListItem' key={'k'+idx}>\n                <CheckBox \n                  itemKey = {wordItem.id}\n                  onClick = {this.handleSearchWordClick}\n                  upState = {wordItem.included} \n                  downImg = {greycross} \n                  upImg   = {tick} \n                  label   = {wordItem.keyword}\n                />\n              </Draggable> \n            )\n          })\n        }\n      </Container>\n)\n  }else{\n    return (\n      \n        <div>\n        {\n          this.state.searchWords.map((wordItem, idx) => {\n            if(wordItem.included)\n            { \n              return (\n                <li className='wordListItem' key={'k'+idx}>\n                  <ImageLabel leftImg = {key} label = {wordItem.keyword}/>\n                </li> \n              )\n            }\n          })\n        }\n        </div>\n    )\n  }\n}\n\n//------------------------------------------------------------------------\n\napplyDrag = (arr, dragResult) => {\n  const { removedIndex, addedIndex, payload } = dragResult;\n  if (removedIndex === null && addedIndex === null) return arr;\n  const result = [...arr];\n  let itemToAdd = payload;\n  if (removedIndex !== null) itemToAdd = result.splice(removedIndex, 1)[0];\n  if (addedIndex !== null) result.splice(addedIndex, 0, itemToAdd);\n  return result;\n};\n\n//------------------------------------------------------------------------\n\n\nrenderTaggedPeople =() =>{\nlet plus = null\n  if(this.state.editMode){\n    const people  = this.state.taggedPeople.map(\n      p => {\n          return (\n            <li \n              className='wordListItem'\n              key={'p' + p.userid}>\n                <ImageLabel \n                  data          = { p   }\n                  leftImg       = { tag } \n                  badge         = { x   } \n                  onBadgeClick  = { this.handleDeleteTaggedPerson  }\n                  label         = { p.firstname + ' ' + p.lastname }/>                                                        \n            </li>\n          )\n        })\n        if(this.state.author){\n          people.push(      \n            <li \n              className='wordListItem'\n              key={'a' + this.state.author.userid}>\n              <ImageLabel \n                leftImg = { author}\n                label =   { this.state.author.firstname + ' ' + this.state.author.lastname}/>\n            </li>\n          ) \n        }\n        people.reverse()   \n        people.push(      \n          <li \n            ref = { this.addPeopleRef } \n            className='wordListItem'\n            key={'addPerson'}>\n            <ImageLabel \n              \n              onClick = { this.toggleAddPeople }\n              label   = { '+ add' }\n            />\n          </li>\n        ) \n        \n        \n        return people\n  }else{\n    const people  = this.state.taggedPeople.map(\n      p => {\n          return (\n            <li \n              className='wordListItem'\n              key={'t' + p.userid}><ImageLabel leftImg = {tag} label = {p.firstname+' '+p.lastname}/>                                                        \n            </li>\n          )\n        })\n        if(this.state.author){\n          people.push(      \n            <li \n              className='wordListItem'\n              key={'a' + this.state.author.userid}>\n              <ImageLabel \n                leftImg = {author}\n                label = {this.state.author.firstname + ' ' + this.state.author.lastname}/>\n            </li>\n          ) \n        }\n        people.reverse()   \n    return people\n  }\n}\n\n//------------------------------------------------------------------------\n\nrenderDetails =() => {\n  \n  if(this.props.memory){    \n   return (\n      <div>\n        <li \n          className='wordListItem'\n          key={'location'}><ImageLabel leftImg = {globe} label = {this.props.memory.location}/>\n        </li>\n        <li \n          className='wordListItem'\n          key={'sss'}><ImageLabel leftImg = {calendar} label = {mem.getShortDate(this.props.memory.createdon) }/>\n        </li>\n      </div>\n   )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderClouds =() => {\n  \n  if(this.state.editMode ){\n    const clouds  = this.state.memoryClouds.map(\n      cloud => {\n          return (\n            <li \n              className='wordListItem'\n              key={'cloud' + cloud.id}><ImageLabel \n                data          = { cloud }\n                badge         = { x   } \n                onBadgeClick  = { this.handleRemoveFromCloud  }\n                leftImg = {cloudIMG} \n                label = {cloud.name}/>                            \n            </li>\n          )\n        })\n        clouds.push(      \n          <li \n            ref = { this.addCloudRef }\n            className='wordListItem'\n            key={'addCloud'}>\n            <ImageLabel \n              onClick = { this.toggleAddCloud }\n              label =   { '+ add'}/>\n          </li>\n        ) \n        \n        return clouds\n  }else{\n    const clouds  = this.state.memoryClouds.map(\n      cloud => {\n          return (\n            <li \n              className='wordListItem'\n              key={'cloud' + cloud.id}><ImageLabel leftImg = {cloudIMG} label = {cloud.name}/>                                                        \n            </li>\n          )\n        })        \n        return clouds\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderImageZone =()=>{\n  let editControls=null\n  let imagezone = null\n\n  if(this.state.editMode ){\n    var heroImg = this.activeFileisHero() ? hero : heroOutline;\n\n    editControls = \n    <div className = 'imageEditConrols' >\n      <img  \n        className='closeBtn'\n        src = {trash}\n        onClick={this.deleteFileFromMemory} \n        />\n      <img  \n        className='closeBtn'\n        src = {heroImg}\n        onClick = {this.makeHeroFile}\n       />\n    </div>\n\n    return (\n      <Dropzone onDrop={acceptedFiles => this.handleDropfiles(acceptedFiles)}>\n        {\n          ({getRootProps, getInputProps}) => (              \n            <div className='imgcolumn' {...getRootProps()} >\n              <MemoryFileViewer \n                memfile={this.state.activefile}\n                thumbStyleClass={'memoryModalImage'}\n                fileStyleClass={'memoryModalImage'}\n              />\n              {editControls}\n            </div>          \n          )\n        }\n      </Dropzone>\n    )\n  }else{\n    return (\n      <div className='imgcolumn'>\n        <MemoryFileViewer \n          memfile={this.state.activefile}\n          thumbStyleClass={'memoryModalImage'}\n          fileStyleClass={'memoryModalImage'}\n        />       \n      </div>\n    )\n  }\n\n  \n}\n\nonTitleBlur = (e) => {\n  \n  const newTitle = e.target.value\n  this.props.memory.title = newTitle\n  mem.updateTitle(this.props.memory.memid,newTitle)\n  mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)    \n  \n}\n//------------------------------------------------------------------------\n\nonDescriptionBlur = (e) => {\n  \n  const newDescription = e.target.value\n  this.props.memory.description = newDescription\n  mem.updateDescription(this.props.memory.memid,newDescription)\n  mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n    \n}\n//------------------------------------------------------------------------\n\nonStoryBlur = (e) => {\n \n  const newStory = e.target.value\n  this.props.memory.story = newStory\n  mem.updateStory(this.props.memory.memid,newStory)    \n  mem.setMemorySearchWords(this.props.memory.memid,this.state.searchWords)\n\n}\n\n//------------------------------------------------------------------------\n\nhandleDescriptionChange = (event) => {\n  let fulltext = this.props.memory.title + ' ' + this.props.memory.story + ' ' + event.target.value\n  this.addToSearchWords(fulltext)\n  this.props.memory.description = event.target.value\n}\n\nhandleTitleChange       = (event) => {\n\n  let fulltext = this.props.memory.description + ' ' + this.props.memory.story + ' ' + event.target.value\n  this.addToSearchWords(fulltext) \n  this.props.memory.title = event.target.value\n}\n\nhandleStoryChange       = (event) => {\n  let fulltext = this.props.memory.description + ' ' + this.props.memory.title + ' ' + event.target.value\n  this.addToSearchWords(fulltext)\n  this.props.memory.story = event.target.value\n}\n\naddToSearchWords = (textContent) =>{\n  let addarray = this.state.searchWords\n  let addarray2 = []  \n  let words = WordExctractor.extract(textContent,\n                                      {\n                                          language:\"english\",\n                                          remove_digits: true,\n                                          return_changed_case:true,\n                                          remove_duplicates: true\n                                      })\n    \n  // add any new words that exist in the story\n  words.map(word =>{\n      if(!this.searchWordExists(word)){\n        addarray.push({included:true,keyword:word,strength:0})       \n      }      \n  })\n\n  // remove any search words that now longer exist in the story\n  addarray.map(w =>{    \n    if(words.find(word => w.keyword === word) !== undefined){      \n      addarray2.push({included:w.included,keyword:w.keyword,strength:w.strength})\n    }   \n  })\n\n  this.setState({searchWords:addarray2})  \n}\n\n//------------------------------------------------------------------------\n\nsearchWordExists = (word) => {\n  return this.state.searchWords.find(wordItem => word === wordItem.keyword)    \n}\n\n//------------------------------------------------------------------------\n\nrenderStoryZone = () =>{\n  const mem = this.props.memory\n\n  if( this.state.editMode )\n  {\n    return (\n      <div className = 'infoColumn'>\n        <input \n            onBlur = { this.onTitleBlur } className='input-reset titleEdit' onChange = { this.handleTitleChange }\n            type=\"text\"  defaultValue = { mem.title } placeholder='Title' id=\"title\" />\n        <input \n            onBlur = {this.onDescriptionBlur} className='input-reset descriptionEdit'  onChange = { this.handleDescriptionChange }\n            type=\"text\"  defaultValue = { mem.description } placeholder='Description' id=\"description\" />\n        <textarea\n            onBlur   = { this.onStoryBlur } className='input-reset storyEdit' onChange = { this.handleStoryChange } \n            type=\"text\"  defaultValue = { mem.story } placeholder='Description' id=\"description\" /> \n      </div> \n    )\n  }else{\n    return (\n      <div className = 'infoColumn'>\n        <h4>{ mem.title } </h4>\n        <p className=\"f6 lh-copy i measure mt2 mid-gray\">{ mem.description }</p>\n        <p className=\"f6 lh-copy measure mt2 black\"> { mem.story } </p>\n      </div>  \n    )\n  }\n  \n}\n\n//------------------------------------------------------------------------\n\nrenderCornerControls =() =>{\n  let editBtn = null\n  let deleteBtn = null\n  if(this.userIsAuthorisedToEdit()){\n    editBtn=\n      <img  \n      className='closeBtn'                   \n      src = {edit}\n      onClick={this.toggleEditMode} />\n\n    deleteBtn=\n    <img  \n    className='closeBtn'                   \n    src = {trash}\n    onClick={this.handleDeleteMemory} />\n    \n  }\n  return (\n    <div className='footer'>    \n      {deleteBtn}   \n\n      <img  \n        className='closeBtn'                   \n        src = {x}\n        onClick={this.onHide} />\n\n      {editBtn}\n\n    </div>\n\n  )\n}\n//------------------------------------------------------------------------\nrenderPeopleDropdown = () => {return null}\n\nrenderCloudDropdown = () => {\n\n \n  if(this.state.showSelectClouds){\n    console.log('rendercloud dropdown ' + mem.stry(this.state.addCloudRect));\n    return (\n      // cRect,clouds, selected,showmulti,keepInList,callBack,userid,hideCallback\n      DropSearch.cloudDropSearch(\n            this.state.addCloudRect,\n            this.state.userClouds,\n            null,\n            true,\n            true ,\n            this.handleAddCloud,\n            this.state.userid,\n            this.toggleAddCloud\n      )\n  ) \n  }else{\n    return null\n  }\n}\n\n\nrenderDetailsZone = () => {\n\n  const keywords        = this.renderKeyWords()\n  const people          = this.renderTaggedPeople()\n  const details         = this.renderDetails()\n  const clouds          = this.renderClouds()\n  const cornerCtrls     = this.renderCornerControls()\n  const cloudDropdown   = this.renderCloudDropdown()\n  const peopleDropdown  = this.renderPeopleDropdown()\n  \n\n  return (\n    <div className = 'detailsColumn'>\n      <div className = 'z40'> \n        <h4>Tags </h4>\n        <ul className='keyWordList scroll' >  { keywords } </ul>\n      </div>\n      <div className = 'z25'>\n        <h4>People</h4>\n        <ul className='peopleList scroll' >   { people   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Clouds</h4>\n        <ul className='cloudList scroll' >    { clouds   } </ul>\n      </div>\n      <div className = 'z15'>\n        <h4>Details</h4>\n        <ul className='detailsList ' >        { details  } </ul>\n      </div>\n      {cloudDropdown}\n      {cornerCtrls}              \n    </div>  \n  )\n}\n\n//------------------------------------------------------------------------\n\nhandleDropfiles = async (acceptedFiles) =>{\n  \n  const reader = new FileReader()\n  acceptedFiles.forEach((file) => {\n    \n    reader.onload = () => {\n      console.log('onload ' + file.name);\n      if(mem.canHandleDroppedFile(file.name)){\n        this.prepAndUploadFile(file)\n      }else{\n        alert('File type ' + mem.getExtension(file.name) + ' not yet implemented' )\n      }\n    }\n\n  reader.readAsArrayBuffer(file) \n\n  })\n}\n\n//------------------------------------------------------------------------\n\nhandleDeleteMemory = ( ) => {\n \n this.props.onDeleteMemory(this.props.memory)\n\n}\n\n//------------------------------------------------------------------------\n\nprepAndUploadFile = (file)=>{\n \n  let commonfileName = this.state.author.userid + '-' + this.props.memory.memid + '-' + Date.now()\n  let ext = mem.getExtension(file.name)\n  let fname = commonfileName + '-original'  + '.' + ext\n  let tname = commonfileName + '-thumb'     + '.' + ext\n  let filebuffer = null\n  let newMemfiles = this.state.memfiles\n  let memfile = {\n    id:0,\n    memid:this.props.memory.memid,\n    fileurl:'',\n    ishero:false,\n    fileext:ext,\n    thumburl:'',\n    thumbext:ext,\n  }\n  \n  mem.compressImage(file,0.9)\n      .then(result =>{\n        if(result.success){\n          filebuffer = result.data\n          mem.resizeImage(filebuffer,1500)\n          .then(result =>{\n            if(result.success){ \n            mem.uploadFile(tname,result.data)\n            .then(result =>{\n              if(result.success){\n                memfile.thumburl = result.awsurl\n                newMemfiles.push(memfile)\n                this.setState({memfiles:newMemfiles})\n                mem.uploadFile(fname,filebuffer)\n                .then(result =>{\n                  if(result.success){\n                    let last = this.state.memfiles.length-1\n                    this.state.memfiles[last].fileurl=result.awsurl\n                    mem.addFileToMemory({\n                        originalURL:this.state.memfiles[last].fileurl,\n                        thumbURL:this.state.memfiles[last].thumburl\n                    },false,this.props.memory.memid)\n                    .then(result => {\n                      if(result.success){\n                        console.log('file upload success ! : new memory id :' + JSON.stringify(result));\n\n                      }\n                    })\n                  }\n                })\n              }\n            })\n            }\n          })\n        }\n        }) \n}\n\n//------------------------------------------------------------------------\n\nrenderCarouselControls = () => {\n\n  return (\n    <div className='controlbox'>\n      <img className='closeBtn' src = {left} onClick={this.goBack} /> \n      \n      <img className='closeBtn' src = {right} onClick={this.goForward} /> \n    </div>\n  )\n}\n\n//------------------------------------------------------------------------\n\ngoBack = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === 0){\n      this.state.memfileIndex = ubound \n    }else{\n      this.state.memfileIndex--\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }\n}\n\ngoForward = (e) => {\n  if(this.state.memfiles)\n  {\n    let ubound = this.state.memfiles.length-1\n    if(this.state.memfileIndex === ubound){\n      this.state.memfileIndex = 0 \n    }else{\n      this.state.memfileIndex++\n    }\n    this.setState({activefile:this.state.memfiles[this.state.memfileIndex]})\n  }    \n}\n\n};  \n\nexport default MemoryModal;\n"]},"metadata":{},"sourceType":"module"}