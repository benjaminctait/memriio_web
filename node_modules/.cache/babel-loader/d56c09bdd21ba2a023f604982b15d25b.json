{"ast":null,"code":"import React from 'react';\nimport Compressor from 'compressorjs';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { format } from \"date-fns\";\nimport { array } from 'prop-types';\n\nfunction memriiolog(log, data) {\n  if (log) console.log(data);\n} //-------------------------------------------------------------------------------\n\n\nexport function getMemories_User_Words_Clouds(userid, words, cloudids) {\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_keywords_cloudids', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        words: words,\n        userid: userid,\n        cloudids: cloudids\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        resolve(res.data);\n      } else {\n        reject(res.error);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getMemories_User_Clouds(userid, cloudids) {\n  console.log('getMemories_User_Clouds - userid : ' + userid + ' cloudids : ' + cloudids);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_cloudids', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userid: userid,\n        cloudids: cloudids\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        resolve(res.data);\n      } else {\n        reject(res.error);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getMemories_Clouds(cloudids) {\n  console.log('getMemories_Clouds - cloudids : ' + cloudids);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_memories_cloudids', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cloudids: cloudids\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        resolve(res.data);\n      } else {\n        reject(res.error);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getMemories_Words_Clouds(cloudids, words) {\n  console.log('getMemories_Words_Clouds - cloudids : ' + cloudids);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_memories_keywords_clouds', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cloudids: cloudids,\n        words: words\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        resolve(res.data);\n      } else {\n        reject(res.error);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getMemories_PersonalOnly_All(userid, searchwords) {\n  console.log('getMemories_PersonalOnly_All - userid : ' + userid + ' searchwords : ' + searchwords);\n\n  if (isNonEmptyArray(searchwords)) {\n    console.log('getMemories_PersonalOnly_All - with searchwords');\n    return new Promise((resolve, reject) => {\n      fetch('https://memriio-api-0.herokuapp.com/get_memories_keywords_user_noclouds', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userid: userid,\n          words: searchwords\n        })\n      }).then(response => response.json()).then(res => {\n        if (res.success) {\n          resolve(res.data);\n        } else {\n          reject(res.error);\n        }\n      });\n    });\n  } else {\n    console.log('getMemories_PersonalOnly_All - no searchwords');\n    return new Promise((resolve, reject) => {\n      fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_noclouds', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userid: userid\n        })\n      }).then(response => response.json()).then(res => {\n        if (res.success) {\n          console.log('getMemories_PersonalOnly_All returns ' + res.data.length);\n          resolve(res.data);\n        } else {\n          reject(res.error);\n        }\n      });\n    });\n  }\n} //-------------------------------------------------------------------------------\n\nexport function getMemories_PersonalOnly_Unshared(userid, searchwords) {\n  if (searchwords) {\n    return new Promise((resolve, reject) => {\n      fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_keywords_noclouds_unshared', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userid: userid,\n          words: searchwords\n        })\n      }).then(res => {\n        if (res.success) {\n          resolve(res.data);\n        } else {\n          reject(res.error);\n        }\n      });\n    });\n  } else {\n    return new Promise((resolve, reject) => {\n      fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_noclouds_unshared', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userid: userid\n        })\n      }).then(response => response.json()).then(res => {\n        if (res.success) {\n          resolve(res.data);\n        } else {\n          reject(res.error);\n        }\n      });\n    });\n  }\n} //-------------------------------------------------------------------------------\n//--Returns and array of of images and related meta data from the server-----------------------------------------------\n\nexport function getAllMemoryFiles(memoryid, callback) {\n  memriiolog(false, 'Memriio.getAllMemoryFiles : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'server response : ' + res.success);\n      memriiolog(false, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function getAllClouds() {\n  memriiolog(true, 'Memriio.getAllClouds');\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_clouds', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ignore: null\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(true, 'getAllClouds :server response : ' + res.success);\n        resolve(res.data);\n      } else {\n        memriiolog(true, 'getAllClouds :server response : ' + res.success + ' with ' + res.error);\n        reject(null);\n      }\n    });\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople(memoryid, callback) {\n  memriiolog(false, 'Memriio.getTaggedPeople : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'server response : ' + res.success);\n      memriiolog(false, 'server data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords(memoryid, callback) {\n  memriiolog(false, 'Memriio.getMemorySearchWords : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getMemorySearchWords server response : ' + res.success);\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords(memoryid, searchwords) {\n  memriiolog(false, 'Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        searchwords: searchwords\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'setMemorySearchWords server response : ' + res.success);\n        resolve(res);\n      } else {\n        memriiolog(false, 'setMemorySearchWords server response : ' + res.success + ' with ' + res.error);\n        reject(res.error);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds(memoryid, callback) {\n  memriiolog(false, 'Memriio.getMemoryclouds : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getMemoryclouds server response : ' + res.success);\n      memriiolog(false, 'getMemoryclouds response data : ' + JSON.stringify(res.data));\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getMemoryclouds server response : ' + res.success + ' with ' + res.error);\n    }\n  });\n} //----------------------------------------------------------------------------------------------------------------\n\nexport function getAllUsers() {\n  memriiolog(false, 'Memriio.getAllUsers');\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_all_users', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nothing: 'nothing'\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'getAllUsers server response : ' + res.success);\n        resolve(res.data);\n      } else {\n        memriiolog(false, 'getAllUsers server response : ' + res.success + ' with ' + res.error);\n        reject(null);\n      }\n    });\n  });\n} //--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople(clouds, callback) {\n  memriiolog(false, 'Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        clouds: clouds\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'getCloudPeople server response : ' + res.success);\n        memriiolog(false, 'getCloudPeople response data : ' + JSON.stringify(res.data));\n        if (callback) callback(res.data);\n        resolve(res.data);\n      } else {\n        memriiolog(false, 'getCloudPeople server response : ' + res.success + ' with ' + res.error);\n        reject(null);\n      }\n    });\n  });\n} //------------------------------------------------------------\n\nexport function updateHeroImage(memoryid, heroImageid) {\n  memriiolog(false, 'Memriio.getAllImages : memoryid ' + memoryid);\n} //------------------------------------------------------------\n\nexport function updateTitle(memoryid, newTitle) {\n  memriiolog(false, 'Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newTitle: newTitle\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateTitle : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateTitle : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateDescription(memoryid, newDescription) {\n  memriiolog(false, 'Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newDescription: newDescription\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateDescription : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateDescription : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function deleteMemory(memoryid) {\n  memriiolog(true, 'Memriio.deleteMemory : memoryid ' + memoryid);\n  fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(true, 'deleteMemory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(true, 'deleteMemory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateStory(memoryid, newStory) {\n  let len = 0;\n\n  if (newStory) {\n    len = newStory.length;\n  }\n\n  memriiolog(false, 'Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars');\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newStory: newStory\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateStory : server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateStory : server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateTaggedPeople(memoryid, taggedPeople) {} //------------------------------------------------------------\n\nexport function updateClouds(memoryid, clouds) {} //------------------------------------------------------------\n\nexport function updateMemword(searchword) {\n  memriiolog(false, 'Memriio.updateMemword :memword ' + JSON.stringify(searchword));\n  fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: searchword.id,\n      memid: searchword.memid,\n      keyword: searchword.keyword,\n      strength: searchword.strength,\n      included: searchword.included\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateMemword :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateMemword :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateCardType(memoryid, cardtype) {\n  memriiolog(false, 'Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      cardtype: cardtype\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateCardType :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateCardType :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function updateLocation(memoryid, newLocation) {\n  memriiolog(false, 'Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation);\n  fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memoryid: memoryid,\n      newLocation: newLocation\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'updateLocation :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'updateLocation :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedPerson(memoryid, userid) {\n  memriiolog(true, 'Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        userid: userid\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(true, 'addTaggedPerson :server response : ' + res.success);\n        resolve(res);\n      } else {\n        memriiolog(true, 'addTaggedPerson :server response : ' + stry(res.success) + ' with ' + stry(res.error));\n        reject(res.error);\n      }\n    });\n  });\n} //------------------------------------------------------------\n\nexport function addTaggedCloud(memoryid, cloudid) {\n  memriiolog(true, 'Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        groupid: cloudid\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(true, 'addTaggedCloud :server response : ' + res.success);\n        resolve({\n          success: true,\n          data: res.data\n        });\n      } else {\n        memriiolog(true, 'addTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n        reject({\n          success: false,\n          data: null,\n          error: res.error\n        });\n      }\n    });\n  });\n} //------------------------------------------------------------\n\nexport function deleteTaggedPerson(memoryid, userid) {\n  memriiolog(false, 'Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteTaggedPerson :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage(memoryid, fileurl) {\n  memriiolog(false, 'Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'deleteMemoryImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'deleteMemoryImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage(memoryid, fileurl) {\n  memriiolog(false, 'Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl);\n  fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      memid: memoryid,\n      fileurl: fileurl\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'setHeroImage :server response : ' + res.success);\n      return true;\n    } else {\n      memriiolog(false, 'setHeroImage :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud(memoryid, cloudid) {\n  memriiolog(false, 'Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        cloudid: cloudid\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'deleteTaggedCloud :server response : ' + res.success);\n        resolve(res.success);\n      } else {\n        memriiolog(false, 'deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error);\n        reject(res.error);\n      }\n    });\n  });\n} //------------------------------------------------------------\n\nexport function getUser(userid, callback) {\n  memriiolog(false, 'Memriio.getUser : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userid: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname);\n      callback(res.data);\n    } else {\n      memriiolog(false, 'getUser :server  : ' + res.status);\n    }\n  });\n} //------------------------------------------------------------\n\nexport function setUserMemberships(userid, cloudids) {\n  memriiolog(false, 'Memriio.updateUserClouds : userid ' + userid + ' clouds ' + stry(cloudids));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/set_user_memberships', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userid: userid,\n        cloudids: cloudids\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.success) {\n        memriiolog(false, 'updateUserClouds :server response : ' + res.success);\n        resolve(res.data);\n      } else {\n        memriiolog(false, 'updateUserClouds :server response : ' + res.success + ' with ' + res.error);\n        reject(res.error);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getUserClouds(userid, callback) {\n  memriiolog(false, 'Memriio.getUserClouds : userid ' + userid);\n  fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userID: userid\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.success) {\n      memriiolog(false, 'getUserClouds :server response : ' + res.success);\n      callback(res.data);\n      return true;\n    } else {\n      memriiolog(false, 'getUserClouds :server response : ' + res.success + ' with ' + res.error);\n      return false;\n    }\n  });\n} //-------------------------------------------------------------------------------\n\nexport function createMemoryID(userid, title, description, story, location) {\n  memriiolog(true, 'Memriio.createMemoryID : userid ' + userid + ' title ' + title + ' description ' + description + ' location ' + location);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/creatememory', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userid: userid,\n        description: description,\n        title: title,\n        story: story,\n        location: location\n      })\n    }).then(response => response.json()).then(result => {\n      if (result.success) {\n        console.log('memriio.createMemoryID : ' + result.data);\n        resolve(result.data);\n      } else {\n        console.log('memriio.createMemoryID : failed to create memory with title : ' + title);\n        reject('failed : unable to create memory');\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getUserByEmail(email) {\n  memriiolog(false, 'Memriio.getUserByEmail : email ' + email);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_user_by_email', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        resolve({\n          success: true,\n          data: response.data\n        });\n      } else {\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function getCloudMemberships() {\n  console.log('getCloudMemberships ');\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/get_cloud_memberships', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nothing: null\n      })\n    }).then(response => response.json()).then(response => {\n      resolve({\n        data: response.data\n      });\n    }, error => {\n      reject({\n        error: error\n      });\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function deleteUser(user) {\n  console.log('deleteUser ' + stry(user.userid + ':' + user.firstname + ' ' + user.lastname));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/delete_user', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userid: user.userid\n      })\n    }).then(response => response.json()).then(response => {\n      resolve({\n        data: response.success\n      });\n    }, error => {\n      reject({\n        error: error\n      });\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function setNewUser(user) {\n  console.log('setNewUser ' + stry(user.firstname + ' ' + user.lastname));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/register', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: user.email,\n        password: user.password,\n        firstname: user.firstname,\n        lastname: user.lastname\n      })\n    }).then(response => response.json()).then(response => {\n      resolve({\n        data: response.data\n      });\n    }, error => {\n      reject({\n        error: error\n      });\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport async function getDownloadSignedurl(fileName) {\n  console.log('getsignedurl ' + fileName);\n  let ftype = getFileMime(fileName);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/getObject_signedurl', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName: fileName,\n        fileType: ftype\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        resolve(response.data);\n      } else {\n        console.log('get signedurl ' + stry(response));\n        reject(response.err);\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport async function getUploadSignedurl(fileName) {\n  console.log('getUploadSignedurl ' + fileName);\n  let ftype = getFileMime(fileName);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/putobject_signedurl', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName: fileName,\n        fileType: ftype\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        console.log(stry(response));\n        resolve({\n          success: true,\n          data: {\n            signedRequest: response.data.signedRequest,\n            awsurl: response.data.url\n          }\n        });\n      } else {\n        console.log('get signedurl ' + stry(response));\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nexport function uploadFile(fileName, buffer) {\n  let signedRequest = '';\n  let AWSurl = '';\n  let fileType = getFileMime(fileName);\n  return new Promise((resolve, reject) => {\n    getUploadSignedurl(fileName).then(result => {\n      if (result.success) {\n        signedRequest = result.data.signedRequest;\n        AWSurl = result.data.awsurl;\n        uploadToS3(buffer, signedRequest, fileType).then(result => {\n          if (result.success) {\n            resolve({\n              success: true,\n              awsurl: AWSurl\n            });\n          } else {\n            reject({\n              success: false,\n              data: null,\n              err: result.err\n            });\n          }\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------------------------\n\nexport function uploadFilePair(originalFileName, originalFileBuffer, thumbFileName, thumbFileBuffer) {\n  let originalSignedRequest = '';\n  let thumbSignedRequest = '';\n  let originalAWSurl = '';\n  let thumbAWSurl = '';\n  let origFileType = getFileMime(originalFileName);\n  let thumbFileType = getFileMime(thumbFileName);\n  return new Promise((resolve, reject) => {\n    getUploadSignedurl(originalFileName).then(result => {\n      if (result.success) {\n        originalSignedRequest = result.data.signedRequest;\n        originalAWSurl = result.data.awsurl;\n        getUploadSignedurl(thumbFileName).then(result => {\n          if (result.success) {\n            thumbSignedRequest = result.data.signedRequest;\n            thumbAWSurl = result.data.awsurl;\n            uploadToS3(originalFileBuffer, originalSignedRequest, origFileType).then(result => {\n              if (result.success) {\n                uploadToS3(thumbFileBuffer, thumbSignedRequest, thumbFileType).then(result => {\n                  if (result.success) {\n                    resolve({\n                      success: true,\n                      originalURL: originalAWSurl,\n                      thumbURL: thumbAWSurl\n                    });\n                  }\n                });\n              } else {\n                reject({\n                  success: false,\n                  data: null,\n                  err: result.err\n                });\n              }\n            });\n          } else {\n            reject({\n              success: false,\n              data: null,\n              err: result.err\n            });\n          }\n        });\n      } else {\n        reject({\n          success: false,\n          data: null,\n          err: result.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n\nfunction uploadToS3(file, signedRequest, fileType) {\n  console.log('uploadtoS3 file ');\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('PUT', signedRequest);\n    xhr.setRequestHeader('Content-Type', fileType);\n\n    xhr.onreadystatechange = () => {\n      console.log('uploadtoS3 progress readystate : ' + xhr.readyState);\n\n      if (xhr.readyState === 4) {\n        console.log('uploadtoS3 progress status : ' + xhr.status);\n\n        if (xhr.status === 200) {\n          console.log('uploadtoS3 xhr response : ' + xhr.responseURL);\n          resolve({\n            success: true,\n            data: xhr.responseURL\n          });\n        } else {\n          reject({\n            success: false,\n            data: null,\n            error: 'upload to aws s3 account failed'\n          });\n        }\n      }\n    };\n\n    xhr.send(file);\n  });\n} //-------------------------------------------------------------------------------\n\n\nexport function getFileMime(fileNameAndExtension) {\n  let extension = fileNameAndExtension.split('.')[1];\n  let mime = '';\n\n  switch (extension) {\n    case 'mov':\n      mime = 'video/quicktime';\n      break;\n\n    case 'jpg':\n      mime = 'image/jpeg';\n      break;\n\n    case 'jpeg':\n      mime = 'image/jpeg';\n      break;\n\n    case 'mp4':\n      mime = 'video/mp4';\n      break;\n\n    case 'png':\n      mime = 'image/png';\n      break;\n  }\n\n  return mime;\n} //-------------------------------------------------------------------------------\n\nexport function addFileToMemory(fileUrlObj, ishero, memoryid) {\n  let sourceURL = fileUrlObj.originalURL;\n  let thumbURL = fileUrlObj.thumbURL;\n  let sourceext = getExtension(sourceURL);\n  let thumbext = getExtension(thumbURL);\n  console.log('addFileToMemory : sourceURL ' + getFilename(sourceURL));\n  console.log('addFileToMemory : thumbURL ' + getFilename(thumbURL));\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/associateFile', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        memid: memoryid,\n        fileurl: sourceURL,\n        fileext: sourceext,\n        thumburl: thumbURL,\n        thumbext: thumbext,\n        ishero: ishero\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        console.log('associate file : memid :' + memoryid + ' file : ' + sourceURL + ' hero shot = ' + ishero + ' ' + response.data.id);\n        resolve({\n          success: true,\n          data: response.data\n        });\n      } else {\n        reject({\n          success: false,\n          data: null\n        });\n      }\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function resizeImage(fileBuffer, targetWidth) {\n  return new Promise((resolve, reject) => {\n    new Compressor(fileBuffer, {\n      quality: 0.6,\n      convertSize: 0.3 * 1000000,\n      maxWidth: targetWidth,\n\n      success(result) {\n        console.log('resize success ' + result.size / 1000 + 'kb');\n        resolve({\n          success: true,\n          data: result\n        });\n      },\n\n      error(err) {\n        reject({\n          success: false,\n          data: null,\n          err: err\n        });\n      }\n\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function compressImage(fileBuffer, quality) {\n  return new Promise((resolve, reject) => {\n    new Compressor(fileBuffer, {\n      convertSize: 0.5 * 1000000,\n      quality: quality,\n\n      success(result) {\n        console.log('compress success ' + result.size / 1000 + 'kb');\n        resolve({\n          success: true,\n          data: result\n        });\n      },\n\n      error(err) {\n        console.log('compress fail ' + err);\n        reject({\n          success: false,\n          data: null,\n          err: err\n        });\n      }\n\n    });\n  });\n} // ----------------------------------------------------------------------------\n\nexport function transcodeVideoToHLS(awsMP4Filekey, awsFilePrefix) {\n  memriiolog(true, 'Memriio.transcodeTest : aws file key ' + awsMP4Filekey + ' prefix : ' + awsFilePrefix);\n  return new Promise((resolve, reject) => {\n    fetch('https://memriio-api-0.herokuapp.com/transcode_mp4_HLS_Playlist', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mp4filekey: awsMP4Filekey,\n        outputPrefix: awsFilePrefix\n      })\n    }).then(response => response.json()).then(response => {\n      if (response.success) {\n        memriiolog(true, 'Memriio.transcodeTest : response ' + JSON.stringify(response));\n        resolve({\n          success: true,\n          data: response.data\n        });\n      } else {\n        reject({\n          success: false,\n          data: null,\n          err: response.err\n        });\n      }\n    });\n  });\n} //-------------------------------------------------------------------------------\n//----------------------- UTILITIES --------------------------------------------\n\nexport function getFilebuffer(file) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n\n    reader.onload = () => {\n      console.log('read as array buffer : ------------------');\n      console.log(reader.data);\n      resolve({\n        success: true,\n        data: reader.data\n      });\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n} //---------------------------\n\nexport function canHandleDroppedFile(filename) {\n  let ext = getExtension(filename).toLowerCase();\n  let filetypes = ['jpeg', 'jpg', 'png', 'mov', 'mp4'];\n  let found = filetypes.indexOf(ext);\n  return !(found === -1);\n} //---------------------------\n\nexport function isSupportedImageFile(filename) {\n  let ext = getExtension(filename).toLowerCase();\n  let filetypes = ['jpeg', 'jpg', 'png'];\n  let found = filetypes.indexOf(ext);\n  return !(found === -1);\n} //---------------------------\n\nexport function isSupportedVideoFile(filename) {\n  let ext = getExtension(filename).toLowerCase();\n  let filetypes = ['mov', 'mp4', 'mpeg'];\n  let found = filetypes.indexOf(ext);\n  return !(found === -1);\n} //---------------------------\n\nexport function getExtension(filepath) {\n  let fileParts = filepath.split('.');\n  let filetype = fileParts[fileParts.length - 1];\n  return filetype;\n} //---------------------------\n\nexport function getFilename(filepath) {\n  let parts = filepath.split('/');\n  let fname = parts[parts.length - 1];\n  return fname;\n} //---------------------------\n\nexport function stry(str) {\n  str = JSON.stringify(str);\n  if (str.charAt(0) === '\"') str = str.substr(1, str.length - 1);\n  if (str.charAt(str.length - 1) === '\"') str = str.substr(0, str.length - 1);\n  return str;\n} //---------------------------\n\nexport function getShortDate(longdate) {\n  var fdate = new Date(longdate);\n  return format(fdate, 'dd.MMM.yyyy');\n} //---------------------------\n\nexport function isEmailFormat(email) {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n} //---------------------------\n\nexport function isNonEmptyArray(arrayObj) {\n  if (arrayObj) {\n    if (Array.isArray(arrayObj)) {\n      if (arrayObj.length > 0) {\n        return true;\n      }\n    } else return false;\n  } else return false;\n}","map":{"version":3,"sources":["/Users/bentait/Desktop/memriio/memriio_web/src/components/memriioserver.js"],"names":["React","Compressor","unstable_batchedUpdates","format","array","memriiolog","log","data","console","getMemories_User_Words_Clouds","userid","words","cloudids","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","response","json","res","success","error","getMemories_User_Clouds","getMemories_Clouds","getMemories_Words_Clouds","getMemories_PersonalOnly_All","searchwords","isNonEmptyArray","length","getMemories_PersonalOnly_Unshared","getAllMemoryFiles","memoryid","callback","getAllClouds","ignore","getTaggedPeople","getMemorySearchWords","memid","setMemorySearchWords","getMemoryClouds","getAllUsers","nothing","getCloudPeople","clouds","updateHeroImage","heroImageid","updateTitle","newTitle","updateDescription","newDescription","deleteMemory","updateStory","newStory","len","updateTaggedPeople","taggedPeople","updateClouds","updateMemword","searchword","id","keyword","strength","included","updateCardType","cardtype","updateLocation","newLocation","addTaggedPerson","stry","addTaggedCloud","cloudid","groupid","deleteTaggedPerson","deleteMemoryImage","fileurl","setHeroImage","deleteTaggedCloud","getUser","firstname","lastname","status","setUserMemberships","getUserClouds","userID","createMemoryID","title","description","story","location","result","getUserByEmail","email","err","getCloudMemberships","deleteUser","user","setNewUser","password","getDownloadSignedurl","fileName","ftype","getFileMime","fileType","getUploadSignedurl","signedRequest","awsurl","url","uploadFile","buffer","AWSurl","uploadToS3","uploadFilePair","originalFileName","originalFileBuffer","thumbFileName","thumbFileBuffer","originalSignedRequest","thumbSignedRequest","originalAWSurl","thumbAWSurl","origFileType","thumbFileType","originalURL","thumbURL","file","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","responseURL","send","fileNameAndExtension","extension","split","mime","addFileToMemory","fileUrlObj","ishero","sourceURL","sourceext","getExtension","thumbext","getFilename","fileext","thumburl","resizeImage","fileBuffer","targetWidth","quality","convertSize","maxWidth","size","compressImage","transcodeVideoToHLS","awsMP4Filekey","awsFilePrefix","mp4filekey","outputPrefix","getFilebuffer","reader","FileReader","onload","readAsArrayBuffer","canHandleDroppedFile","filename","ext","toLowerCase","filetypes","found","indexOf","isSupportedImageFile","isSupportedVideoFile","filepath","fileParts","filetype","parts","fname","str","charAt","substr","getShortDate","longdate","fdate","Date","isEmailFormat","re","test","String","arrayObj","Array","isArray"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Compressor from 'compressorjs'\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { format } from \"date-fns\";\nimport { array } from 'prop-types';\n\nfunction memriiolog(log,data) {\n    if(log) console.log(data)       \n}\n\n//-------------------------------------------------------------------------------\n\nexport function getMemories_User_Words_Clouds  (userid,words,cloudids)  { \n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_keywords_cloudids', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                    words:words,\n                    userid:userid,\n                    cloudids:cloudids\n                })\n            })\n            .then(response => response.json())\n            .then(res => {\n                if ( res.success ){\n                    resolve(res.data)  \n                }else{\n                    reject(res.error)\n                }\n            })\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getMemories_User_Clouds ( userid,cloudids)  {  \n\n    console.log('getMemories_User_Clouds - userid : ' + userid + ' cloudids : ' + cloudids);\n\n    return new Promise((resolve,reject)=>{\n        fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_cloudids', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                    userid:userid,\n                    cloudids:cloudids\n                })\n            })\n            .then(response => response.json())\n            .then(res => {\n                if ( res.success ){\n                    resolve(res.data)  \n                }else{\n                    reject(res.error)\n                }\n            })\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getMemories_Clouds ( cloudids)  {  \n\n    console.log('getMemories_Clouds - cloudids : ' + cloudids);\n\n    return new Promise((resolve,reject)=>{\n        fetch('https://memriio-api-0.herokuapp.com/get_memories_cloudids', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                    cloudids:cloudids\n                })\n            })\n            .then(response => response.json())\n            .then(res => {\n                if ( res.success ){\n                    resolve(res.data)  \n                }else{\n                    reject(res.error)\n                }\n            })\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getMemories_Words_Clouds ( cloudids,words)  {  \n\n    console.log('getMemories_Words_Clouds - cloudids : ' + cloudids);\n\n    return new Promise((resolve,reject)=>{\n        fetch('https://memriio-api-0.herokuapp.com/get_memories_keywords_clouds', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                    cloudids:cloudids,\n                    words:words\n                })\n            })\n            .then(response => response.json())\n            .then(res => {\n                if ( res.success ){\n                    resolve(res.data)  \n                }else{\n                    reject(res.error)\n                }\n            })\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getMemories_PersonalOnly_All (userid,searchwords) {\n    \n    console.log('getMemories_PersonalOnly_All - userid : ' + userid + ' searchwords : ' + searchwords);\n  \n    \n    if(isNonEmptyArray(searchwords)){\n\n        console.log('getMemories_PersonalOnly_All - with searchwords')\n        return new Promise((resolve,reject)=>{\n            fetch('https://memriio-api-0.herokuapp.com/get_memories_keywords_user_noclouds', {\n                method: 'post',\n                headers: {'Content-Type':'application/json'},\n                body:JSON.stringify({\n                        userid:userid,\n                        words:searchwords\n                    })\n                })\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        resolve(res.data)  \n                    }else{\n                        reject(res.error)\n                    }\n                })\n        })\n\n    }else{\n        console.log('getMemories_PersonalOnly_All - no searchwords')\n        return new Promise((resolve,reject)=>{\n            fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_noclouds', {\n                method: 'post',\n                headers: {'Content-Type':'application/json'},\n                body:JSON.stringify({\n                        userid:userid,\n                    })\n                })\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        console.log('getMemories_PersonalOnly_All returns ' + res.data.length )\n                        resolve(res.data)  \n                    }else{\n                        reject(res.error)\n                    }\n                })\n        })\n\n    }  \n\n}\n//-------------------------------------------------------------------------------\n\nexport function getMemories_PersonalOnly_Unshared (userid,searchwords)  {  \n\n    if(searchwords){\n        return new Promise((resolve,reject)=>{\n            fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_keywords_noclouds_unshared', {\n                method: 'post',\n                headers: {'Content-Type':'application/json'},\n                body:JSON.stringify({\n                        userid:userid,\n                        words:searchwords\n                    })\n                })\n                \n                .then(res => {\n                    if ( res.success ){\n                        resolve(res.data)  \n                    }else{\n                        reject(res.error)\n                    }\n                })\n        })\n\n    }else{\n        return new Promise((resolve,reject)=>{\n            fetch('https://memriio-api-0.herokuapp.com/get_memories_userid_noclouds_unshared', {\n                method: 'post',\n                headers: {'Content-Type':'application/json'},\n                body:JSON.stringify({\n                        userid:userid,\n                    })\n                })\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        resolve(res.data)  \n                    }else{\n                        reject(res.error)\n                    }\n                })\n        })\n\n    }  \n\n}\n//-------------------------------------------------------------------------------\n\n\n//--Returns and array of of images and related meta data from the server-----------------------------------------------\n\nexport function getAllMemoryFiles  (memoryid,callback) {\n   \n    memriiolog(false,'Memriio.getAllMemoryFiles : memoryid ' + memoryid )\n\n    \n    fetch('https://memriio-api-0.herokuapp.com/get_memfiles_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('server response : ' + res.success))\n                        memriiolog(false,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//------------------------------------------------------------\n\nexport function getAllClouds (){\n    memriiolog(true,('Memriio.getAllClouds'))\n  \n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/get_clouds', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                body:JSON.stringify({ignore:null}) })\n                    .then(response => response.json())\n                    .then(res => {\n                        if ( res.success ){\n                            memriiolog(true,('getAllClouds :server response : ' + res.success))\n                            resolve(res.data)\n                        }else{\n                            memriiolog(true,('getAllClouds :server response : ' + res.success + ' with ' + res.error)) \n                            reject(null)\n                        }\n                    })\n    })\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getTaggedPeople  (memoryid,callback) {\n    memriiolog(false,('Memriio.getTaggedPeople : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedpeople_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('server response : ' + res.success))\n                        memriiolog(false,('server data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function getMemorySearchWords  (memoryid,callback) {\n    memriiolog(false,('Memriio.getMemorySearchWords : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_searchwords_memid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getMemorySearchWords server response : ' + res.success))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('getMemorySearchWords server response : ' + res.success + ' with ' + res.error)) \n                    }\n                })\n\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexport function setMemorySearchWords  (memoryid,searchwords) {\n    memriiolog(false,('Memriio.setMemorySearchWords : memoryid ' + memoryid + ' searchwords count = ' + searchwords.length))\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/set_searchwords_memid', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({memid:memoryid,searchwords:searchwords})})\n                    .then(response => response.json())\n                    .then(res => {\n                        if ( res.success ){\n                            memriiolog(false,('setMemorySearchWords server response : ' + res.success))\n                            resolve(res)\n                        \n                        }else{\n                            memriiolog(false,('setMemorySearchWords server response : ' + res.success + ' with ' + res.error))\n                            reject(res.error)\n                        }\n                    })\n    })\n}\n\n\n//-------------------------------------------------------------------------------------------------------------------------\n\nexport function getMemoryClouds  (memoryid,callback) {\n    memriiolog(false,('Memriio.getMemoryclouds : memoryid ' + memoryid ))\n   \n    \n    fetch('https://memriio-api-0.herokuapp.com/get_associatedclouds_memoryid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getMemoryclouds server response : ' + res.success))\n                        memriiolog(false,('getMemoryclouds response data : ' + JSON.stringify(res.data)))\n                        callback(res.data)\n                    }else{\n                        memriiolog(false,('getMemoryclouds server response : ' + res.success + ' with ' + res.error))  \n                    }\n                })\n\n}\n//----------------------------------------------------------------------------------------------------------------\n\nexport function getAllUsers  () {\n    memriiolog(false,('Memriio.getAllUsers'  ))\n    \n    return new Promise((resolve,reject) =>{\n\n        fetch('https://memriio-api-0.herokuapp.com/get_all_users', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({nothing:'nothing'})})\n\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getAllUsers server response : ' + res.success))                        \n                        resolve(res.data)\n\n                    }else{\n                        memriiolog(false,('getAllUsers server response : ' + res.success + ' with ' + res.error))\n                        reject(null)\n                    }\n                })\n\n    })\n    \n\n}\n\n//--Returns and array of {userid,firstname,lastname} objects from the server-----------------------------------------------\n\nexport function getCloudPeople  (clouds,callback) {\n    memriiolog(false,('Memriio.getCloudPeople : clouds ' + JSON.stringify(clouds) ))\n    \n    return new Promise((resolve,reject) =>{\n\n        fetch('https://memriio-api-0.herokuapp.com/get_cloud_people_clouds', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({clouds:clouds})})\n\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getCloudPeople server response : ' + res.success))\n                        memriiolog(false,('getCloudPeople response data : ' + JSON.stringify(res.data)))\n                        if(callback) callback(res.data)\n                        resolve(res.data)\n\n                    }else{\n                        memriiolog(false,('getCloudPeople server response : ' + res.success + ' with ' + res.error))\n                        reject(null)\n                    }\n                })\n\n    })\n    \n\n}\n\n\n//------------------------------------------------------------\n\nexport function updateHeroImage (memoryid,heroImageid ){\n    memriiolog(false,('Memriio.getAllImages : memoryid ' + memoryid ))\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTitle (memoryid,newTitle){\n    memriiolog(false,('Memriio.updateTitle : memoryid ' + memoryid + ' title : ' + newTitle))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_title', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newTitle:newTitle})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateTitle : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateTitle : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function updateDescription (memoryid,newDescription){\n    memriiolog(false,('Memriio.updateDescription : memoryid ' + memoryid + ' description : ' + newDescription))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_description', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newDescription:newDescription})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateDescription : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateDescription : server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n\n}\n//------------------------------------------------------------\n\nexport function deleteMemory (memoryid){\n    \n    memriiolog(true,('Memriio.deleteMemory : memoryid ' + memoryid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/delete_memory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(true,('deleteMemory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(true,('deleteMemory : server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n\n}\n\n//------------------------------------------------------------\n\nexport function updateStory (memoryid,newStory){\n    let len = 0\n    if(newStory){len = newStory.length}\n    memriiolog(false,('Memriio.updateStory : memoryid ' + memoryid + ' story.length : ' + len + ' chars'))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_story', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newStory:newStory})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateStory : server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateStory : server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n\n\n}\n\n//------------------------------------------------------------\n\nexport function updateTaggedPeople (memoryid,taggedPeople){\n   \n    \n}\n\n//------------------------------------------------------------\n\nexport function updateClouds (memoryid,clouds){\n    \n\n}\n\n//------------------------------------------------------------\n\nexport function updateMemword(searchword){\n\n    memriiolog(false,('Memriio.updateMemword :memword ' + JSON.stringify(searchword)))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_searchword', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({id:searchword.id,\n                                     memid:searchword.memid,\n                                     keyword:searchword.keyword,\n                                     strength:searchword.strength,\n                                     included:searchword.included})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateMemword :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateMemword :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })  \n   \n}\n\n//------------------------------------------------------------\n\nexport function updateCardType (memoryid,cardtype){\n\n    memriiolog(false,('Memriio.updateCardType : memoryid ' + memoryid + ' card type : ' + cardtype))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_cardtype', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,cardtype:cardtype})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateCardType :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateCardType :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function updateLocation (memoryid,newLocation){\n    memriiolog(false,('Memriio.updateLocation : memoryid ' + memoryid + ' location : ' + newLocation))\n  \n    fetch('https://memriio-api-0.herokuapp.com/set_memory_location', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memoryid:memoryid,newLocation:newLocation})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateLocation :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('updateLocation :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedPerson (memoryid,userid){\n    memriiolog(true,('Memriio.addTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/associatePerson', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({memid:memoryid,userid:userid})})\n                    .then(response => response.json())\n                    .then(res => {\n                        if ( res.success ){\n                            memriiolog(true,('addTaggedPerson :server response : ' + res.success))\n                            resolve(res)\n                        }else{\n                            memriiolog(true,('addTaggedPerson :server response : ' + stry(res.success) + ' with ' + stry(res.error)))\n                            reject(res.error)\n                        }\n                    })\n    })\n}\n\n//------------------------------------------------------------\n\nexport function addTaggedCloud (memoryid,cloudid){\n    memriiolog(true,('Memriio.addTaggedCloud : memoryid ' + memoryid + ' clouid : ' + cloudid))\n  \n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/associateGroup', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({memid:memoryid,groupid:cloudid})})\n                    .then(response => response.json())\n                    .then(res => {\n                        if ( res.success ){\n                            memriiolog(true,('addTaggedCloud :server response : ' + res.success))\n                            resolve({\n                                success:true,\n                                data:res.data\n                            })   \n                        }else{\n                            memriiolog(true,('addTaggedCloud :server response : ' + res.success + ' with ' + res.error)) \n                            reject({\n                                success:false,\n                                data:null,\n                                error:res.error\n                            })\n                        }\n                    })\n    })\n}\n\n\n//------------------------------------------------------------\n\nexport function deleteTaggedPerson (memoryid,userid){\n    memriiolog(false,('Memriio.deleteTaggedPerson : memoryid ' + memoryid + ' user : ' + userid))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeTaggedPerson', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteTaggedPerson :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteTaggedPerson :server response : ' + res.success + ' with ' + res.error))  \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteMemoryImage (memoryid,fileurl){\n    memriiolog(false,('Memriio.deleteMemoryImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/removeFileFromMemory_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteMemoryImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('deleteMemoryImage :server response : ' + res.success + ' with ' + res.error))\n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function setHeroImage (memoryid,fileurl){\n    memriiolog(false,('Memriio.setHeroImage : memoryid ' + memoryid + ' cloud : ' + fileurl))\n  \n    fetch('https://memriio-api-0.herokuapp.com/setHeroImage_fileurl', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,fileurl:fileurl})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('setHeroImage :server response : ' + res.success))\n                        return true\n                    }else{\n                        memriiolog(false,('setHeroImage :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//---------------------------------------------------------------------------------------------------------------\n\nexport function deleteTaggedCloud (memoryid,cloudid){\n    memriiolog(false,('Memriio.deleteTaggedCloud : memoryid ' + memoryid + ' cloud : ' + cloudid))\n    \n    return new Promise((resolve,reject) =>{\n    fetch('https://memriio-api-0.herokuapp.com/removeCloudFromMemory', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({memid:memoryid,cloudid:cloudid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('deleteTaggedCloud :server response : ' + res.success))\n                        resolve(res.success)\n                        }else{\n                        memriiolog(false,('deleteTaggedCloud :server response : ' + res.success + ' with ' + res.error))  \n                        reject(res.error)\n                    }\n                })\n    })\n}\n\n//------------------------------------------------------------\n\nexport function getUser (userid,callback){\n    memriiolog(false,('Memriio.getUser : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/getUser_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userid:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success){\n                        memriiolog(false,('getUser :server  : ' + res.data.userid + ' ' + res.data.firstname + ' ' + res.data.lastname))\n                        callback(res.data)                        \n                    }else{\n                        memriiolog(false,('getUser :server  : ' + res.status ))                         \n                    }\n                })\n}\n\n//------------------------------------------------------------\n\nexport function setUserMemberships (userid,cloudids){\n\n    memriiolog(false,('Memriio.updateUserClouds : userid ' + userid + ' clouds ' + stry(cloudids)))\n    return new Promise((resolve,reject) =>{\n    fetch('https://memriio-api-0.herokuapp.com/set_user_memberships', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userid:userid,cloudids:cloudids})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('updateUserClouds :server response : ' + res.success))\n                        resolve(res.data)\n                    }else{\n                        memriiolog(false,('updateUserClouds :server response : ' + res.success + ' with ' + res.error)) \n                        reject(res.error)\n                    }\n                })\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getUserClouds (userid,callback){\n    memriiolog(false,('Memriio.getUserClouds : userid ' + userid ))\n  \n    fetch('https://memriio-api-0.herokuapp.com/get_clouds_userid', {\n        method: 'post',headers: {\n            'Content-Type':'application/json'},\n                body:JSON.stringify({userID:userid})})\n                .then(response => response.json())\n                .then(res => {\n                    if ( res.success ){\n                        memriiolog(false,('getUserClouds :server response : ' + res.success))\n                        callback(res.data)\n                        return true\n                    }else{\n                        memriiolog(false,('getUserClouds :server response : ' + res.success + ' with ' + res.error)) \n                        return false\n                    }\n                })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function createMemoryID (userid,title,description,story,location)  {\n\n    memriiolog(true,('Memriio.createMemoryID : userid ' + userid + ' title ' + title + ' description ' + description + ' location ' + location ))\n\n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/creatememory', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                userid : userid,\n                description: description,\n                title : title,\n                story : story,\n                location : location\n                })\n        })\n        .then(response => response.json())\n        .then(result => {\n            if(result.success){\n                console.log('memriio.createMemoryID : ' + result.data);\n                resolve(result.data)\n            }  else {\n                console.log('memriio.createMemoryID : failed to create memory with title : ' + title);\n                reject('failed : unable to create memory')\n            }\n        })\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getUserByEmail ( email ){\n\n    memriiolog(false,('Memriio.getUserByEmail : email ' + email ))\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/get_user_by_email', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({email:email})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            resolve({\n                                success:true,\n                                data:response.data\n                            })                       \n                        }else{\n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                            })\n                        }\n                    })\n\n    })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getCloudMemberships ( ){\n    console.log('getCloudMemberships ')\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/get_cloud_memberships', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({nothing:null})})\n                .then(response => response.json())\n                .then(response => \n                        {resolve({data:response.data})},\n                        error =>{reject({error:error})})\n        })\n}\n//-------------------------------------------------------------------------------\nexport function deleteUser ( user ){\n    console.log('deleteUser ' + stry(user.userid + ':' + user.firstname + ' ' + user.lastname));\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/delete_user', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({userid:user.userid})})\n                .then(response => response.json())\n                .then(response => \n                        {resolve({data:response.success})},\n                        error =>{reject({error:error})})\n        })\n}\n\n//-------------------------------------------------------------------------------\nexport function setNewUser ( user ){\n    console.log('setNewUser ' + stry(user.firstname + ' ' + user.lastname));\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/register', {\n            method: 'post',\n            headers: {'Content-Type':'application/json'},\n            body:JSON.stringify({\n                    email:user.email,\n                    password: user.password,\n                    firstname: user.firstname,\n                    lastname: user.lastname\n                    })\n                })\n                .then(response => response.json())\n                .then(response => \n                        {resolve({data:response.data})},\n                        error =>{reject({error:error})})\n        })\n}\n\n//-------------------------------------------------------------------------------\n\nexport async function getDownloadSignedurl (fileName) {\n    \n    console.log('getsignedurl ' + fileName);\n    let ftype = getFileMime(fileName)\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/getObject_signedurl', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({fileName: fileName,fileType : ftype})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            resolve( response.data )                       \n                        }else{\n                            console.log('get signedurl ' + stry(response))\n                            reject( response.err)\n                        }\n                    })\n            })\n \n}\n\n//-------------------------------------------------------------------------------\n\nexport async function getUploadSignedurl (fileName) {\n    \n    console.log('getUploadSignedurl ' + fileName);\n    let ftype = getFileMime(fileName)\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/putobject_signedurl', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({fileName: fileName,fileType : ftype})})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            console.log(stry(response)); \n                            \n                            resolve({\n                                success:true,\n                                data:{\n                                    signedRequest: response.data.signedRequest,\n                                    awsurl: response.data.url\n                                }\n                            })                       \n                        }else{\n                            console.log('get signedurl ' + stry(response))\n                            \n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                                \n                                \n                            })\n                        }\n                    })\n            })\n \n}\n//-------------------------------------------------------------------------------\nexport function uploadFile(fileName,buffer ){\n    let signedRequest = ''\n    let AWSurl = ''\n    let fileType = getFileMime(fileName)\n\n    return new Promise((resolve,reject)=>{\n        getUploadSignedurl(fileName)\n        .then(result =>{\n            if(result.success){\n                signedRequest = result.data.signedRequest\n                AWSurl = result.data.awsurl\n                uploadToS3(buffer,signedRequest,fileType)\n                .then(result => { \n                    if(result.success){\n                        resolve({\n                            success : true,\n                            awsurl: AWSurl,\n                        })\n                    }else{\n                        reject({\n                            success:false,\n                            data: null,\n                            err:result.err\n                        })    \n                    }\n                })        \n            }\n        })\n           \n    })\n}\n\n//-------------------------------------------------------------------------------------------------\n\nexport function uploadFilePair(originalFileName,originalFileBuffer,thumbFileName,thumbFileBuffer ){\n    let originalSignedRequest = ''\n    let thumbSignedRequest = ''\n    let originalAWSurl = ''\n    let thumbAWSurl = ''\n    let origFileType = getFileMime(originalFileName)\n    let thumbFileType = getFileMime(thumbFileName)\n\n    return new Promise((resolve,reject)=>{\n        getUploadSignedurl(originalFileName)\n        .then(result =>{\n            if(result.success){\n\n                originalSignedRequest = result.data.signedRequest\n                originalAWSurl = result.data.awsurl\n                \n                getUploadSignedurl(thumbFileName)\n                .then(result => {\n                    if(result.success){\n                        thumbSignedRequest = result.data.signedRequest\n                        thumbAWSurl = result.data.awsurl\n                        uploadToS3(originalFileBuffer,originalSignedRequest,origFileType)\n                        .then(result => {\n                            if(result.success){\n                            uploadToS3(thumbFileBuffer,thumbSignedRequest,thumbFileType)\n                            .then(result =>{\n                                if(result.success){\n                                    resolve({\n                                        success : true,\n                                        originalURL: originalAWSurl,\n                                        thumbURL : thumbAWSurl\n                                    })\n                                }   \n                             })\n                            }else{\n                                reject({\n                                    success:false,\n                                    data: null,\n                                    err:result.err\n                                })    \n                            }\n                         })\n                        \n                    }else{\n                        reject({\n                            success:false,\n                            data: null,\n                            err:result.err\n                        })\n                    }\n                })               \n            }else{\n                reject( {\n                    success:false,\n                    data: null,\n                    err:result.err\n                })\n            }\n           \n        })\n    })\n\n}\n\n//-------------------------------------------------------------------------------\n\nfunction uploadToS3  (file, signedRequest,fileType)  {\n    console.log('uploadtoS3 file '  );\n    return new Promise((resolve,reject) => {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('PUT', signedRequest);\n        xhr.setRequestHeader('Content-Type', fileType) \n        xhr.onreadystatechange = () => {\n        console.log('uploadtoS3 progress readystate : '  + xhr.readyState );\n        if(xhr.readyState === 4){\n            console.log('uploadtoS3 progress status : '  + xhr.status );\n            if(xhr.status === 200){\n                console.log('uploadtoS3 xhr response : '  + xhr.responseURL );\n                resolve({\n                    success:true,\n                    data: xhr.responseURL\n                })\n            }\n            else{\n                reject({\n                    success:false,\n                    data:null,\n                    error:'upload to aws s3 account failed'\n                })\n            }\n        }\n        };\n        xhr.send(file);\n  })\n}\n\n//-------------------------------------------------------------------------------\n\nexport function getFileMime  (fileNameAndExtension)  {\n\n    let extension = fileNameAndExtension.split('.')[1]\n    \n    let mime =''\n    switch (extension) {\n        case 'mov': mime = 'video/quicktime' \n        break;\n        case 'jpg': mime = 'image/jpeg' \n        break;\n        case 'jpeg': mime = 'image/jpeg' \n        break;\n        case 'mp4': mime = 'video/mp4' \n        break;\n        case 'png': mime = 'image/png' \n        break;\n    }\n    return mime\n}\n\n//-------------------------------------------------------------------------------\n\n\nexport function addFileToMemory  (fileUrlObj,ishero,memoryid)  {\n    \n    \n    let sourceURL  = fileUrlObj.originalURL\n    let thumbURL   = fileUrlObj.thumbURL\n    \n    let sourceext   = getExtension( sourceURL )\n    let thumbext    = getExtension( thumbURL  )\n    \n    console.log('addFileToMemory : sourceURL ' + getFilename(sourceURL))\n    console.log('addFileToMemory : thumbURL ' + getFilename(thumbURL))\n    \n    return new Promise((resolve,reject) => {\n        fetch('https://memriio-api-0.herokuapp.com/associateFile', {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({\n                        memid: memoryid,\n                        fileurl: sourceURL,\n                        fileext: sourceext,\n                        thumburl: thumbURL,\n                        thumbext: thumbext,\n                        ishero: ishero\n                        })\n                    })\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            console.log('associate file : memid :'  + memoryid + ' file : ' +  sourceURL + ' hero shot = ' + ishero + ' ' + response.data.id);\n                            resolve({\n                                success:true,\n                                data:response.data\n                            })\n                        }else{\n                            reject({\n                                success:false,\n                                data:null\n                            })\n                        }\n                    })\n    })\n}\n// ----------------------------------------------------------------------------\n\nexport function resizeImage( fileBuffer,targetWidth ){\n\n    return new Promise((resolve,reject) => {\n        new Compressor(fileBuffer, \n            {\n                quality: 0.6,\n                convertSize: (0.3 * 1000000),\n                maxWidth:targetWidth,\n                success(result) {\n                    console.log('resize success ' + result.size/1000 + 'kb');\n                    resolve({success:true,data:result})},\n                error(err){reject({success:false,data:null,err:err})}\n            })\n     })\n}\n\n// ----------------------------------------------------------------------------\n\nexport function compressImage( fileBuffer,quality ){\n\n    return new Promise((resolve,reject) => {\n        new Compressor(fileBuffer, \n            {\n                convertSize: (0.5 * 1000000),\n                quality: quality,\n                success(result) {\n                    console.log('compress success ' + result.size/1000 + 'kb');\n                    \n                    resolve({success:true,data:result})\n                },\n                error(err){\n                    console.log('compress fail ' + err);\n                    \n                    reject({success:false,data:null,err:err})}\n            })\n     })\n}\n\n// ----------------------------------------------------------------------------\n\nexport function transcodeVideoToHLS( awsMP4Filekey , awsFilePrefix ){\n   \n\n    memriiolog(true,('Memriio.transcodeTest : aws file key ' + awsMP4Filekey  + ' prefix : ' + awsFilePrefix ))\n\n    return new Promise((resolve,reject) =>{\n        fetch('https://memriio-api-0.herokuapp.com/transcode_mp4_HLS_Playlist', \n        {\n            method: 'post',headers: {\n                'Content-Type':'application/json'},\n                    body:JSON.stringify({ mp4filekey : awsMP4Filekey , outputPrefix : awsFilePrefix })})\n                    .then(response => response.json())\n                    .then(response => {\n                        if ( response.success){\n                            memriiolog(true,('Memriio.transcodeTest : response ' + JSON.stringify(response)))\n                            resolve({\n\n                                success:true,\n                                data:response.data\n                            })                       \n                        }else{\n                            reject( {\n                                success:false,\n                                data: null,\n                                err:response.err\n                            })\n                        }\n                    })\n\n    })\n}\n\n    \n//-------------------------------------------------------------------------------\n\n//----------------------- UTILITIES --------------------------------------------\n\nexport function getFilebuffer( file ){\n\n    return new Promise((resolve,reject) => {\n        let reader = new FileReader()\n\n        reader.onload = () => {\n            console.log('read as array buffer : ------------------');\n            console.log(reader.data);\n            resolve({\n                success : true,\n                data    : reader.data\n            })\n        } \n        reader.readAsArrayBuffer( file )\n    })\n}\n//---------------------------\n\nexport function canHandleDroppedFile(filename){\n    let ext = getExtension(filename).toLowerCase()    \n    let filetypes = ['jpeg','jpg','png','mov','mp4']\n    let found = filetypes.indexOf(ext)\n    return !(found === -1) \n}\n\n//---------------------------\n\nexport function isSupportedImageFile(filename){\n    let ext = getExtension(filename).toLowerCase() \n    let filetypes = ['jpeg','jpg','png']\n    let found = filetypes.indexOf(ext)\n    return !(found === -1) \n}\n\n//---------------------------\n\nexport function isSupportedVideoFile(filename){\n    let ext = getExtension(filename).toLowerCase() \n    let filetypes = ['mov','mp4','mpeg']\n    let found = filetypes.indexOf(ext)\n    return !(found === -1) \n}\n\n//---------------------------\n\nexport function getExtension (filepath) {\n    let fileParts = filepath.split('.');\n    let filetype = fileParts[fileParts.length-1];\n    return filetype\n}\n\n//---------------------------\n\nexport function getFilename (filepath) {\n    let parts = filepath.split('/')\n    let fname = parts[parts.length-1]\n    return fname\n}\n\n//---------------------------\n\nexport function stry (str)  {\n    str = JSON.stringify(str)\n    if (str.charAt(0) === '\"') str = str.substr(1,str.length-1)    \n    if (str.charAt(str.length -1) === '\"') str = str.substr(0,str.length-1)\n    return str\n}\n\n//---------------------------\n\nexport function getShortDate(longdate) {\n    var fdate = new Date(longdate)\n    \n    return format(fdate,'dd.MMM.yyyy')\n}\n\n//---------------------------\n\nexport function isEmailFormat(email){\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n\n}\n\n//---------------------------\n\nexport function isNonEmptyArray (arrayObj) {\n    if(arrayObj){\n        if(Array.isArray(arrayObj)){\n            if(arrayObj.length > 0){\n                return true\n            }\n        }else return false\n    }else return false\n}"]},"metadata":{},"sourceType":"module"}